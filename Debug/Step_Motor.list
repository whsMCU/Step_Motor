
Step_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e1ac  08013880  08013880  00023880  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021a2c  08021a2c  00040398  2**0
                  CONTENTS
  4 .ARM          00000008  08021a2c  08021a2c  00031a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021a34  08021a34  00040398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021a34  08021a34  00031a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021a38  08021a38  00031a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  08021a3c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040398  2**0
                  CONTENTS
 10 .bss          00002898  200003c0  200003c0  000403c0  2**6
                  ALLOC
 11 ._user_heap_stack 00000600  20002c58  20002c58  000403c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 14 .debug_line   00031345  00000000  00000000  0004040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000055  00000000  00000000  00071750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000221ed  00000000  00000000  000717a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006734  00000000  00000000  00093992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001f40  00000000  00000000  0009a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da43c  00000000  00000000  0009c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000017bb  00000000  00000000  00176444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002cf87  00000000  00000000  00177bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009314  00000000  00000000  001a4b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c0 	.word	0x200003c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801382c 	.word	0x0801382c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003c4 	.word	0x200003c4
 80001cc:	0801382c 	.word	0x0801382c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a6 	b.w	8000fac <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9e08      	ldr	r6, [sp, #32]
 8000cea:	460d      	mov	r5, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	460f      	mov	r7, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4694      	mov	ip, r2
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0xe2>
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	b143      	cbz	r3, 8000d12 <__udivmoddi4+0x2e>
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	f1c3 0220 	rsb	r2, r3, #32
 8000d08:	409f      	lsls	r7, r3
 8000d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	409c      	lsls	r4, r3
 8000d12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d16:	fa1f f58c 	uxth.w	r5, ip
 8000d1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d1e:	0c22      	lsrs	r2, r4, #16
 8000d20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d28:	fb01 f005 	mul.w	r0, r1, r5
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d30:	eb1c 0202 	adds.w	r2, ip, r2
 8000d34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d38:	f080 811c 	bcs.w	8000f74 <__udivmoddi4+0x290>
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	f240 8119 	bls.w	8000f74 <__udivmoddi4+0x290>
 8000d42:	3902      	subs	r1, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a12      	subs	r2, r2, r0
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d56:	fb00 f505 	mul.w	r5, r0, r5
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	d90a      	bls.n	8000d74 <__udivmoddi4+0x90>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x294>
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x294>
 8000d70:	4464      	add	r4, ip
 8000d72:	3802      	subs	r0, #2
 8000d74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	b11e      	cbz	r6, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	40dc      	lsrs	r4, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	e9c6 4300 	strd	r4, r3, [r6]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0xbc>
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f000 80ed 	beq.w	8000f6e <__udivmoddi4+0x28a>
 8000d94:	2100      	movs	r1, #0
 8000d96:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	fab3 f183 	clz	r1, r3
 8000da4:	2900      	cmp	r1, #0
 8000da6:	d149      	bne.n	8000e3c <__udivmoddi4+0x158>
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d302      	bcc.n	8000db2 <__udivmoddi4+0xce>
 8000dac:	4282      	cmp	r2, r0
 8000dae:	f200 80f8 	bhi.w	8000fa2 <__udivmoddi4+0x2be>
 8000db2:	1a84      	subs	r4, r0, r2
 8000db4:	eb65 0203 	sbc.w	r2, r5, r3
 8000db8:	2001      	movs	r0, #1
 8000dba:	4617      	mov	r7, r2
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d0e2      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc4:	e7df      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc6:	b902      	cbnz	r2, 8000dca <__udivmoddi4+0xe6>
 8000dc8:	deff      	udf	#255	; 0xff
 8000dca:	fab2 f382 	clz	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8090 	bne.w	8000ef4 <__udivmoddi4+0x210>
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dda:	fa1f fe8c 	uxth.w	lr, ip
 8000dde:	2101      	movs	r1, #1
 8000de0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de4:	fb07 2015 	mls	r0, r7, r5, r2
 8000de8:	0c22      	lsrs	r2, r4, #16
 8000dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dee:	fb0e f005 	mul.w	r0, lr, r5
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x124>
 8000df6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x122>
 8000e00:	4290      	cmp	r0, r2
 8000e02:	f200 80cb 	bhi.w	8000f9c <__udivmoddi4+0x2b8>
 8000e06:	4645      	mov	r5, r8
 8000e08:	1a12      	subs	r2, r2, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e10:	fb07 2210 	mls	r2, r7, r0, r2
 8000e14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e18:	fb0e fe00 	mul.w	lr, lr, r0
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x14e>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x14c>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	f200 80bb 	bhi.w	8000fa6 <__udivmoddi4+0x2c2>
 8000e30:	4610      	mov	r0, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3a:	e79f      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e3c:	f1c1 0720 	rsb	r7, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e52:	40fd      	lsrs	r5, r7
 8000e54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e58:	4323      	orrs	r3, r4
 8000e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5e:	fa1f fe8c 	uxth.w	lr, ip
 8000e62:	fb09 5518 	mls	r5, r9, r8, r5
 8000e66:	0c1c      	lsrs	r4, r3, #16
 8000e68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7a:	d90b      	bls.n	8000e94 <__udivmoddi4+0x1b0>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e84:	f080 8088 	bcs.w	8000f98 <__udivmoddi4+0x2b4>
 8000e88:	42a5      	cmp	r5, r4
 8000e8a:	f240 8085 	bls.w	8000f98 <__udivmoddi4+0x2b4>
 8000e8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e92:	4464      	add	r4, ip
 8000e94:	1b64      	subs	r4, r4, r5
 8000e96:	b29d      	uxth	r5, r3
 8000e98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x1da>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb4:	d26c      	bcs.n	8000f90 <__udivmoddi4+0x2ac>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	d96a      	bls.n	8000f90 <__udivmoddi4+0x2ac>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	46c8      	mov	r8, r9
 8000ece:	46ae      	mov	lr, r5
 8000ed0:	d356      	bcc.n	8000f80 <__udivmoddi4+0x29c>
 8000ed2:	d053      	beq.n	8000f7c <__udivmoddi4+0x298>
 8000ed4:	b156      	cbz	r6, 8000eec <__udivmoddi4+0x208>
 8000ed6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eda:	eb64 040e 	sbc.w	r4, r4, lr
 8000ede:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee2:	40ca      	lsrs	r2, r1
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	4317      	orrs	r7, r2
 8000ee8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef4:	f1c3 0120 	rsb	r1, r3, #32
 8000ef8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000efc:	fa20 f201 	lsr.w	r2, r0, r1
 8000f00:	fa25 f101 	lsr.w	r1, r5, r1
 8000f04:	409d      	lsls	r5, r3
 8000f06:	432a      	orrs	r2, r5
 8000f08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f14:	fb07 1510 	mls	r5, r7, r0, r1
 8000f18:	0c11      	lsrs	r1, r2, #16
 8000f1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f22:	428d      	cmp	r5, r1
 8000f24:	fa04 f403 	lsl.w	r4, r4, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x258>
 8000f2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f32:	d22f      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f34:	428d      	cmp	r5, r1
 8000f36:	d92d      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1b49      	subs	r1, r1, r5
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f44:	fb07 1115 	mls	r1, r7, r5, r1
 8000f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f50:	4291      	cmp	r1, r2
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x282>
 8000f54:	eb1c 0202 	adds.w	r2, ip, r2
 8000f58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f5c:	d216      	bcs.n	8000f8c <__udivmoddi4+0x2a8>
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	d914      	bls.n	8000f8c <__udivmoddi4+0x2a8>
 8000f62:	3d02      	subs	r5, #2
 8000f64:	4462      	add	r2, ip
 8000f66:	1a52      	subs	r2, r2, r1
 8000f68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f6c:	e738      	b.n	8000de0 <__udivmoddi4+0xfc>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000f74:	4639      	mov	r1, r7
 8000f76:	e6e6      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f78:	4610      	mov	r0, r2
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x90>
 8000f7c:	4548      	cmp	r0, r9
 8000f7e:	d2a9      	bcs.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f80:	ebb9 0802 	subs.w	r8, r9, r2
 8000f84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	e7a3      	b.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f8c:	4645      	mov	r5, r8
 8000f8e:	e7ea      	b.n	8000f66 <__udivmoddi4+0x282>
 8000f90:	462b      	mov	r3, r5
 8000f92:	e794      	b.n	8000ebe <__udivmoddi4+0x1da>
 8000f94:	4640      	mov	r0, r8
 8000f96:	e7d1      	b.n	8000f3c <__udivmoddi4+0x258>
 8000f98:	46d0      	mov	r8, sl
 8000f9a:	e77b      	b.n	8000e94 <__udivmoddi4+0x1b0>
 8000f9c:	3d02      	subs	r5, #2
 8000f9e:	4462      	add	r2, ip
 8000fa0:	e732      	b.n	8000e08 <__udivmoddi4+0x124>
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	e70a      	b.n	8000dbc <__udivmoddi4+0xd8>
 8000fa6:	4464      	add	r4, ip
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e742      	b.n	8000e32 <__udivmoddi4+0x14e>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fda:	f00a fc19 	bl	800b810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f010 fc63 	bl	80118a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f00f fa29 	bl	8010438 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8000ff4:	08021a3c 	.word	0x08021a3c
  ldr r2, =_sbss
 8000ff8:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 8000ffc:	20002c58 	.word	0x20002c58

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001010:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001014:	f00a fa06 	bl	800b424 <USBD_static_malloc>
 8001018:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	32b0      	adds	r2, #176	; 0xb0
 800102a:	2100      	movs	r1, #0
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8001030:	2302      	movs	r3, #2
 8001032:	e0d4      	b.n	80011de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8001034:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001038:	2100      	movs	r1, #0
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f010 fba2 	bl	8011784 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	32b0      	adds	r2, #176	; 0xb0
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	32b0      	adds	r2, #176	; 0xb0
 800105a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7c1b      	ldrb	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d138      	bne.n	80010de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800106c:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <USBD_CDC_Init+0x1e4>)
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	2202      	movs	r2, #2
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f00a f8b1 	bl	800b1de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800107c:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <USBD_CDC_Init+0x1e4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 020f 	and.w	r2, r3, #15
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3324      	adds	r3, #36	; 0x24
 8001092:	2201      	movs	r2, #1
 8001094:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8001096:	4b55      	ldr	r3, [pc, #340]	; (80011ec <USBD_CDC_Init+0x1e8>)
 8001098:	7819      	ldrb	r1, [r3, #0]
 800109a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109e:	2202      	movs	r2, #2
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f00a f89c 	bl	800b1de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <USBD_CDC_Init+0x1e8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f003 020f 	and.w	r2, r3, #15
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80010be:	2201      	movs	r2, #1
 80010c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <USBD_CDC_Init+0x1ec>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 020f 	and.w	r2, r3, #15
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3326      	adds	r3, #38	; 0x26
 80010d8:	2210      	movs	r2, #16
 80010da:	801a      	strh	r2, [r3, #0]
 80010dc:	e035      	b.n	800114a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80010de:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <USBD_CDC_Init+0x1e4>)
 80010e0:	7819      	ldrb	r1, [r3, #0]
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	2202      	movs	r2, #2
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f00a f879 	bl	800b1de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <USBD_CDC_Init+0x1e4>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 020f 	and.w	r2, r3, #15
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	3324      	adds	r3, #36	; 0x24
 8001102:	2201      	movs	r2, #1
 8001104:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <USBD_CDC_Init+0x1e8>)
 8001108:	7819      	ldrb	r1, [r3, #0]
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	2202      	movs	r2, #2
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f00a f865 	bl	800b1de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <USBD_CDC_Init+0x1e8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f003 020f 	and.w	r2, r3, #15
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800112c:	2201      	movs	r2, #1
 800112e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <USBD_CDC_Init+0x1ec>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f003 020f 	and.w	r2, r3, #15
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3326      	adds	r3, #38	; 0x26
 8001146:	2210      	movs	r2, #16
 8001148:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <USBD_CDC_Init+0x1ec>)
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	2308      	movs	r3, #8
 8001150:	2203      	movs	r2, #3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f00a f843 	bl	800b1de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <USBD_CDC_Init+0x1ec>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f003 020f 	and.w	r2, r3, #15
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	3324      	adds	r3, #36	; 0x24
 800116e:	2201      	movs	r2, #1
 8001170:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	33b0      	adds	r3, #176	; 0xb0
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e018      	b.n	80011de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7c1b      	ldrb	r3, [r3, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10a      	bne.n	80011ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <USBD_CDC_Init+0x1e8>)
 80011b6:	7819      	ldrb	r1, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f00a f8fa 	bl	800b3bc <USBD_LL_PrepareReceive>
 80011c8:	e008      	b.n	80011dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <USBD_CDC_Init+0x1e8>)
 80011cc:	7819      	ldrb	r1, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f00a f8f0 	bl	800b3bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000087 	.word	0x20000087
 80011ec:	20000088 	.word	0x20000088
 80011f0:	20000089 	.word	0x20000089

080011f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <USBD_CDC_DeInit+0xf8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f00a f80f 	bl	800b22a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800120c:	4b37      	ldr	r3, [pc, #220]	; (80012ec <USBD_CDC_DeInit+0xf8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 020f 	and.w	r2, r3, #15
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3324      	adds	r3, #36	; 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <USBD_CDC_DeInit+0xfc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f009 fffc 	bl	800b22a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <USBD_CDC_DeInit+0xfc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 020f 	and.w	r2, r3, #15
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <USBD_CDC_DeInit+0x100>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f009 ffe8 	bl	800b22a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <USBD_CDC_DeInit+0x100>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f003 020f 	and.w	r2, r3, #15
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	3324      	adds	r3, #36	; 0x24
 8001270:	2200      	movs	r2, #0
 8001272:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <USBD_CDC_DeInit+0x100>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f003 020f 	and.w	r2, r3, #15
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3326      	adds	r3, #38	; 0x26
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	32b0      	adds	r2, #176	; 0xb0
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01f      	beq.n	80012e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	33b0      	adds	r3, #176	; 0xb0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	32b0      	adds	r2, #176	; 0xb0
 80012be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f8bc 	bl	800b440 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	32b0      	adds	r2, #176	; 0xb0
 80012d2:	2100      	movs	r1, #0
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000087 	.word	0x20000087
 80012f0:	20000088 	.word	0x20000088
 80012f4:	20000089 	.word	0x20000089

080012f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	32b0      	adds	r2, #176	; 0xb0
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	623b      	str	r3, [r7, #32]
  uint16_t len;
  uint8_t ifalt = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hcdc == NULL)
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8001326:	2303      	movs	r3, #3
 8001328:	e0cc      	b.n	80014c4 <USBD_CDC_Setup+0x1cc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001332:	2b00      	cmp	r3, #0
 8001334:	d057      	beq.n	80013e6 <USBD_CDC_Setup+0xee>
 8001336:	2b20      	cmp	r3, #32
 8001338:	f040 80ba 	bne.w	80014b0 <USBD_CDC_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	88db      	ldrh	r3, [r3, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d041      	beq.n	80013c8 <USBD_CDC_Setup+0xd0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da20      	bge.n	8001390 <USBD_CDC_Setup+0x98>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	33b0      	adds	r3, #176	; 0xb0
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8001364:	6a39      	ldr	r1, [r7, #32]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	88d2      	ldrh	r2, [r2, #6]
 800136a:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800136c:	2307      	movs	r3, #7
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	88db      	ldrh	r3, [r3, #6]
 8001374:	827b      	strh	r3, [r7, #18]
 8001376:	8a7a      	ldrh	r2, [r7, #18]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4293      	cmp	r3, r2
 800137c:	bf28      	it	cs
 800137e:	4613      	movcs	r3, r2
 8001380:	823b      	strh	r3, [r7, #16]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	8a3a      	ldrh	r2, [r7, #16]
 8001386:	4619      	mov	r1, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f001 fd99 	bl	8002ec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800138e:	e097      	b.n	80014c0 <USBD_CDC_Setup+0x1c8>
          hcdc->CmdOpCode = req->bRequest;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	785a      	ldrb	r2, [r3, #1]
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	88db      	ldrh	r3, [r3, #6]
 800139e:	83fb      	strh	r3, [r7, #30]
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	8bfa      	ldrh	r2, [r7, #30]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf28      	it	cs
 80013ac:	4613      	movcs	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80013b6:	6a39      	ldr	r1, [r7, #32]
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80013be:	461a      	mov	r2, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f001 fda9 	bl	8002f18 <USBD_CtlPrepareRx>
      break;
 80013c6:	e07b      	b.n	80014c0 <USBD_CDC_Setup+0x1c8>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	33b0      	adds	r3, #176	; 0xb0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	7850      	ldrb	r0, [r2, #1]
 80013de:	2200      	movs	r2, #0
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	4798      	blx	r3
      break;
 80013e4:	e06c      	b.n	80014c0 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	2b0b      	cmp	r3, #11
 80013ec:	d854      	bhi.n	8001498 <USBD_CDC_Setup+0x1a0>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <USBD_CDC_Setup+0xfc>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001425 	.word	0x08001425
 80013f8:	080014a9 	.word	0x080014a9
 80013fc:	08001499 	.word	0x08001499
 8001400:	08001499 	.word	0x08001499
 8001404:	08001499 	.word	0x08001499
 8001408:	08001499 	.word	0x08001499
 800140c:	08001499 	.word	0x08001499
 8001410:	08001499 	.word	0x08001499
 8001414:	08001499 	.word	0x08001499
 8001418:	08001499 	.word	0x08001499
 800141c:	08001451 	.word	0x08001451
 8001420:	0800147d 	.word	0x0800147d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d107      	bne.n	8001440 <USBD_CDC_Setup+0x148>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2202      	movs	r2, #2
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 fd41 	bl	8002ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800143e:	e036      	b.n	80014ae <USBD_CDC_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f001 fccb 	bl	8002dde <USBD_CtlError>
            ret = USBD_FAIL;
 8001448:	2303      	movs	r3, #3
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800144e:	e02e      	b.n	80014ae <USBD_CDC_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d107      	bne.n	800146c <USBD_CDC_Setup+0x174>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800145c:	f107 030f 	add.w	r3, r7, #15
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f001 fd2b 	bl	8002ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800146a:	e020      	b.n	80014ae <USBD_CDC_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f001 fcb5 	bl	8002dde <USBD_CtlError>
            ret = USBD_FAIL;
 8001474:	2303      	movs	r3, #3
 8001476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800147a:	e018      	b.n	80014ae <USBD_CDC_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d011      	beq.n	80014ac <USBD_CDC_Setup+0x1b4>
          {
            USBD_CtlError(pdev, req);
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f001 fca7 	bl	8002dde <USBD_CtlError>
            ret = USBD_FAIL;
 8001490:	2303      	movs	r3, #3
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
          break;
 8001496:	e009      	b.n	80014ac <USBD_CDC_Setup+0x1b4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 fc9f 	bl	8002dde <USBD_CtlError>
          ret = USBD_FAIL;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80014a6:	e002      	b.n	80014ae <USBD_CDC_Setup+0x1b6>
          break;
 80014a8:	bf00      	nop
 80014aa:	e009      	b.n	80014c0 <USBD_CDC_Setup+0x1c8>
          break;
 80014ac:	bf00      	nop
      }
      break;
 80014ae:	e007      	b.n	80014c0 <USBD_CDC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 fc93 	bl	8002dde <USBD_CtlError>
      ret = USBD_FAIL;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014be:	bf00      	nop
  }

  return (uint8_t)ret;
 80014c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80014de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	32b0      	adds	r2, #176	; 0xb0
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e065      	b.n	80015c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	32b0      	adds	r2, #176	; 0xb0
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f003 020f 	and.w	r2, r3, #15
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3318      	adds	r3, #24
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02f      	beq.n	8001580 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 020f 	and.w	r2, r3, #15
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3318      	adds	r3, #24
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f003 010f 	and.w	r1, r3, #15
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	460b      	mov	r3, r1
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4403      	add	r3, r0
 8001548:	3348      	adds	r3, #72	; 0x48
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d112      	bne.n	8001580 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f003 020f 	and.w	r2, r3, #15
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3318      	adds	r3, #24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001572:	78f9      	ldrb	r1, [r7, #3]
 8001574:	2300      	movs	r3, #0
 8001576:	2200      	movs	r2, #0
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f009 fefe 	bl	800b37a <USBD_LL_Transmit>
 800157e:	e01f      	b.n	80015c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2200      	movs	r2, #0
 8001584:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	33b0      	adds	r3, #176	; 0xb0
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	33b0      	adds	r3, #176	; 0xb0
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	32b0      	adds	r2, #176	; 0xb0
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	32b0      	adds	r2, #176	; 0xb0
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e01a      	b.n	8001632 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f009 fefc 	bl	800b3fe <USBD_LL_GetRxDataSize>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	33b0      	adds	r3, #176	; 0xb0
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800162c:	4611      	mov	r1, r2
 800162e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	32b0      	adds	r2, #176	; 0xb0
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001658:	2303      	movs	r3, #3
 800165a:	e025      	b.n	80016a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	33b0      	adds	r3, #176	; 0xb0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01a      	beq.n	80016a6 <USBD_CDC_EP0_RxReady+0x6c>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d015      	beq.n	80016a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	33b0      	adds	r3, #176	; 0xb0
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8001692:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800169a:	b292      	uxth	r2, r2
 800169c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80016b8:	2182      	movs	r1, #130	; 0x82
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80016bc:	f000 fd53 	bl	8002166 <USBD_GetEpDesc>
 80016c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80016c2:	2101      	movs	r1, #1
 80016c4:	4815      	ldr	r0, [pc, #84]	; (800171c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80016c6:	f000 fd4e 	bl	8002166 <USBD_GetEpDesc>
 80016ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80016cc:	2181      	movs	r1, #129	; 0x81
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80016d0:	f000 fd49 	bl	8002166 <USBD_GetEpDesc>
 80016d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2210      	movs	r2, #16
 80016e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f0:	711a      	strb	r2, [r3, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001704:	711a      	strb	r2, [r3, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2243      	movs	r2, #67	; 0x43
 800170e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000044 	.word	0x20000044

08001720 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8001728:	2182      	movs	r1, #130	; 0x82
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800172c:	f000 fd1b 	bl	8002166 <USBD_GetEpDesc>
 8001730:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8001732:	2101      	movs	r1, #1
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8001736:	f000 fd16 	bl	8002166 <USBD_GetEpDesc>
 800173a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800173c:	2181      	movs	r1, #129	; 0x81
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8001740:	f000 fd11 	bl	8002166 <USBD_GetEpDesc>
 8001744:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2210      	movs	r2, #16
 8001750:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2200      	movs	r2, #0
 800175c:	711a      	strb	r2, [r3, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f042 0202 	orr.w	r2, r2, #2
 8001764:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	711a      	strb	r2, [r3, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f042 0202 	orr.w	r2, r2, #2
 8001778:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2243      	movs	r2, #67	; 0x43
 800177e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000044 	.word	0x20000044

08001790 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8001798:	2182      	movs	r1, #130	; 0x82
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800179c:	f000 fce3 	bl	8002166 <USBD_GetEpDesc>
 80017a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80017a2:	2101      	movs	r1, #1
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80017a6:	f000 fcde 	bl	8002166 <USBD_GetEpDesc>
 80017aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80017ac:	2181      	movs	r1, #129	; 0x81
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80017b0:	f000 fcd9 	bl	8002166 <USBD_GetEpDesc>
 80017b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2210      	movs	r2, #16
 80017c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d0:	711a      	strb	r2, [r3, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e4:	711a      	strb	r2, [r3, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2243      	movs	r2, #67	; 0x43
 80017ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000044 	.word	0x20000044

08001800 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	220a      	movs	r2, #10
 800180c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	20000000 	.word	0x20000000

08001820 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8001830:	2303      	movs	r3, #3
 8001832:	e009      	b.n	8001848 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	33b0      	adds	r3, #176	; 0xb0
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	32b0      	adds	r2, #176	; 0xb0
 800186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8001876:	2303      	movs	r3, #3
 8001878:	e008      	b.n	800188c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	32b0      	adds	r2, #176	; 0xb0
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e004      	b.n	80018c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	32b0      	adds	r2, #176	; 0xb0
 80018e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	32b0      	adds	r2, #176	; 0xb0
 80018fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8001902:	2303      	movs	r3, #3
 8001904:	e025      	b.n	8001952 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800190c:	2b00      	cmp	r3, #0
 800190e:	d11f      	bne.n	8001950 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2201      	movs	r2, #1
 8001914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <USBD_CDC_TransmitPacket+0x88>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4403      	add	r3, r0
 8001932:	3318      	adds	r3, #24
 8001934:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <USBD_CDC_TransmitPacket+0x88>)
 8001938:	7819      	ldrb	r1, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f009 fd17 	bl	800b37a <USBD_LL_Transmit>

    ret = USBD_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000087 	.word	0x20000087

08001960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	32b0      	adds	r2, #176	; 0xb0
 8001972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001976:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	32b0      	adds	r2, #176	; 0xb0
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800198a:	2303      	movs	r3, #3
 800198c:	e018      	b.n	80019c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7c1b      	ldrb	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <USBD_CDC_ReceivePacket+0x68>)
 8001998:	7819      	ldrb	r1, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f009 fd09 	bl	800b3bc <USBD_LL_PrepareReceive>
 80019aa:	e008      	b.n	80019be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <USBD_CDC_ReceivePacket+0x68>)
 80019ae:	7819      	ldrb	r1, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f009 fcff 	bl	800b3bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000088 	.word	0x20000088

080019cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e01f      	b.n	8001a24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f009 fb79 	bl	800b110 <USBD_LL_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e025      	b.n	8001a90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	32ae      	adds	r2, #174	; 0xae
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00f      	beq.n	8001a80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	32ae      	adds	r2, #174	; 0xae
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	f107 020e 	add.w	r2, r7, #14
 8001a74:	4610      	mov	r0, r2
 8001a76:	4798      	blx	r3
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f009 fb81 	bl	800b1a8 <USBD_LL_Start>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8001ab8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	4611      	mov	r1, r2
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8001b24:	2303      	movs	r3, #3
 8001b26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f910 	bl	8002d6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d01a      	beq.n	8001ba4 <USBD_LL_SetupStage+0x72>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d822      	bhi.n	8001bb8 <USBD_LL_SetupStage+0x86>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <USBD_LL_SetupStage+0x4a>
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d00a      	beq.n	8001b90 <USBD_LL_SetupStage+0x5e>
 8001b7a:	e01d      	b.n	8001bb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fb63 	bl	8002250 <USBD_StdDevReq>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b8e:	e020      	b.n	8001bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fbcb 	bl	8002334 <USBD_StdItfReq>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba2:	e016      	b.n	8001bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001baa:	4619      	mov	r1, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fc2d 	bl	800240c <USBD_StdEPReq>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb6:	e00c      	b.n	8001bd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8001bbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f009 fb4e 	bl	800b268 <USBD_LL_StallEP>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	bf00      	nop
  }

  return ret;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	77fb      	strb	r3, [r7, #31]
  uint8_t idx;

  if (epnum == 0U)
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d172      	bne.n	8001cda <USBD_LL_DataOutStage+0xfe>
  {
    pep = &pdev->ep_out[0];
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	f040 809c 	bne.w	8001d40 <USBD_LL_DataOutStage+0x164>
    {
      if (pep->rem_length > pep->maxpacket)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d917      	bls.n	8001c44 <USBD_LL_DataOutStage+0x68>
      {
        pep->rem_length -= pep->maxpacket;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	1ad2      	subs	r2, r2, r3
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	bf28      	it	cs
 8001c36:	4613      	movcs	r3, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f001 f988 	bl	8002f52 <USBD_CtlContinueRx>
 8001c42:	e07d      	b.n	8001d40 <USBD_LL_DataOutStage+0x164>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d014      	beq.n	8001c7c <USBD_LL_DataOutStage+0xa0>
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d81d      	bhi.n	8001c92 <USBD_LL_DataOutStage+0xb6>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <USBD_LL_DataOutStage+0x84>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d003      	beq.n	8001c66 <USBD_LL_DataOutStage+0x8a>
 8001c5e:	e018      	b.n	8001c92 <USBD_LL_DataOutStage+0xb6>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	77bb      	strb	r3, [r7, #30]
            break;
 8001c64:	e018      	b.n	8001c98 <USBD_LL_DataOutStage+0xbc>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fa5e 	bl	8002132 <USBD_CoreFindIF>
 8001c76:	4603      	mov	r3, r0
 8001c78:	77bb      	strb	r3, [r7, #30]
            break;
 8001c7a:	e00d      	b.n	8001c98 <USBD_LL_DataOutStage+0xbc>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa60 	bl	800214c <USBD_CoreFindEP>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	77bb      	strb	r3, [r7, #30]
            break;
 8001c90:	e002      	b.n	8001c98 <USBD_LL_DataOutStage+0xbc>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	77bb      	strb	r3, [r7, #30]
            break;
 8001c96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8001c98:	7fbb      	ldrb	r3, [r7, #30]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <USBD_LL_DataOutStage+0xf6>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d113      	bne.n	8001cd2 <USBD_LL_DataOutStage+0xf6>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8001caa:	7fba      	ldrb	r2, [r7, #30]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	32ae      	adds	r2, #174	; 0xae
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <USBD_LL_DataOutStage+0xf6>
            {
              pdev->classId = idx;
 8001cba:	7fba      	ldrb	r2, [r7, #30]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8001cc2:	7fba      	ldrb	r2, [r7, #30]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	32ae      	adds	r2, #174	; 0xae
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f001 f94e 	bl	8002f74 <USBD_CtlSendStatus>
 8001cd8:	e032      	b.n	8001d40 <USBD_LL_DataOutStage+0x164>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fa31 	bl	800214c <USBD_CoreFindEP>
 8001cea:	4603      	mov	r3, r0
 8001cec:	77bb      	strb	r3, [r7, #30]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8001cee:	7fbb      	ldrb	r3, [r7, #30]
 8001cf0:	2bff      	cmp	r3, #255	; 0xff
 8001cf2:	d025      	beq.n	8001d40 <USBD_LL_DataOutStage+0x164>
 8001cf4:	7fbb      	ldrb	r3, [r7, #30]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d122      	bne.n	8001d40 <USBD_LL_DataOutStage+0x164>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d117      	bne.n	8001d36 <USBD_LL_DataOutStage+0x15a>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8001d06:	7fba      	ldrb	r2, [r7, #30]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	32ae      	adds	r2, #174	; 0xae
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00f      	beq.n	8001d36 <USBD_LL_DataOutStage+0x15a>
        {
          pdev->classId = idx;
 8001d16:	7fba      	ldrb	r2, [r7, #30]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8001d1e:	7fba      	ldrb	r2, [r7, #30]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	32ae      	adds	r2, #174	; 0xae
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	7afa      	ldrb	r2, [r7, #11]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	4798      	blx	r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	77fb      	strb	r3, [r7, #31]
        }
      }
      if (ret != USBD_OK)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <USBD_LL_DataOutStage+0x164>
      {
        return ret;
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	e000      	b.n	8001d42 <USBD_LL_DataOutStage+0x166>
      }
    }
  }

  return USBD_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	460b      	mov	r3, r1
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d16f      	bne.n	8001e3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3314      	adds	r3, #20
 8001d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d15a      	bne.n	8001e24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d914      	bls.n	8001da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f001 f8b0 	bl	8002ef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001d96:	2300      	movs	r3, #0
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f009 fb0d 	bl	800b3bc <USBD_LL_PrepareReceive>
 8001da2:	e03f      	b.n	8001e24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d11c      	bne.n	8001dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d316      	bcc.n	8001dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d20f      	bcs.n	8001dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f001 f891 	bl	8002ef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f009 faea 	bl	800b3bc <USBD_LL_PrepareReceive>
 8001de8:	e01c      	b.n	8001e24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d10f      	bne.n	8001e16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f009 fa25 	bl	800b268 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 f8bb 	bl	8002f9a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fe3e 	bl	8001ab0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8001e3c:	e032      	b.n	8001ea4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f97f 	bl	800214c <USBD_CoreFindEP>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2bff      	cmp	r3, #255	; 0xff
 8001e56:	d025      	beq.n	8001ea4 <USBD_LL_DataInStage+0x15a>
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d122      	bne.n	8001ea4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d11c      	bne.n	8001ea4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8001e6a:	7dfa      	ldrb	r2, [r7, #23]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	32ae      	adds	r2, #174	; 0xae
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d014      	beq.n	8001ea4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8001e7a:	7dfa      	ldrb	r2, [r7, #23]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8001e82:	7dfa      	ldrb	r2, [r7, #23]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	32ae      	adds	r2, #174	; 0xae
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	7afa      	ldrb	r2, [r7, #11]
 8001e90:	4611      	mov	r1, r2
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	4798      	blx	r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8001ea0:	7dbb      	ldrb	r3, [r7, #22]
 8001ea2:	e000      	b.n	8001ea6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00e      	beq.n	8001f14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6852      	ldr	r2, [r2, #4]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	4611      	mov	r1, r2
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8001f10:	2303      	movs	r3, #3
 8001f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f009 f95f 	bl	800b1de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f30:	2340      	movs	r3, #64	; 0x40
 8001f32:	2200      	movs	r2, #0
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f009 f951 	bl	800b1de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	621a      	str	r2, [r3, #32]

  return ret;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d106      	bne.n	8001fc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d110      	bne.n	8002004 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	32ae      	adds	r2, #174	; 0xae
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800202c:	2303      	movs	r3, #3
 800202e:	e01c      	b.n	800206a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d115      	bne.n	8002068 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	32ae      	adds	r2, #174	; 0xae
 8002046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	32ae      	adds	r2, #174	; 0xae
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4611      	mov	r1, r2
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	32ae      	adds	r2, #174	; 0xae
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8002090:	2303      	movs	r3, #3
 8002092:	e01c      	b.n	80020ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d115      	bne.n	80020cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	32ae      	adds	r2, #174	; 0xae
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	32ae      	adds	r2, #174	; 0xae
 80020be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	4611      	mov	r1, r2
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00e      	beq.n	8002128 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6852      	ldr	r2, [r2, #4]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8002124:	2303      	movs	r3, #3
 8002126:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800213e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8002158:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	429a      	cmp	r2, r3
 800218c:	d920      	bls.n	80021d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8002196:	e013      	b.n	80021c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8002198:	f107 030a 	add.w	r3, r7, #10
 800219c:	4619      	mov	r1, r3
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f000 f81b 	bl	80021da <USBD_GetNextDesc>
 80021a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d108      	bne.n	80021c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	789b      	ldrb	r3, [r3, #2]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d008      	beq.n	80021ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	885b      	ldrh	r3, [r3, #2]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8e5      	bhi.n	8002198 <USBD_GetEpDesc+0x32>
 80021cc:	e000      	b.n	80021d0 <USBD_GetEpDesc+0x6a>
          break;
 80021ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80021d0:	693b      	ldr	r3, [r7, #16]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8002232:	8a3b      	ldrh	r3, [r7, #16]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b21a      	sxth	r2, r3
 8002238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8002242:	89fb      	ldrh	r3, [r7, #14]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d005      	beq.n	8002276 <USBD_StdDevReq+0x26>
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d857      	bhi.n	800231e <USBD_StdDevReq+0xce>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00f      	beq.n	8002292 <USBD_StdDevReq+0x42>
 8002272:	2b20      	cmp	r3, #32
 8002274:	d153      	bne.n	800231e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	32ae      	adds	r2, #174	; 0xae
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e04a      	b.n	8002328 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b09      	cmp	r3, #9
 8002298:	d83b      	bhi.n	8002312 <USBD_StdDevReq+0xc2>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <USBD_StdDevReq+0x50>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	08002309 	.word	0x08002309
 80022a8:	08002313 	.word	0x08002313
 80022ac:	080022ff 	.word	0x080022ff
 80022b0:	08002313 	.word	0x08002313
 80022b4:	080022d3 	.word	0x080022d3
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	08002313 	.word	0x08002313
 80022c0:	080022eb 	.word	0x080022eb
 80022c4:	080022dd 	.word	0x080022dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa3c 	bl	8002748 <USBD_GetDescriptor>
          break;
 80022d0:	e024      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fba5 	bl	8002a24 <USBD_SetAddress>
          break;
 80022da:	e01f      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fbe4 	bl	8002aac <USBD_SetConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
          break;
 80022e8:	e018      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fc87 	bl	8002c00 <USBD_GetConfig>
          break;
 80022f2:	e013      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fcb8 	bl	8002c6c <USBD_GetStatus>
          break;
 80022fc:	e00e      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fce7 	bl	8002cd4 <USBD_SetFeature>
          break;
 8002306:	e009      	b.n	800231c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fd0b 	bl	8002d26 <USBD_ClrFeature>
          break;
 8002310:	e004      	b.n	800231c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fd62 	bl	8002dde <USBD_CtlError>
          break;
 800231a:	bf00      	nop
      }
      break;
 800231c:	e004      	b.n	8002328 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fd5c 	bl	8002dde <USBD_CtlError>
      break;
 8002326:	bf00      	nop
  }

  return ret;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop

08002334 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d005      	beq.n	800235a <USBD_StdItfReq+0x26>
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d852      	bhi.n	80023f8 <USBD_StdItfReq+0xc4>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <USBD_StdItfReq+0x26>
 8002356:	2b20      	cmp	r3, #32
 8002358:	d14e      	bne.n	80023f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	2b02      	cmp	r3, #2
 8002366:	d840      	bhi.n	80023ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	889b      	ldrh	r3, [r3, #4]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d836      	bhi.n	80023e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fed9 	bl	8002132 <USBD_CoreFindIF>
 8002380:	4603      	mov	r3, r0
 8002382:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8002384:	7bbb      	ldrb	r3, [r7, #14]
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d01d      	beq.n	80023c6 <USBD_StdItfReq+0x92>
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11a      	bne.n	80023c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8002390:	7bba      	ldrb	r2, [r7, #14]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	32ae      	adds	r2, #174	; 0xae
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00f      	beq.n	80023c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80023a0:	7bba      	ldrb	r2, [r7, #14]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80023a8:	7bba      	ldrb	r2, [r7, #14]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	32ae      	adds	r2, #174	; 0xae
 80023ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80023be:	e004      	b.n	80023ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80023c0:	2303      	movs	r3, #3
 80023c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80023c4:	e001      	b.n	80023ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80023c6:	2303      	movs	r3, #3
 80023c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	88db      	ldrh	r3, [r3, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <USBD_StdItfReq+0xc0>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fdcb 	bl	8002f74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80023de:	e009      	b.n	80023f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fcfb 	bl	8002dde <USBD_CtlError>
          break;
 80023e8:	e004      	b.n	80023f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fcf6 	bl	8002dde <USBD_CtlError>
          break;
 80023f2:	e000      	b.n	80023f6 <USBD_StdItfReq+0xc2>
          break;
 80023f4:	bf00      	nop
      }
      break;
 80023f6:	e004      	b.n	8002402 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fcef 	bl	8002dde <USBD_CtlError>
      break;
 8002400:	bf00      	nop
  }

  return ret;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	889b      	ldrh	r3, [r3, #4]
 800241e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d007      	beq.n	800243c <USBD_StdEPReq+0x30>
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	f200 817f 	bhi.w	8002730 <USBD_StdEPReq+0x324>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02a      	beq.n	800248c <USBD_StdEPReq+0x80>
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 817a 	bne.w	8002730 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fe83 	bl	800214c <USBD_CoreFindEP>
 8002446:	4603      	mov	r3, r0
 8002448:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800244a:	7b7b      	ldrb	r3, [r7, #13]
 800244c:	2bff      	cmp	r3, #255	; 0xff
 800244e:	f000 8174 	beq.w	800273a <USBD_StdEPReq+0x32e>
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8170 	bne.w	800273a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800245a:	7b7a      	ldrb	r2, [r7, #13]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8002462:	7b7a      	ldrb	r2, [r7, #13]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	32ae      	adds	r2, #174	; 0xae
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8163 	beq.w	800273a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8002474:	7b7a      	ldrb	r2, [r7, #13]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	32ae      	adds	r2, #174	; 0xae
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800248a:	e156      	b.n	800273a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d008      	beq.n	80024a6 <USBD_StdEPReq+0x9a>
 8002494:	2b03      	cmp	r3, #3
 8002496:	f300 8145 	bgt.w	8002724 <USBD_StdEPReq+0x318>
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 809b 	beq.w	80025d6 <USBD_StdEPReq+0x1ca>
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d03c      	beq.n	800251e <USBD_StdEPReq+0x112>
 80024a4:	e13e      	b.n	8002724 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d002      	beq.n	80024b8 <USBD_StdEPReq+0xac>
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d016      	beq.n	80024e4 <USBD_StdEPReq+0xd8>
 80024b6:	e02c      	b.n	8002512 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <USBD_StdEPReq+0xce>
 80024be:	7bbb      	ldrb	r3, [r7, #14]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d00a      	beq.n	80024da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	4619      	mov	r1, r3
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f008 fecd 	bl	800b268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f008 fec9 	bl	800b268 <USBD_LL_StallEP>
 80024d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80024d8:	e020      	b.n	800251c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fc7e 	bl	8002dde <USBD_CtlError>
              break;
 80024e2:	e01b      	b.n	800251c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	885b      	ldrh	r3, [r3, #2]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10e      	bne.n	800250a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <USBD_StdEPReq+0xfe>
 80024f2:	7bbb      	ldrb	r3, [r7, #14]
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d008      	beq.n	800250a <USBD_StdEPReq+0xfe>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	88db      	ldrh	r3, [r3, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f008 feaf 	bl	800b268 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fd32 	bl	8002f74 <USBD_CtlSendStatus>

              break;
 8002510:	e004      	b.n	800251c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fc62 	bl	8002dde <USBD_CtlError>
              break;
 800251a:	bf00      	nop
          }
          break;
 800251c:	e107      	b.n	800272e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d002      	beq.n	8002530 <USBD_StdEPReq+0x124>
 800252a:	2b03      	cmp	r3, #3
 800252c:	d016      	beq.n	800255c <USBD_StdEPReq+0x150>
 800252e:	e04b      	b.n	80025c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002530:	7bbb      	ldrb	r3, [r7, #14]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <USBD_StdEPReq+0x146>
 8002536:	7bbb      	ldrb	r3, [r7, #14]
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d00a      	beq.n	8002552 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f008 fe91 	bl	800b268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f008 fe8d 	bl	800b268 <USBD_LL_StallEP>
 800254e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8002550:	e040      	b.n	80025d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fc42 	bl	8002dde <USBD_CtlError>
              break;
 800255a:	e03b      	b.n	80025d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d136      	bne.n	80025d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f008 fe97 	bl	800b2a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fcfb 	bl	8002f74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800257e:	7bbb      	ldrb	r3, [r7, #14]
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fde2 	bl	800214c <USBD_CoreFindEP>
 8002588:	4603      	mov	r3, r0
 800258a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800258c:	7b7b      	ldrb	r3, [r7, #13]
 800258e:	2bff      	cmp	r3, #255	; 0xff
 8002590:	d01f      	beq.n	80025d2 <USBD_StdEPReq+0x1c6>
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11c      	bne.n	80025d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8002598:	7b7a      	ldrb	r2, [r7, #13]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80025a0:	7b7a      	ldrb	r2, [r7, #13]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	32ae      	adds	r2, #174	; 0xae
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80025b0:	7b7a      	ldrb	r2, [r7, #13]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	32ae      	adds	r2, #174	; 0xae
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80025c6:	e004      	b.n	80025d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fc07 	bl	8002dde <USBD_CtlError>
              break;
 80025d0:	e000      	b.n	80025d4 <USBD_StdEPReq+0x1c8>
              break;
 80025d2:	bf00      	nop
          }
          break;
 80025d4:	e0ab      	b.n	800272e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d002      	beq.n	80025e8 <USBD_StdEPReq+0x1dc>
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d032      	beq.n	800264c <USBD_StdEPReq+0x240>
 80025e6:	e097      	b.n	8002718 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <USBD_StdEPReq+0x1f2>
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d004      	beq.n	80025fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fbf1 	bl	8002dde <USBD_CtlError>
                break;
 80025fc:	e091      	b.n	8002722 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80025fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da0b      	bge.n	800261e <USBD_StdEPReq+0x212>
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	3310      	adds	r3, #16
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	e00b      	b.n	8002636 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2202      	movs	r2, #2
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc3b 	bl	8002ec0 <USBD_CtlSendData>
              break;
 800264a:	e06a      	b.n	8002722 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800264c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002650:	2b00      	cmp	r3, #0
 8002652:	da11      	bge.n	8002678 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3324      	adds	r3, #36	; 0x24
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d117      	bne.n	800269e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fbb4 	bl	8002dde <USBD_CtlError>
                  break;
 8002676:	e054      	b.n	8002722 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fba1 	bl	8002dde <USBD_CtlError>
                  break;
 800269c:	e041      	b.n	8002722 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800269e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da0b      	bge.n	80026be <USBD_StdEPReq+0x2b2>
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3310      	adds	r3, #16
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	e00b      	b.n	80026d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80026be:	7bbb      	ldrb	r3, [r7, #14]
 80026c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80026d8:	7bbb      	ldrb	r3, [r7, #14]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <USBD_StdEPReq+0x2d8>
 80026de:	7bbb      	ldrb	r3, [r7, #14]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d103      	bne.n	80026ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00e      	b.n	800270a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f008 fdf7 	bl	800b2e4 <USBD_LL_IsStallEP>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e002      	b.n	800270a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2202      	movs	r2, #2
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fbd5 	bl	8002ec0 <USBD_CtlSendData>
              break;
 8002716:	e004      	b.n	8002722 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fb5f 	bl	8002dde <USBD_CtlError>
              break;
 8002720:	bf00      	nop
          }
          break;
 8002722:	e004      	b.n	800272e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb59 	bl	8002dde <USBD_CtlError>
          break;
 800272c:	bf00      	nop
      }
      break;
 800272e:	e005      	b.n	800273c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8002730:	6839      	ldr	r1, [r7, #0]
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb53 	bl	8002dde <USBD_CtlError>
      break;
 8002738:	e000      	b.n	800273c <USBD_StdEPReq+0x330>
      break;
 800273a:	bf00      	nop
  }

  return ret;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	81bb      	strh	r3, [r7, #12]
  uint8_t *pbuf = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	885b      	ldrh	r3, [r3, #2]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	2b06      	cmp	r3, #6
 800276a:	f200 8128 	bhi.w	80029be <USBD_GetDescriptor+0x276>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <USBD_GetDescriptor+0x2c>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002791 	.word	0x08002791
 8002778:	080027a9 	.word	0x080027a9
 800277c:	080027e9 	.word	0x080027e9
 8002780:	080029bf 	.word	0x080029bf
 8002784:	080029bf 	.word	0x080029bf
 8002788:	0800295f 	.word	0x0800295f
 800278c:	0800298b 	.word	0x0800298b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	7c12      	ldrb	r2, [r2, #16]
 800279c:	f107 010c 	add.w	r1, r7, #12
 80027a0:	4610      	mov	r0, r2
 80027a2:	4798      	blx	r3
 80027a4:	6178      	str	r0, [r7, #20]
      break;
 80027a6:	e112      	b.n	80029ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7c1b      	ldrb	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	4610      	mov	r0, r2
 80027be:	4798      	blx	r3
 80027c0:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80027ca:	e100      	b.n	80029ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f107 020c 	add.w	r2, r7, #12
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
 80027dc:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]
      break;
 80027e6:	e0f2      	b.n	80029ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	885b      	ldrh	r3, [r3, #2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	f200 80ac 	bhi.w	800294c <USBD_GetDescriptor+0x204>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <USBD_GetDescriptor+0xb4>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002815 	.word	0x08002815
 8002800:	08002849 	.word	0x08002849
 8002804:	0800287d 	.word	0x0800287d
 8002808:	080028b1 	.word	0x080028b1
 800280c:	080028e5 	.word	0x080028e5
 8002810:	08002919 	.word	0x08002919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	7c12      	ldrb	r2, [r2, #16]
 800282c:	f107 010c 	add.w	r1, r7, #12
 8002830:	4610      	mov	r0, r2
 8002832:	4798      	blx	r3
 8002834:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8002836:	e091      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 facf 	bl	8002dde <USBD_CtlError>
            err++;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	3301      	adds	r3, #1
 8002844:	74fb      	strb	r3, [r7, #19]
          break;
 8002846:	e089      	b.n	800295c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	7c12      	ldrb	r2, [r2, #16]
 8002860:	f107 010c 	add.w	r1, r7, #12
 8002864:	4610      	mov	r0, r2
 8002866:	4798      	blx	r3
 8002868:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800286a:	e077      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fab5 	bl	8002dde <USBD_CtlError>
            err++;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	3301      	adds	r3, #1
 8002878:	74fb      	strb	r3, [r7, #19]
          break;
 800287a:	e06f      	b.n	800295c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	7c12      	ldrb	r2, [r2, #16]
 8002894:	f107 010c 	add.w	r1, r7, #12
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
 800289c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800289e:	e05d      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa9b 	bl	8002dde <USBD_CtlError>
            err++;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	3301      	adds	r3, #1
 80028ac:	74fb      	strb	r3, [r7, #19]
          break;
 80028ae:	e055      	b.n	800295c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	7c12      	ldrb	r2, [r2, #16]
 80028c8:	f107 010c 	add.w	r1, r7, #12
 80028cc:	4610      	mov	r0, r2
 80028ce:	4798      	blx	r3
 80028d0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80028d2:	e043      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa81 	bl	8002dde <USBD_CtlError>
            err++;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	3301      	adds	r3, #1
 80028e0:	74fb      	strb	r3, [r7, #19]
          break;
 80028e2:	e03b      	b.n	800295c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	7c12      	ldrb	r2, [r2, #16]
 80028fc:	f107 010c 	add.w	r1, r7, #12
 8002900:	4610      	mov	r0, r2
 8002902:	4798      	blx	r3
 8002904:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8002906:	e029      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa67 	bl	8002dde <USBD_CtlError>
            err++;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	3301      	adds	r3, #1
 8002914:	74fb      	strb	r3, [r7, #19]
          break;
 8002916:	e021      	b.n	800295c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	7c12      	ldrb	r2, [r2, #16]
 8002930:	f107 010c 	add.w	r1, r7, #12
 8002934:	4610      	mov	r0, r2
 8002936:	4798      	blx	r3
 8002938:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800293a:	e00f      	b.n	800295c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa4d 	bl	8002dde <USBD_CtlError>
            err++;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	3301      	adds	r3, #1
 8002948:	74fb      	strb	r3, [r7, #19]
          break;
 800294a:	e007      	b.n	800295c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa45 	bl	8002dde <USBD_CtlError>
          err++;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	3301      	adds	r3, #1
 8002958:	74fb      	strb	r3, [r7, #19]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800295a:	bf00      	nop
      }
      break;
 800295c:	e037      	b.n	80029ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7c1b      	ldrb	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	f107 020c 	add.w	r2, r7, #12
 8002972:	4610      	mov	r0, r2
 8002974:	4798      	blx	r3
 8002976:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8002978:	e029      	b.n	80029ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fa2e 	bl	8002dde <USBD_CtlError>
        err++;
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	3301      	adds	r3, #1
 8002986:	74fb      	strb	r3, [r7, #19]
      break;
 8002988:	e021      	b.n	80029ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7c1b      	ldrb	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f107 020c 	add.w	r2, r7, #12
 800299e:	4610      	mov	r0, r2
 80029a0:	4798      	blx	r3
 80029a2:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	2207      	movs	r2, #7
 80029aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80029ac:	e00f      	b.n	80029ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa14 	bl	8002dde <USBD_CtlError>
        err++;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	3301      	adds	r3, #1
 80029ba:	74fb      	strb	r3, [r7, #19]
      break;
 80029bc:	e007      	b.n	80029ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa0c 	bl	8002dde <USBD_CtlError>
      err++;
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	3301      	adds	r3, #1
 80029ca:	74fb      	strb	r3, [r7, #19]
      break;
 80029cc:	bf00      	nop
  }

  if (err != 0U)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d123      	bne.n	8002a1c <USBD_GetDescriptor+0x2d4>
  {
    return;
  }

  if (req->wLength != 0U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	88db      	ldrh	r3, [r3, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01b      	beq.n	8002a14 <USBD_GetDescriptor+0x2cc>
  {
    if (len != 0U)
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d013      	beq.n	8002a0a <USBD_GetDescriptor+0x2c2>
    {
      len = MIN(len, req->wLength);
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	823b      	strh	r3, [r7, #16]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	88db      	ldrh	r3, [r3, #6]
 80029ea:	81fb      	strh	r3, [r7, #14]
 80029ec:	89fa      	ldrh	r2, [r7, #14]
 80029ee:	8a3b      	ldrh	r3, [r7, #16]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf28      	it	cs
 80029f4:	4613      	movcs	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	81bb      	strh	r3, [r7, #12]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80029fc:	89bb      	ldrh	r3, [r7, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa5c 	bl	8002ec0 <USBD_CtlSendData>
 8002a08:	e009      	b.n	8002a1e <USBD_GetDescriptor+0x2d6>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f9e6 	bl	8002dde <USBD_CtlError>
 8002a12:	e004      	b.n	8002a1e <USBD_GetDescriptor+0x2d6>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 faad 	bl	8002f74 <USBD_CtlSendStatus>
 8002a1a:	e000      	b.n	8002a1e <USBD_GetDescriptor+0x2d6>
    return;
 8002a1c:	bf00      	nop
  }
}
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	889b      	ldrh	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d131      	bne.n	8002a9a <USBD_SetAddress+0x76>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	88db      	ldrh	r3, [r3, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d12d      	bne.n	8002a9a <USBD_SetAddress+0x76>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	885b      	ldrh	r3, [r3, #2]
 8002a42:	2b7f      	cmp	r3, #127	; 0x7f
 8002a44:	d829      	bhi.n	8002a9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	885b      	ldrh	r3, [r3, #2]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d104      	bne.n	8002a68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f9bc 	bl	8002dde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a66:	e01d      	b.n	8002aa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f008 fc61 	bl	800b33c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa7a 	bl	8002f74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a8e:	e009      	b.n	8002aa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a98:	e004      	b.n	8002aa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f99e 	bl	8002dde <USBD_CtlError>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	885b      	ldrh	r3, [r3, #2]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <USBD_SetConfig+0x150>)
 8002ac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <USBD_SetConfig+0x150>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d905      	bls.n	8002ad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f985 	bl	8002dde <USBD_CtlError>
    return USBD_FAIL;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e08c      	b.n	8002bf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d002      	beq.n	8002aea <USBD_SetConfig+0x3e>
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d029      	beq.n	8002b3c <USBD_SetConfig+0x90>
 8002ae8:	e075      	b.n	8002bd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8002aea:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <USBD_SetConfig+0x150>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d020      	beq.n	8002b34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <USBD_SetConfig+0x150>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <USBD_SetConfig+0x150>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe ffdf 	bl	8001ac6 <USBD_SetClassConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f962 	bl	8002dde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8002b22:	e065      	b.n	8002bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa25 	bl	8002f74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8002b32:	e05d      	b.n	8002bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fa1d 	bl	8002f74 <USBD_CtlSendStatus>
      break;
 8002b3a:	e059      	b.n	8002bf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fe ffce 	bl	8001afe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa06 	bl	8002f74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8002b68:	e042      	b.n	8002bf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d02a      	beq.n	8002bce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7fe ffbc 	bl	8001afe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <USBD_SetConfig+0x150>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe ff95 	bl	8001ac6 <USBD_SetClassConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00f      	beq.n	8002bc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f918 	bl	8002dde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe ffa1 	bl	8001afe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8002bc4:	e014      	b.n	8002bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9d4 	bl	8002f74 <USBD_CtlSendStatus>
      break;
 8002bcc:	e010      	b.n	8002bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9d0 	bl	8002f74 <USBD_CtlSendStatus>
      break;
 8002bd4:	e00c      	b.n	8002bf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f900 	bl	8002dde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <USBD_SetConfig+0x150>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe ff8a 	bl	8001afe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
      break;
 8002bee:	bf00      	nop
  }

  return ret;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200003dc 	.word	0x200003dc

08002c00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	88db      	ldrh	r3, [r3, #6]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d004      	beq.n	8002c1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f8e2 	bl	8002dde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8002c1a:	e023      	b.n	8002c64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	dc02      	bgt.n	8002c2e <USBD_GetConfig+0x2e>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	dc03      	bgt.n	8002c34 <USBD_GetConfig+0x34>
 8002c2c:	e015      	b.n	8002c5a <USBD_GetConfig+0x5a>
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d00b      	beq.n	8002c4a <USBD_GetConfig+0x4a>
 8002c32:	e012      	b.n	8002c5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f93c 	bl	8002ec0 <USBD_CtlSendData>
        break;
 8002c48:	e00c      	b.n	8002c64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f934 	bl	8002ec0 <USBD_CtlSendData>
        break;
 8002c58:	e004      	b.n	8002c64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8be 	bl	8002dde <USBD_CtlError>
        break;
 8002c62:	bf00      	nop
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d81e      	bhi.n	8002cc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	88db      	ldrh	r3, [r3, #6]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d004      	beq.n	8002c96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8a5 	bl	8002dde <USBD_CtlError>
        break;
 8002c94:	e01a      	b.n	8002ccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f900 	bl	8002ec0 <USBD_CtlSendData>
      break;
 8002cc0:	e004      	b.n	8002ccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f88a 	bl	8002dde <USBD_CtlError>
      break;
 8002cca:	bf00      	nop
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	885b      	ldrh	r3, [r3, #2]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f940 	bl	8002f74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8002cf4:	e013      	b.n	8002d1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	885b      	ldrh	r3, [r3, #2]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d10b      	bne.n	8002d16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f930 	bl	8002f74 <USBD_CtlSendStatus>
}
 8002d14:	e003      	b.n	8002d1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f860 	bl	8002dde <USBD_CtlError>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d80b      	bhi.n	8002d56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	885b      	ldrh	r3, [r3, #2]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10c      	bne.n	8002d60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f910 	bl	8002f74 <USBD_CtlSendStatus>
      }
      break;
 8002d54:	e004      	b.n	8002d60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f840 	bl	8002dde <USBD_CtlError>
      break;
 8002d5e:	e000      	b.n	8002d62 <USBD_ClrFeature+0x3c>
      break;
 8002d60:	bf00      	nop
  }
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fa3d 	bl	8002214 <SWAPBYTE>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fa30 	bl	8002214 <SWAPBYTE>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fa23 	bl	8002214 <SWAPBYTE>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	80da      	strh	r2, [r3, #6]
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f008 fa3c 	bl	800b268 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8002df0:	2100      	movs	r1, #0
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f008 fa38 	bl	800b268 <USBD_LL_StallEP>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8002e1a:	6938      	ldr	r0, [r7, #16]
 8002e1c:	f000 f836 	bl	8002e8c <USBD_GetLen>
 8002e20:	4603      	mov	r3, r0
 8002e22:	3301      	adds	r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	701a      	strb	r2, [r3, #0]
  idx++;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4413      	add	r3, r2
 8002e46:	2203      	movs	r2, #3
 8002e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8002e50:	e013      	b.n	8002e7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4413      	add	r3, r2
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3301      	adds	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
    idx++;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	3301      	adds	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    idx++;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	3301      	adds	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e7      	bne.n	8002e52 <USBD_GetString+0x52>
 8002e82:	e000      	b.n	8002e86 <USBD_GetString+0x86>
    return;
 8002e84:	bf00      	nop
  }
}
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8002e9c:	e005      	b.n	8002eaa <USBD_GetLen+0x1e>
  {
    len++;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f5      	bne.n	8002e9e <USBD_GetLen+0x12>
  }

  return len;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f008 fa47 	bl	800b37a <USBD_LL_Transmit>

  return USBD_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	2100      	movs	r1, #0
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f008 fa36 	bl	800b37a <USBD_LL_Transmit>

  return USBD_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	2100      	movs	r1, #0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f008 fa3a 	bl	800b3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	2100      	movs	r1, #0
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f008 fa29 	bl	800b3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002f84:	2300      	movs	r3, #0
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f008 f9f5 	bl	800b37a <USBD_LL_Transmit>

  return USBD_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002faa:	2300      	movs	r3, #0
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f008 fa03 	bl	800b3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_Init+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_Init+0x40>)
 8002fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_Init+0x40>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_Init+0x40>)
 8002fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_Init+0x40>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_Init+0x40>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f000 f94f 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fee:	200f      	movs	r0, #15
 8002ff0:	f000 f808 	bl	8003004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff4:	f008 faa4 	bl	800b540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00

08003004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_InitTick+0x54>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_InitTick+0x58>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	4619      	mov	r1, r3
 8003016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301a:	fbb3 f3f1 	udiv	r3, r3, r1
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f967 	bl	80032f6 <HAL_SYSTICK_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00e      	b.n	8003050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d80a      	bhi.n	800304e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003038:	2200      	movs	r2, #0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f000 f92f 	bl	80032a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <HAL_InitTick+0x5c>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000104 	.word	0x20000104
 800305c:	20000090 	.word	0x20000090
 8003060:	2000008c 	.word	0x2000008c

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000090 	.word	0x20000090
 8003088:	200003e0 	.word	0x200003e0

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200003e0 	.word	0x200003e0

080030a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff ffee 	bl	800308c <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d005      	beq.n	80030ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_Delay+0x44>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ca:	bf00      	nop
 80030cc:	f7ff ffde 	bl	800308c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d8f7      	bhi.n	80030cc <HAL_Delay+0x28>
  {
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000090 	.word	0x20000090

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800331c:	f7ff feb6 	bl	800308c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e099      	b.n	8003460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800334c:	e00f      	b.n	800336e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800334e:	f7ff fe9d 	bl	800308c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b05      	cmp	r3, #5
 800335a:	d908      	bls.n	800336e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e078      	b.n	8003460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e8      	bne.n	800334e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_DMA_Init+0x158>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4313      	orrs	r3, r2
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d117      	bne.n	8003432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb01 	bl	8003a1c <DMA_CheckFifoParam>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2240      	movs	r2, #64	; 0x40
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800342e:	2301      	movs	r3, #1
 8003430:	e016      	b.n	8003460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fab8 	bl	80039b0 <DMA_CalcBaseAndBitshift>
 8003440:	4603      	mov	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	f010803f 	.word	0xf010803f

0800346c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Start_IT+0x26>
 800348e:	2302      	movs	r3, #2
 8003490:	e040      	b.n	8003514 <HAL_DMA_Start_IT+0xa8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d12f      	bne.n	8003506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa4a 	bl	8003954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0216 	orr.w	r2, r2, #22
 80034da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e005      	b.n	8003512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800352a:	f7ff fdaf 	bl	800308c <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d008      	beq.n	800354e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e052      	b.n	80035f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0216 	bic.w	r2, r2, #22
 800355c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_DMA_Abort+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359e:	e013      	b.n	80035c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a0:	f7ff fd74 	bl	800308c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d90c      	bls.n	80035c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2203      	movs	r2, #3
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e015      	b.n	80035f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e4      	bne.n	80035a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	223f      	movs	r2, #63	; 0x3f
 80035dc:	409a      	lsls	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d004      	beq.n	800361a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00c      	b.n	8003634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800364c:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <HAL_DMA_IRQHandler+0x248>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a8e      	ldr	r2, [pc, #568]	; (800388c <HAL_DMA_IRQHandler+0x24c>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2208      	movs	r2, #8
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01a      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	2204      	movs	r2, #4
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2204      	movs	r2, #4
 8003706:	409a      	lsls	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2210      	movs	r2, #16
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d043      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03c      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2210      	movs	r2, #16
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e01f      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	e016      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0208 	bic.w	r2, r2, #8
 800379e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2220      	movs	r2, #32
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808f 	beq.w	80038e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8087 	beq.w	80038e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2220      	movs	r2, #32
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d136      	bne.n	8003858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0216 	bic.w	r2, r2, #22
 80037f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <HAL_DMA_IRQHandler+0x1da>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	223f      	movs	r2, #63	; 0x3f
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d07e      	beq.n	800394c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
        }
        return;
 8003856:	e079      	b.n	800394c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01d      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10d      	bne.n	8003890 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	2b00      	cmp	r3, #0
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e02c      	b.n	80038e0 <HAL_DMA_IRQHandler+0x2a0>
 8003886:	bf00      	nop
 8003888:	20000104 	.word	0x20000104
 800388c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d023      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e01e      	b.n	80038e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10f      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0210 	bic.w	r2, r2, #16
 80038be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d032      	beq.n	800394e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d022      	beq.n	800393a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2205      	movs	r2, #5
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	3301      	adds	r3, #1
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d307      	bcc.n	8003928 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f2      	bne.n	800390c <HAL_DMA_IRQHandler+0x2cc>
 8003926:	e000      	b.n	800392a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003928:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
 800394a:	e000      	b.n	800394e <HAL_DMA_IRQHandler+0x30e>
        return;
 800394c:	bf00      	nop
    }
  }
}
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d108      	bne.n	8003994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003992:	e007      	b.n	80039a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	3b10      	subs	r3, #16
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <DMA_CalcBaseAndBitshift+0x64>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ca:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <DMA_CalcBaseAndBitshift+0x68>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d909      	bls.n	80039f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	659a      	str	r2, [r3, #88]	; 0x58
 80039f0:	e007      	b.n	8003a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	aaaaaaab 	.word	0xaaaaaaab
 8003a18:	08013cf4 	.word	0x08013cf4

08003a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11f      	bne.n	8003a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d856      	bhi.n	8003aea <DMA_CheckFifoParam+0xce>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <DMA_CheckFifoParam+0x28>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a67 	.word	0x08003a67
 8003a4c:	08003a55 	.word	0x08003a55
 8003a50:	08003aeb 	.word	0x08003aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d046      	beq.n	8003aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a64:	e043      	b.n	8003aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6e:	d140      	bne.n	8003af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a74:	e03d      	b.n	8003af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7e:	d121      	bne.n	8003ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d837      	bhi.n	8003af6 <DMA_CheckFifoParam+0xda>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <DMA_CheckFifoParam+0x70>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aa3 	.word	0x08003aa3
 8003a94:	08003a9d 	.word	0x08003a9d
 8003a98:	08003ab5 	.word	0x08003ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e030      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d025      	beq.n	8003afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab2:	e022      	b.n	8003afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003abc:	d11f      	bne.n	8003afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ac2:	e01c      	b.n	8003afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d903      	bls.n	8003ad2 <DMA_CheckFifoParam+0xb6>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d003      	beq.n	8003ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad0:	e018      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad6:	e015      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e00b      	b.n	8003b02 <DMA_CheckFifoParam+0xe6>
      break;
 8003aea:	bf00      	nop
 8003aec:	e00a      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
 8003af0:	e008      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e006      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e004      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e002      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
    }
  } 
  
  return status; 
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b26:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003b28:	7e1b      	ldrb	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_FLASH_Program+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e03b      	b.n	8003baa <HAL_FLASH_Program+0x96>
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b3c:	f000 f870 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d12b      	bne.n	8003ba2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003b50:	783b      	ldrb	r3, [r7, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	68b8      	ldr	r0, [r7, #8]
 8003b56:	f000 f91b 	bl	8003d90 <FLASH_Program_Byte>
 8003b5a:	e016      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003b62:	883b      	ldrh	r3, [r7, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f000 f8ee 	bl	8003d48 <FLASH_Program_HalfWord>
 8003b6c:	e00d      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d105      	bne.n	8003b80 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	f000 f8c3 	bl	8003d04 <FLASH_Program_Word>
 8003b7e:	e004      	b.n	8003b8a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f000 f88b 	bl	8003ca0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b8e:	f000 f847 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_FLASH_Program+0xa4>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_FLASH_Program+0xa4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <HAL_FLASH_Program+0xa0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200003e4 	.word	0x200003e4
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da0b      	bge.n	8003be6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_FLASH_Unlock+0x3c>)
 8003bd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_FLASH_Unlock+0x40>)
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_FLASH_Unlock+0x38>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da01      	bge.n	8003be6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	45670123 	.word	0x45670123
 8003bfc:	cdef89ab 	.word	0xcdef89ab

08003c00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <FLASH_WaitForLastOperation+0x78>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c32:	f7ff fa2b 	bl	800308c <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c38:	e010      	b.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d00c      	beq.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <FLASH_WaitForLastOperation+0x38>
 8003c48:	f7ff fa20 	bl	800308c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d201      	bcs.n	8003c5c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e019      	b.n	8003c90 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e8      	bne.n	8003c3a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <FLASH_WaitForLastOperation+0x7c>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c86:	f000 f8a5 	bl	8003dd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
  
}  
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200003e4 	.word	0x200003e4
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <FLASH_Program_DoubleWord+0x60>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003cd6:	f3bf 8f6f 	isb	sy
}
 8003cda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	000a      	movs	r2, r1
 8003cea:	2300      	movs	r3, #0
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	3104      	adds	r1, #4
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <FLASH_Program_Word+0x40>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40023c00 	.word	0x40023c00

08003d48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <FLASH_Program_HalfWord+0x44>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	801a      	strh	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00

08003d90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <FLASH_Program_Byte+0x40>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	701a      	strb	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003dd8:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f043 0310 	orr.w	r3, r3, #16
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003dee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003df2:	2210      	movs	r2, #16
 8003df4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e10:	2220      	movs	r2, #32
 8003e12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f043 0320 	orr.w	r3, r3, #32
 8003e64:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <FLASH_SetErrorCode+0xa8>)
 8003e66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <FLASH_SetErrorCode+0xa4>)
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	60da      	str	r2, [r3, #12]
  }
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40023c00 	.word	0x40023c00
 8003e7c:	200003e4 	.word	0x200003e4

08003e80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_FLASHEx_Erase+0xd8>)
 8003e94:	7e1b      	ldrb	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_FLASHEx_Erase+0x1e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e058      	b.n	8003f50 <HAL_FLASHEx_Erase+0xd0>
 8003e9e:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <HAL_FLASHEx_Erase+0xd8>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ea8:	f7ff feba 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d148      	bne.n	8003f48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d115      	bne.n	8003ef2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 f844 	bl	8003f60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003edc:	f7ff fea0 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_FLASHEx_Erase+0xdc>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_FLASHEx_Erase+0xdc>)
 8003eea:	f023 0304 	bic.w	r3, r3, #4
 8003eee:	6113      	str	r3, [r2, #16]
 8003ef0:	e028      	b.n	8003f44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	e01c      	b.n	8003f34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	68b8      	ldr	r0, [r7, #8]
 8003f04:	f000 f850 	bl	8003fa8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f0c:	f7ff fe88 	bl	8003c20 <FLASH_WaitForLastOperation>
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_FLASHEx_Erase+0xdc>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_FLASHEx_Erase+0xdc>)
 8003f1a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003f1e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	601a      	str	r2, [r3, #0]
          break;
 8003f2c:	e00a      	b.n	8003f44 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d3da      	bcc.n	8003efa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f44:	f000 f878 	bl	8004038 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_FLASHEx_Erase+0xd8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	761a      	strb	r2, [r3, #24]

  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200003e4 	.word	0x200003e4
 8003f5c:	40023c00 	.word	0x40023c00

08003f60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <FLASH_MassErase+0x44>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6113      	str	r3, [r2, #16]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023c00 	.word	0x40023c00

08003fa8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e010      	b.n	8003fe6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d103      	bne.n	8003fd2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e009      	b.n	8003fe6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d103      	bne.n	8003fe0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e002      	b.n	8003fe6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8003fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	490f      	ldr	r1, [pc, #60]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8004004:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4313      	orrs	r3, r2
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <FLASH_Erase_Sector+0x8c>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	6113      	str	r3, [r2, #16]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40023c00 	.word	0x40023c00

08004038 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004044:	2b00      	cmp	r3, #0
 8004046:	d017      	beq.n	8004078 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800404e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004052:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800405a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0d      	ldr	r2, [pc, #52]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800408a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800408e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <FLASH_FlushCaches+0x88>)
 8004096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <FLASH_FlushCaches+0x88>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <FLASH_FlushCaches+0x88>)
 80040a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <FLASH_FlushCaches+0x88>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <FLASH_FlushCaches+0x88>)
 80040ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b2:	6013      	str	r3, [r2, #0]
  }
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40023c00 	.word	0x40023c00

080040c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e16b      	b.n	80043b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e0:	2201      	movs	r2, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	f040 815a 	bne.w	80043b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d005      	beq.n	8004116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	2b02      	cmp	r3, #2
 8004114:	d130      	bne.n	8004178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800414c:	2201      	movs	r2, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 0201 	and.w	r2, r3, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b03      	cmp	r3, #3
 8004182:	d017      	beq.n	80041b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d123      	bne.n	8004208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	220f      	movs	r2, #15
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	08da      	lsrs	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3208      	adds	r2, #8
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	2203      	movs	r2, #3
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b4 	beq.w	80043b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b60      	ldr	r3, [pc, #384]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a5f      	ldr	r2, [pc, #380]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 8004254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <HAL_GPIO_Init+0x30c>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_GPIO_Init+0x310>)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3302      	adds	r3, #2
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_GPIO_Init+0x314>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02b      	beq.n	80042ea <HAL_GPIO_Init+0x226>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_GPIO_Init+0x318>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x222>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a50      	ldr	r2, [pc, #320]	; (80043e0 <HAL_GPIO_Init+0x31c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x21e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_GPIO_Init+0x320>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x21a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <HAL_GPIO_Init+0x324>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x216>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_GPIO_Init+0x328>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x212>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_GPIO_Init+0x32c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x20e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_GPIO_Init+0x330>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x20a>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00e      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042ce:	2308      	movs	r3, #8
 80042d0:	e00c      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e00a      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e008      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042da:	2304      	movs	r3, #4
 80042dc:	e006      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042de:	2303      	movs	r3, #3
 80042e0:	e004      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e002      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_GPIO_Init+0x228>
 80042ea:	2300      	movs	r3, #0
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	f002 0203 	and.w	r2, r2, #3
 80042f2:	0092      	lsls	r2, r2, #2
 80042f4:	4093      	lsls	r3, r2
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042fc:	4935      	ldr	r1, [pc, #212]	; (80043d4 <HAL_GPIO_Init+0x310>)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_GPIO_Init+0x334>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_GPIO_Init+0x334>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043ac:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_GPIO_Init+0x334>)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	f67f ae90 	bls.w	80040e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40020000 	.word	0x40020000
 80043dc:	40020400 	.word	0x40020400
 80043e0:	40020800 	.word	0x40020800
 80043e4:	40020c00 	.word	0x40020c00
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40021400 	.word	0x40021400
 80043f0:	40021800 	.word	0x40021800
 80043f4:	40021c00 	.word	0x40021c00
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e001      	b.n	800441e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800443c:	787b      	ldrb	r3, [r7, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004448:	e003      	b.n	8004452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800445e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004460:	b08f      	sub	sp, #60	; 0x3c
 8004462:	af0a      	add	r7, sp, #40	; 0x28
 8004464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e10f      	b.n	8004690 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f006 fcfa 	bl	800ae84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2203      	movs	r2, #3
 8004494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f004 fe6b 	bl	800918a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	687e      	ldr	r6, [r7, #4]
 80044bc:	466d      	mov	r5, sp
 80044be:	f106 0410 	add.w	r4, r6, #16
 80044c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80044d2:	1d33      	adds	r3, r6, #4
 80044d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f004 fd42 	bl	8008f60 <USB_CoreInit>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0d0      	b.n	8004690 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f004 fe59 	bl	80091ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	e04a      	b.n	8004596 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	333d      	adds	r3, #61	; 0x3d
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	333c      	adds	r3, #60	; 0x3c
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	b298      	uxth	r0, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3344      	adds	r3, #68	; 0x44
 800453c:	4602      	mov	r2, r0
 800453e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3340      	adds	r3, #64	; 0x40
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3348      	adds	r3, #72	; 0x48
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	334c      	adds	r3, #76	; 0x4c
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3354      	adds	r3, #84	; 0x54
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3af      	bcc.n	8004500 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e044      	b.n	8004630 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	3301      	adds	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3b5      	bcc.n	80045a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	687e      	ldr	r6, [r7, #4]
 8004642:	466d      	mov	r5, sp
 8004644:	f106 0410 	add.w	r4, r6, #16
 8004648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004654:	e885 0003 	stmia.w	r5, {r0, r1}
 8004658:	1d33      	adds	r3, r6, #4
 800465a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f004 fdf1 	bl	8009244 <USB_DevInit>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e00d      	b.n	8004690 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f005 ff40 	bl	800a50e <USB_DevDisconnect>

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004698 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_PCD_Start+0x1c>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e020      	b.n	80046f6 <HAL_PCD_Start+0x5e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d109      	bne.n	80046d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d005      	beq.n	80046d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 fd43 	bl	8009168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f005 fef0 	bl	800a4cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046fe:	b590      	push	{r4, r7, lr}
 8004700:	b08d      	sub	sp, #52	; 0x34
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f005 ffae 	bl	800a676 <USB_GetMode>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 848a 	bne.w	8005036 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f005 ff12 	bl	800a550 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8480 	beq.w	8005034 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f005 feff 	bl	800a550 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d107      	bne.n	800476c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f002 0202 	and.w	r2, r2, #2
 800476a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f005 feed 	bl	800a550 <USB_ReadInterrupts>
 8004776:	4603      	mov	r3, r0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d161      	bne.n	8004844 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0210 	bic.w	r2, r2, #16
 800478e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4413      	add	r3, r2
 80047ac:	3304      	adds	r3, #4
 80047ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	0c5b      	lsrs	r3, r3, #17
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d124      	bne.n	8004806 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d035      	beq.n	8004834 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6a38      	ldr	r0, [r7, #32]
 80047dc:	f005 fd24 	bl	800a228 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ec:	441a      	add	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047fe:	441a      	add	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	621a      	str	r2, [r3, #32]
 8004804:	e016      	b.n	8004834 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	0c5b      	lsrs	r3, r3, #17
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	2b06      	cmp	r3, #6
 8004810:	d110      	bne.n	8004834 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004818:	2208      	movs	r2, #8
 800481a:	4619      	mov	r1, r3
 800481c:	6a38      	ldr	r0, [r7, #32]
 800481e:	f005 fd03 	bl	800a228 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482e:	441a      	add	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0210 	orr.w	r2, r2, #16
 8004842:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f005 fe81 	bl	800a550 <USB_ReadInterrupts>
 800484e:	4603      	mov	r3, r0
 8004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004854:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004858:	f040 80a7 	bne.w	80049aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f005 fe86 	bl	800a576 <USB_ReadDevAllOutEpInterrupt>
 800486a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800486c:	e099      	b.n	80049a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 808e 	beq.w	8004996 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f005 feaa 	bl	800a5de <USB_ReadDevOutEPInterrupt>
 800488a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	2301      	movs	r3, #1
 80048a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fec2 	bl	8005634 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	2308      	movs	r3, #8
 80048ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ff98 	bl	8005804 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	461a      	mov	r2, r3
 80048ec:	2310      	movs	r3, #16
 80048ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d030      	beq.n	800495c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d109      	bne.n	800491a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004918:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	78db      	ldrb	r3, [r3, #3]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f006 fba3 	bl	800b090 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	461a      	mov	r2, r3
 8004958:	2302      	movs	r3, #2
 800495a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	2320      	movs	r3, #32
 8004976:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004994:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	3301      	adds	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f af62 	bne.w	800486e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f005 fdce 	bl	800a550 <USB_ReadInterrupts>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049be:	f040 80db 	bne.w	8004b78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f005 fdef 	bl	800a5aa <USB_ReadDevAllInEpInterrupt>
 80049cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049d2:	e0cd      	b.n	8004b70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80c2 	beq.w	8004b64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f005 fe15 	bl	800a61a <USB_ReadDevInEPInterrupt>
 80049f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d057      	beq.n	8004aac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	2201      	movs	r2, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69f9      	ldr	r1, [r7, #28]
 8004a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2301      	movs	r3, #1
 8004a30:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d132      	bne.n	8004aa0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	334c      	adds	r3, #76	; 0x4c
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4403      	add	r3, r0
 8004a5a:	3348      	adds	r3, #72	; 0x48
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4419      	add	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	334c      	adds	r3, #76	; 0x4c
 8004a70:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d113      	bne.n	8004aa0 <HAL_PCD_IRQHandler+0x3a2>
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3354      	adds	r3, #84	; 0x54
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	f005 fe1c 	bl	800a6d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f006 fa6d 	bl	800af86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	461a      	mov	r2, r3
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d023      	beq.n	8004b52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b0c:	6a38      	ldr	r0, [r7, #32]
 8004b0e:	f004 fcfd 	bl	800950c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3338      	adds	r3, #56	; 0x38
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	3304      	adds	r3, #4
 8004b24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d108      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f006 faba 	bl	800b0b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2302      	movs	r3, #2
 8004b50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fcdb 	bl	800551a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	3301      	adds	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f af2e 	bne.w	80049d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f005 fce7 	bl	800a550 <USB_ReadInterrupts>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8c:	d122      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d108      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fec2 	bl	8005940 <HAL_PCDEx_LPM_Callback>
 8004bbc:	e002      	b.n	8004bc4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f006 fa58 	bl	800b074 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f005 fcb9 	bl	800a550 <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be8:	d112      	bne.n	8004c10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d102      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f006 fa14 	bl	800b028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f005 fc9b 	bl	800a550 <USB_ReadInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c24:	f040 80b7 	bne.w	8004d96 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2110      	movs	r1, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f004 fc62 	bl	800950c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4c:	e046      	b.n	8004cdc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	3301      	adds	r3, #1
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d3b3      	bcc.n	8004c4e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f043 030b 	orr.w	r3, r3, #11
 8004d16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d28:	f043 030b 	orr.w	r3, r3, #11
 8004d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2e:	e015      	b.n	8004d5c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d56:	f043 030b 	orr.w	r3, r3, #11
 8004d5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d80:	461a      	mov	r2, r3
 8004d82:	f005 fca9 	bl	800a6d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f005 fbd8 	bl	800a550 <USB_ReadInterrupts>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	d124      	bne.n	8004df6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f005 fc6e 	bl	800a692 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 fc23 	bl	8009606 <USB_GetDevSpeed>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681c      	ldr	r4, [r3, #0]
 8004dcc:	f001 fa28 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f004 f922 	bl	8009024 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f006 f8f8 	bl	800afd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f005 fba8 	bl	800a550 <USB_ReadInterrupts>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d10a      	bne.n	8004e20 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f006 f8d5 	bl	800afba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f002 0208 	and.w	r2, r2, #8
 8004e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f005 fb93 	bl	800a550 <USB_ReadInterrupts>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d122      	bne.n	8004e7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e40:	2301      	movs	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	e014      	b.n	8004e70 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d105      	bne.n	8004e6a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb27 	bl	80054b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3e5      	bcc.n	8004e46 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fb66 	bl	800a550 <USB_ReadInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8e:	d13b      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e90:	2301      	movs	r3, #1
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	e02b      	b.n	8004eee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3340      	adds	r3, #64	; 0x40
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d115      	bne.n	8004ee8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da12      	bge.n	8004ee8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	333f      	adds	r3, #63	; 0x3f
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fae8 	bl	80054b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	3301      	adds	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3ce      	bcc.n	8004e96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 fb1f 	bl	800a550 <USB_ReadInterrupts>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1c:	d155      	bne.n	8004fca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f1e:	2301      	movs	r3, #1
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	e045      	b.n	8004fb0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d12e      	bne.n	8004faa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da2b      	bge.n	8004faa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d121      	bne.n	8004faa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fa6:	6053      	str	r3, [r2, #4]
            break;
 8004fa8:	e007      	b.n	8004fba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	3301      	adds	r3, #1
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3b4      	bcc.n	8004f24 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 fabe 	bl	800a550 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d10a      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f006 f879 	bl	800b0d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f005 faa8 	bl	800a550 <USB_ReadInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b04      	cmp	r3, #4
 8005008:	d115      	bne.n	8005036 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f006 f869 	bl	800b0f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	e000      	b.n	8005036 <HAL_PCD_IRQHandler+0x938>
      return;
 8005034:	bf00      	nop
    }
  }
}
 8005036:	3734      	adds	r7, #52	; 0x34
 8005038:	46bd      	mov	sp, r7
 800503a:	bd90      	pop	{r4, r7, pc}

0800503c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_PCD_SetAddress+0x1a>
 8005052:	2302      	movs	r3, #2
 8005054:	e013      	b.n	800507e <HAL_PCD_SetAddress+0x42>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f005 fa06 	bl	800a480 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	461a      	mov	r2, r3
 8005094:	4603      	mov	r3, r0
 8005096:	70fb      	strb	r3, [r7, #3]
 8005098:	460b      	mov	r3, r1
 800509a:	803b      	strh	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	da0f      	bge.n	80050cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	3338      	adds	r3, #56	; 0x38
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	3304      	adds	r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	705a      	strb	r2, [r3, #1]
 80050ca:	e00f      	b.n	80050ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	3304      	adds	r3, #4
 80050e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050f8:	883a      	ldrh	r2, [r7, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	78ba      	ldrb	r2, [r7, #2]
 8005102:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d004      	beq.n	8005116 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005116:	78bb      	ldrb	r3, [r7, #2]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d102      	bne.n	8005122 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_PCD_EP_Open+0xaa>
 800512c:	2302      	movs	r3, #2
 800512e:	e00e      	b.n	800514e <HAL_PCD_EP_Open+0xc8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	4618      	mov	r0, r3
 8005140:	f004 fa86 	bl	8009650 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800514c:	7afb      	ldrb	r3, [r7, #11]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005166:	2b00      	cmp	r3, #0
 8005168:	da0f      	bge.n	800518a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	3338      	adds	r3, #56	; 0x38
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	3304      	adds	r3, #4
 8005180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	705a      	strb	r2, [r3, #1]
 8005188:	e00f      	b.n	80051aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	3304      	adds	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_PCD_EP_Close+0x6e>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e00e      	b.n	80051e2 <HAL_PCD_EP_Close+0x8c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f004 fac4 	bl	8009760 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	460b      	mov	r3, r1
 80051f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	b2da      	uxtb	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d102      	bne.n	8005246 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005246:	7afb      	ldrb	r3, [r7, #11]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	f004 fda3 	bl	8009da8 <USB_EP0StartXfer>
 8005262:	e008      	b.n	8005276 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f004 fb51 	bl	8009918 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	f003 020f 	and.w	r2, r3, #15
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	460b      	mov	r3, r1
 80052be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c0:	7afb      	ldrb	r3, [r7, #11]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3338      	adds	r3, #56	; 0x38
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2201      	movs	r2, #1
 80052ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6979      	ldr	r1, [r7, #20]
 8005322:	f004 fd41 	bl	8009da8 <USB_EP0StartXfer>
 8005326:	e008      	b.n	800533a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	f004 faef 	bl	8009918 <USB_EPStartXfer>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d901      	bls.n	8005362 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e050      	b.n	8005404 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005366:	2b00      	cmp	r3, #0
 8005368:	da0f      	bge.n	800538a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	3338      	adds	r3, #56	; 0x38
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	705a      	strb	r2, [r3, #1]
 8005388:	e00d      	b.n	80053a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_PCD_EP_SetStall+0x82>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e01e      	b.n	8005404 <HAL_PCD_EP_SetStall+0xc0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f004 ff7f 	bl	800a2d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	b2d9      	uxtb	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053f4:	461a      	mov	r2, r3
 80053f6:	f005 f96f 	bl	800a6d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d901      	bls.n	800542a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e042      	b.n	80054b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800542a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	da0f      	bge.n	8005452 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	3338      	adds	r3, #56	; 0x38
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	3304      	adds	r3, #4
 8005448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	705a      	strb	r2, [r3, #1]
 8005450:	e00f      	b.n	8005472 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_PCD_EP_ClrStall+0x86>
 800548e:	2302      	movs	r3, #2
 8005490:	e00e      	b.n	80054b0 <HAL_PCD_EP_ClrStall+0xa4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 ff87 	bl	800a3b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da0c      	bge.n	80054e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 020f 	and.w	r2, r3, #15
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3338      	adds	r3, #56	; 0x38
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	3304      	adds	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e00c      	b.n	8005500 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	f003 020f 	and.w	r2, r3, #15
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	4618      	mov	r0, r3
 8005508:	f004 fda6 	bl	800a058 <USB_EPStopXfer>
 800550c:	4603      	mov	r3, r0
 800550e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005510:	7afb      	ldrb	r3, [r7, #11]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b08a      	sub	sp, #40	; 0x28
 800551e:	af02      	add	r7, sp, #8
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	3338      	adds	r3, #56	; 0x38
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	3304      	adds	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d901      	bls.n	8005552 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e06c      	b.n	800562c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	429a      	cmp	r2, r3
 8005566:	d902      	bls.n	800556e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3303      	adds	r3, #3
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005576:	e02b      	b.n	80055d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	429a      	cmp	r2, r3
 800558c:	d902      	bls.n	8005594 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3303      	adds	r3, #3
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6919      	ldr	r1, [r3, #16]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4603      	mov	r3, r0
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f004 fdfa 	bl	800a1ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	441a      	add	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d809      	bhi.n	80055fa <PCD_WriteEmptyTxFifo+0xe0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d203      	bcs.n	80055fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1be      	bne.n	8005578 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	429a      	cmp	r2, r3
 8005604:	d811      	bhi.n	800562a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2201      	movs	r2, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	43db      	mvns	r3, r3
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005626:	4013      	ands	r3, r2
 8005628:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	333c      	adds	r3, #60	; 0x3c
 800564c:	3304      	adds	r3, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d17b      	bne.n	8005762 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4a61      	ldr	r2, [pc, #388]	; (80057fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f240 80b9 	bls.w	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80b3 	beq.w	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	461a      	mov	r2, r3
 8005698:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569c:	6093      	str	r3, [r2, #8]
 800569e:	e0a7      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	2320      	movs	r3, #32
 80056ba:	6093      	str	r3, [r2, #8]
 80056bc:	e098      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 8093 	bne.w	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4a4b      	ldr	r2, [pc, #300]	; (80057fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d90f      	bls.n	80056f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	6093      	str	r3, [r2, #8]
 80056f0:	e07e      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	3304      	adds	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	0159      	lsls	r1, r3, #5
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	440b      	add	r3, r1
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d114      	bne.n	8005754 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800573c:	461a      	mov	r2, r3
 800573e:	2101      	movs	r1, #1
 8005740:	f004 ffca 	bl	800a6d8 <USB_EP0_OutStart>
 8005744:	e006      	b.n	8005754 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	441a      	add	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f005 fbf8 	bl	800af50 <HAL_PCD_DataOutStageCallback>
 8005760:	e046      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d124      	bne.n	80057b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	461a      	mov	r2, r3
 8005782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005786:	6093      	str	r3, [r2, #8]
 8005788:	e032      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	2320      	movs	r3, #32
 80057a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f005 fbcf 	bl	800af50 <HAL_PCD_DataOutStageCallback>
 80057b2:	e01d      	b.n	80057f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057dc:	461a      	mov	r2, r3
 80057de:	2100      	movs	r1, #0
 80057e0:	f004 ff7a 	bl	800a6d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f005 fbb0 	bl	800af50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	4f54300a 	.word	0x4f54300a
 8005800:	4f54310a 	.word	0x4f54310a

08005804 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	333c      	adds	r3, #60	; 0x3c
 800581c:	3304      	adds	r3, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <PCD_EP_OutSetupPacket_int+0x88>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d90e      	bls.n	8005858 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005856:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f005 fb67 	bl	800af2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <PCD_EP_OutSetupPacket_int+0x88>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d90c      	bls.n	8005880 <PCD_EP_OutSetupPacket_int+0x7c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d108      	bne.n	8005880 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005878:	461a      	mov	r2, r3
 800587a:	2101      	movs	r1, #1
 800587c:	f004 ff2c 	bl	800a6d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	4f54300a 	.word	0x4f54300a

08005890 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
 800589c:	4613      	mov	r3, r2
 800589e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d107      	bne.n	80058be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058ae:	883b      	ldrh	r3, [r7, #0]
 80058b0:	0419      	lsls	r1, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
 80058bc:	e028      	b.n	8005910 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4413      	add	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e00d      	b.n	80058ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	3340      	adds	r3, #64	; 0x40
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	3301      	adds	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	7bfa      	ldrb	r2, [r7, #15]
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3ec      	bcc.n	80058d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058f8:	883b      	ldrh	r3, [r7, #0]
 80058fa:	0418      	lsls	r0, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	3b01      	subs	r3, #1
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	4302      	orrs	r2, r0
 8005908:	3340      	adds	r3, #64	; 0x40
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e267      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d075      	beq.n	8005a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005976:	4b88      	ldr	r3, [pc, #544]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00c      	beq.n	800599c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005982:	4b85      	ldr	r3, [pc, #532]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800598a:	2b08      	cmp	r3, #8
 800598c:	d112      	bne.n	80059b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598e:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599a:	d10b      	bne.n	80059b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	4b7e      	ldr	r3, [pc, #504]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05b      	beq.n	8005a60 <HAL_RCC_OscConfig+0x108>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d157      	bne.n	8005a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e242      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059bc:	d106      	bne.n	80059cc <HAL_RCC_OscConfig+0x74>
 80059be:	4b76      	ldr	r3, [pc, #472]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a75      	ldr	r2, [pc, #468]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e01d      	b.n	8005a08 <HAL_RCC_OscConfig+0xb0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x98>
 80059d6:	4b70      	ldr	r3, [pc, #448]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a6f      	ldr	r2, [pc, #444]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6c      	ldr	r2, [pc, #432]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e00b      	b.n	8005a08 <HAL_RCC_OscConfig+0xb0>
 80059f0:	4b69      	ldr	r3, [pc, #420]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a68      	ldr	r2, [pc, #416]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4b66      	ldr	r3, [pc, #408]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a65      	ldr	r2, [pc, #404]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d013      	beq.n	8005a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fb3c 	bl	800308c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fd fb38 	bl	800308c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	; 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e207      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0xc0>
 8005a36:	e014      	b.n	8005a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a38:	f7fd fb28 	bl	800308c <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a40:	f7fd fb24 	bl	800308c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	; 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e1f3      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a52:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0xe8>
 8005a5e:	e000      	b.n	8005a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d063      	beq.n	8005b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d11c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a86:	4b44      	ldr	r3, [pc, #272]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d116      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_RCC_OscConfig+0x152>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e1c7      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4937      	ldr	r1, [pc, #220]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abe:	e03a      	b.n	8005b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d020      	beq.n	8005b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac8:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <HAL_RCC_OscConfig+0x244>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fd fadd 	bl	800308c <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fd fad9 	bl	800308c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e1a8      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4925      	ldr	r1, [pc, #148]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	600b      	str	r3, [r1, #0]
 8005b08:	e015      	b.n	8005b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <HAL_RCC_OscConfig+0x244>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b10:	f7fd fabc 	bl	800308c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b18:	f7fd fab8 	bl	800308c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e187      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d036      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d016      	beq.n	8005b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <HAL_RCC_OscConfig+0x248>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b50:	f7fd fa9c 	bl	800308c <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b58:	f7fd fa98 	bl	800308c <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e167      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x200>
 8005b76:	e01b      	b.n	8005bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b78:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_OscConfig+0x248>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fd fa85 	bl	800308c <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b86:	f7fd fa81 	bl	800308c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d907      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e150      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	42470000 	.word	0x42470000
 8005ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	4b88      	ldr	r3, [pc, #544]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ea      	bne.n	8005b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8097 	beq.w	8005cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc2:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	4b7d      	ldr	r3, [pc, #500]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	4a7c      	ldr	r2, [pc, #496]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bde:	4b7a      	ldr	r3, [pc, #488]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bea:	2301      	movs	r3, #1
 8005bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bee:	4b77      	ldr	r3, [pc, #476]	; (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d118      	bne.n	8005c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfa:	4b74      	ldr	r3, [pc, #464]	; (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a73      	ldr	r2, [pc, #460]	; (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c06:	f7fd fa41 	bl	800308c <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0e:	f7fd fa3d 	bl	800308c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e10c      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <HAL_RCC_OscConfig+0x474>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x2ea>
 8005c34:	4b64      	ldr	r3, [pc, #400]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a63      	ldr	r2, [pc, #396]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	e01c      	b.n	8005c7c <HAL_RCC_OscConfig+0x324>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d10c      	bne.n	8005c64 <HAL_RCC_OscConfig+0x30c>
 8005c4a:	4b5f      	ldr	r3, [pc, #380]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a5e      	ldr	r2, [pc, #376]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c50:	f043 0304 	orr.w	r3, r3, #4
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70
 8005c56:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	4a5b      	ldr	r2, [pc, #364]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6713      	str	r3, [r2, #112]	; 0x70
 8005c62:	e00b      	b.n	8005c7c <HAL_RCC_OscConfig+0x324>
 8005c64:	4b58      	ldr	r3, [pc, #352]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	4a57      	ldr	r2, [pc, #348]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c70:	4b55      	ldr	r3, [pc, #340]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	4a54      	ldr	r2, [pc, #336]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d015      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fd fa02 	bl	800308c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	e00a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f7fd f9fe 	bl	800308c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0cb      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca2:	4b49      	ldr	r3, [pc, #292]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0ee      	beq.n	8005c8c <HAL_RCC_OscConfig+0x334>
 8005cae:	e014      	b.n	8005cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb0:	f7fd f9ec 	bl	800308c <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd f9e8 	bl	800308c <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0b5      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cce:	4b3e      	ldr	r3, [pc, #248]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1ee      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d105      	bne.n	8005cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce0:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	4a38      	ldr	r2, [pc, #224]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80a1 	beq.w	8005e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf6:	4b34      	ldr	r3, [pc, #208]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d05c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d141      	bne.n	8005d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fd f9bc 	bl	800308c <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fd f9b8 	bl	800308c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e087      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	491b      	ldr	r1, [pc, #108]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fd f991 	bl	800308c <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fd f98d 	bl	800308c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e05c      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x416>
 8005d8c:	e054      	b.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <HAL_RCC_OscConfig+0x478>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fd f97a 	bl	800308c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd f976 	bl	800308c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e045      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_OscConfig+0x470>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x444>
 8005dba:	e03d      	b.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e038      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <HAL_RCC_OscConfig+0x4ec>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d028      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d121      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d11a      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d111      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d107      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800

08005e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0cc      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b68      	ldr	r3, [pc, #416]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90c      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b65      	ldr	r3, [pc, #404]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b63      	ldr	r3, [pc, #396]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0b8      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e9c:	4b59      	ldr	r3, [pc, #356]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb4:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a52      	ldr	r2, [pc, #328]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec0:	4b50      	ldr	r3, [pc, #320]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	494d      	ldr	r1, [pc, #308]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d044      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	4b47      	ldr	r3, [pc, #284]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d119      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d003      	beq.n	8005f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f06:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e06f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f16:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e067      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f023 0203 	bic.w	r2, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4934      	ldr	r1, [pc, #208]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f38:	f7fd f8a8 	bl	800308c <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f40:	f7fd f8a4 	bl	800308c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e04f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 020c 	and.w	r2, r3, #12
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1eb      	bne.n	8005f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20c      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b20      	ldr	r3, [pc, #128]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e032      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4916      	ldr	r1, [pc, #88]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	490e      	ldr	r1, [pc, #56]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fce:	f000 f821 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	490a      	ldr	r1, [pc, #40]	; (8006008 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe0:	5ccb      	ldrb	r3, [r1, r3]
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCC_ClockConfig+0x1c8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd f808 	bl	8003004 <HAL_InitTick>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40023c00 	.word	0x40023c00
 8006004:	40023800 	.word	0x40023800
 8006008:	08013cfc 	.word	0x08013cfc
 800600c:	20000104 	.word	0x20000104
 8006010:	2000008c 	.word	0x2000008c

08006014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b094      	sub	sp, #80	; 0x50
 800601a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	647b      	str	r3, [r7, #68]	; 0x44
 8006020:	2300      	movs	r3, #0
 8006022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006024:	2300      	movs	r3, #0
 8006026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800602c:	4b79      	ldr	r3, [pc, #484]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 030c 	and.w	r3, r3, #12
 8006034:	2b08      	cmp	r3, #8
 8006036:	d00d      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x40>
 8006038:	2b08      	cmp	r3, #8
 800603a:	f200 80e1 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x34>
 8006042:	2b04      	cmp	r3, #4
 8006044:	d003      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x3a>
 8006046:	e0db      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b73      	ldr	r3, [pc, #460]	; (8006218 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800604c:	e0db      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800604e:	4b73      	ldr	r3, [pc, #460]	; (800621c <HAL_RCC_GetSysClockFreq+0x208>)
 8006050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006052:	e0d8      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006054:	4b6f      	ldr	r3, [pc, #444]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800605c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800605e:	4b6d      	ldr	r3, [pc, #436]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d063      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606a:	4b6a      	ldr	r3, [pc, #424]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	2200      	movs	r2, #0
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
 8006074:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
 800607e:	2300      	movs	r3, #0
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	f04f 0000 	mov.w	r0, #0
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	0159      	lsls	r1, r3, #5
 8006094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006098:	0150      	lsls	r0, r2, #5
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4621      	mov	r1, r4
 80060a0:	1a51      	subs	r1, r2, r1
 80060a2:	6139      	str	r1, [r7, #16]
 80060a4:	4629      	mov	r1, r5
 80060a6:	eb63 0301 	sbc.w	r3, r3, r1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b8:	4659      	mov	r1, fp
 80060ba:	018b      	lsls	r3, r1, #6
 80060bc:	4651      	mov	r1, sl
 80060be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060c2:	4651      	mov	r1, sl
 80060c4:	018a      	lsls	r2, r1, #6
 80060c6:	4651      	mov	r1, sl
 80060c8:	ebb2 0801 	subs.w	r8, r2, r1
 80060cc:	4659      	mov	r1, fp
 80060ce:	eb63 0901 	sbc.w	r9, r3, r1
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e6:	4690      	mov	r8, r2
 80060e8:	4699      	mov	r9, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	eb18 0303 	adds.w	r3, r8, r3
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	462b      	mov	r3, r5
 80060f4:	eb49 0303 	adc.w	r3, r9, r3
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006106:	4629      	mov	r1, r5
 8006108:	024b      	lsls	r3, r1, #9
 800610a:	4621      	mov	r1, r4
 800610c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006110:	4621      	mov	r1, r4
 8006112:	024a      	lsls	r2, r1, #9
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	2200      	movs	r2, #0
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006124:	f7fa fd90 	bl	8000c48 <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4613      	mov	r3, r2
 800612e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006130:	e058      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006132:	4b38      	ldr	r3, [pc, #224]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	2200      	movs	r2, #0
 800613a:	4618      	mov	r0, r3
 800613c:	4611      	mov	r1, r2
 800613e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006142:	623b      	str	r3, [r7, #32]
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	f04f 0000 	mov.w	r0, #0
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	0159      	lsls	r1, r3, #5
 800615a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800615e:	0150      	lsls	r0, r2, #5
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4641      	mov	r1, r8
 8006166:	ebb2 0a01 	subs.w	sl, r2, r1
 800616a:	4649      	mov	r1, r9
 800616c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800617c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006184:	ebb2 040a 	subs.w	r4, r2, sl
 8006188:	eb63 050b 	sbc.w	r5, r3, fp
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	00eb      	lsls	r3, r5, #3
 8006196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619a:	00e2      	lsls	r2, r4, #3
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	18e3      	adds	r3, r4, r3
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	464b      	mov	r3, r9
 80061a8:	eb45 0303 	adc.w	r3, r5, r3
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ba:	4629      	mov	r1, r5
 80061bc:	028b      	lsls	r3, r1, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c4:	4621      	mov	r1, r4
 80061c6:	028a      	lsls	r2, r1, #10
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ce:	2200      	movs	r2, #0
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	61fa      	str	r2, [r7, #28]
 80061d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d8:	f7fa fd36 	bl	8000c48 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetSysClockFreq+0x204>)
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006208:	4618      	mov	r0, r3
 800620a:	3750      	adds	r7, #80	; 0x50
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	007a1200 	.word	0x007a1200

08006220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000104 	.word	0x20000104

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	08013d0c 	.word	0x08013d0c

08006260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006264:	f7ff ffdc 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0b5b      	lsrs	r3, r3, #13
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4903      	ldr	r1, [pc, #12]	; (8006284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	08013d0c 	.word	0x08013d0c

08006288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e07b      	b.n	8006392 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d108      	bne.n	80062b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062aa:	d009      	beq.n	80062c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	61da      	str	r2, [r3, #28]
 80062b2:	e005      	b.n	80062c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f009 fa72 	bl	800f7c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	ea42 0103 	orr.w	r1, r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	f003 0104 	and.w	r1, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	f003 0210 	and.w	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b088      	sub	sp, #32
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_SPI_Transmit+0x22>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e126      	b.n	800660a <HAL_SPI_Transmit+0x270>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c4:	f7fc fe62 	bl	800308c <HAL_GetTick>
 80063c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063da:	2302      	movs	r3, #2
 80063dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063de:	e10b      	b.n	80065f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Transmit+0x52>
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063f0:	e102      	b.n	80065f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2203      	movs	r2, #3
 80063f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d10f      	bne.n	800645a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006448:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006458:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d007      	beq.n	8006478 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006480:	d14b      	bne.n	800651a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_SPI_Transmit+0xf6>
 800648a:	8afb      	ldrh	r3, [r7, #22]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d13e      	bne.n	800650e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	881a      	ldrh	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	1c9a      	adds	r2, r3, #2
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064b4:	e02b      	b.n	800650e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d112      	bne.n	80064ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	881a      	ldrh	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	1c9a      	adds	r2, r3, #2
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e8:	e011      	b.n	800650e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ea:	f7fc fdcf 	bl	800308c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d803      	bhi.n	8006502 <HAL_SPI_Transmit+0x168>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Transmit+0x16e>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800650c:	e074      	b.n	80065f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ce      	bne.n	80064b6 <HAL_SPI_Transmit+0x11c>
 8006518:	e04c      	b.n	80065b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_SPI_Transmit+0x18e>
 8006522:	8afb      	ldrh	r3, [r7, #22]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d140      	bne.n	80065aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800654e:	e02c      	b.n	80065aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d113      	bne.n	8006586 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	330c      	adds	r3, #12
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	86da      	strh	r2, [r3, #54]	; 0x36
 8006584:	e011      	b.n	80065aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006586:	f7fc fd81 	bl	800308c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d803      	bhi.n	800659e <HAL_SPI_Transmit+0x204>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d102      	bne.n	80065a4 <HAL_SPI_Transmit+0x20a>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a8:	e026      	b.n	80065f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1cd      	bne.n	8006550 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fe15 	bl	80071e8 <SPI_EndRxTxTransaction>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e000      	b.n	80065f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006608:	7ffb      	ldrb	r3, [r7, #31]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b088      	sub	sp, #32
 8006616:	af02      	add	r7, sp, #8
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662e:	d112      	bne.n	8006656 <HAL_SPI_Receive+0x44>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10e      	bne.n	8006656 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f8f1 	bl	8006834 <HAL_SPI_TransmitReceive>
 8006652:	4603      	mov	r3, r0
 8006654:	e0ea      	b.n	800682c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_SPI_Receive+0x52>
 8006660:	2302      	movs	r3, #2
 8006662:	e0e3      	b.n	800682c <HAL_SPI_Receive+0x21a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800666c:	f7fc fd0e 	bl	800308c <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d002      	beq.n	8006684 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800667e:	2302      	movs	r3, #2
 8006680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006682:	e0ca      	b.n	800681a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Receive+0x7e>
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006694:	e0c1      	b.n	800681a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2204      	movs	r2, #4
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066dc:	d10f      	bne.n	80066fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d007      	beq.n	800671c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d162      	bne.n	80067ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006724:	e02e      	b.n	8006784 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d115      	bne.n	8006760 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f103 020c 	add.w	r2, r3, #12
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675e:	e011      	b.n	8006784 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006760:	f7fc fc94 	bl	800308c <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d803      	bhi.n	8006778 <HAL_SPI_Receive+0x166>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d102      	bne.n	800677e <HAL_SPI_Receive+0x16c>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006782:	e04a      	b.n	800681a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1cb      	bne.n	8006726 <HAL_SPI_Receive+0x114>
 800678e:	e031      	b.n	80067f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d113      	bne.n	80067c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	b292      	uxth	r2, r2
 80067aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c4:	e011      	b.n	80067ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c6:	f7fc fc61 	bl	800308c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d803      	bhi.n	80067de <HAL_SPI_Receive+0x1cc>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_Receive+0x1d2>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067e8:	e017      	b.n	800681a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1cd      	bne.n	8006790 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fc8f 	bl	800711c <SPI_EndRxTransaction>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
 8006816:	e000      	b.n	800681a <HAL_SPI_Receive+0x208>
  }

error :
 8006818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08c      	sub	sp, #48	; 0x30
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006842:	2301      	movs	r3, #1
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_SPI_TransmitReceive+0x26>
 8006856:	2302      	movs	r3, #2
 8006858:	e18a      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x33c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006862:	f7fc fc13 	bl	800308c <HAL_GetTick>
 8006866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800687c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006880:	2b01      	cmp	r3, #1
 8006882:	d00f      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x70>
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688a:	d107      	bne.n	800689c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d103      	bne.n	800689c <HAL_SPI_TransmitReceive+0x68>
 8006894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006898:	2b04      	cmp	r3, #4
 800689a:	d003      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800689c:	2302      	movs	r3, #2
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068a2:	e15b      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_SPI_TransmitReceive+0x82>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <HAL_SPI_TransmitReceive+0x82>
 80068b0:	887b      	ldrh	r3, [r7, #2]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068bc:	e14e      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2205      	movs	r2, #5
 80068ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	887a      	ldrh	r2, [r7, #2]
 80068e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	887a      	ldrh	r2, [r7, #2]
 80068f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	887a      	ldrh	r2, [r7, #2]
 80068fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d007      	beq.n	8006926 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006924:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692e:	d178      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_TransmitReceive+0x10a>
 8006938:	8b7b      	ldrh	r3, [r7, #26]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d166      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	1c9a      	adds	r2, r3, #2
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006962:	e053      	b.n	8006a0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d11b      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x176>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d016      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x176>
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d113      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	881a      	ldrh	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	1c9a      	adds	r2, r3, #2
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d119      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x1b8>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d014      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	b292      	uxth	r2, r2
 80069ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e8:	2301      	movs	r3, #1
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069ec:	f7fc fb4e 	bl	800308c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d807      	bhi.n	8006a0c <HAL_SPI_TransmitReceive+0x1d8>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d003      	beq.n	8006a0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a0a:	e0a7      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1a6      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x130>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1a1      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x130>
 8006a20:	e07c      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_TransmitReceive+0x1fc>
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d16b      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a56:	e057      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d11c      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x26c>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x26c>
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d114      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d119      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x2ae>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d014      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ae2:	f7fc fad3 	bl	800308c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d803      	bhi.n	8006afa <HAL_SPI_TransmitReceive+0x2c6>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d102      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x2cc>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b06:	e029      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1a2      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x224>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d19d      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fb61 	bl	80071e8 <SPI_EndRxTxTransaction>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b38:	e010      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	e000      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3730      	adds	r7, #48	; 0x30
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_SPI_Transmit_DMA+0x20>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e09b      	b.n	8006cd0 <HAL_SPI_Transmit_DMA+0x158>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
 8006bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bb0:	e089      	b.n	8006cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_SPI_Transmit_DMA+0x46>
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bc2:	e080      	b.n	8006cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	88fa      	ldrh	r2, [r7, #6]
 8006bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0a:	d10f      	bne.n	8006c2c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	4a29      	ldr	r2, [pc, #164]	; (8006cd8 <HAL_SPI_Transmit_DMA+0x160>)
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	4a28      	ldr	r2, [pc, #160]	; (8006cdc <HAL_SPI_Transmit_DMA+0x164>)
 8006c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c40:	4a27      	ldr	r2, [pc, #156]	; (8006ce0 <HAL_SPI_Transmit_DMA+0x168>)
 8006c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c48:	2200      	movs	r2, #0
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4619      	mov	r1, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c64:	f7fc fc02 	bl	800346c <HAL_DMA_Start_IT>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	f043 0210 	orr.w	r2, r3, #16
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006c86:	e01e      	b.n	8006cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d007      	beq.n	8006ca6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0220 	orr.w	r2, r2, #32
 8006cb4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0202 	orr.w	r2, r2, #2
 8006cc4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08006f89 	.word	0x08006f89
 8006cdc:	08006ee1 	.word	0x08006ee1
 8006ce0:	08006fa5 	.word	0x08006fa5

08006ce4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10e      	bne.n	8006d24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
    return;
 8006d22:	e0ce      	b.n	8006ec2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_SPI_IRQHandler+0x5e>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
    return;
 8006d40:	e0bf      	b.n	8006ec2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <HAL_SPI_IRQHandler+0x7e>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d105      	bne.n	8006d62 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80b0 	beq.w	8006ec2 <HAL_SPI_IRQHandler+0x1de>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80aa 	beq.w	8006ec2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d023      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d011      	beq.n	8006da8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	f043 0204 	orr.w	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e00b      	b.n	8006dc0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]
        return;
 8006dbe:	e080      	b.n	8006ec2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d014      	beq.n	8006df4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	f043 0208 	orr.w	r2, r3, #8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d04f      	beq.n	8006ec0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <HAL_SPI_IRQHandler+0x168>
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d034      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0203 	bic.w	r2, r2, #3
 8006e5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d011      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_SPI_IRQHandler+0x1e4>)
 8006e6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fc fbc3 	bl	80035fc <HAL_DMA_Abort_IT>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e94:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <HAL_SPI_IRQHandler+0x1e4>)
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fc fbad 	bl	80035fc <HAL_DMA_Abort_IT>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006eb4:	e003      	b.n	8006ebe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f008 fc22 	bl	800f700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ebc:	e000      	b.n	8006ec0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006ebe:	bf00      	nop
    return;
 8006ec0:	bf00      	nop
  }
}
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	08006fe5 	.word	0x08006fe5

08006ecc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eee:	f7fc f8cd 	bl	800308c <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	d03b      	beq.n	8006f7c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0220 	bic.w	r2, r2, #32
 8006f12:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0202 	bic.w	r2, r2, #2
 8006f22:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	2164      	movs	r1, #100	; 0x64
 8006f28:	6978      	ldr	r0, [r7, #20]
 8006f2a:	f000 f95d 	bl	80071e8 <SPI_EndRxTxTransaction>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f008 fbc3 	bl	800f700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f7a:	e002      	b.n	8006f82 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f008 fbed 	bl	800f75c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff ff98 	bl	8006ecc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0203 	bic.w	r2, r2, #3
 8006fc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f043 0210 	orr.w	r2, r3, #16
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f008 fb92 	bl	800f700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f008 fb7e 	bl	800f700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800701c:	f7fc f836 	bl	800308c <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4413      	add	r3, r2
 800702a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800702c:	f7fc f82e 	bl	800308c <HAL_GetTick>
 8007030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007032:	4b39      	ldr	r3, [pc, #228]	; (8007118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	015b      	lsls	r3, r3, #5
 8007038:	0d1b      	lsrs	r3, r3, #20
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007042:	e054      	b.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d050      	beq.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800704c:	f7fc f81e 	bl	800308c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	429a      	cmp	r2, r3
 800705a:	d902      	bls.n	8007062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d13d      	bne.n	80070de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707a:	d111      	bne.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d004      	beq.n	8007090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d107      	bne.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a8:	d10f      	bne.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e017      	b.n	800710e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bf0c      	ite	eq
 80070fe:	2301      	moveq	r3, #1
 8007100:	2300      	movne	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d19b      	bne.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000104 	.word	0x20000104

0800711c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007130:	d111      	bne.n	8007156 <SPI_EndRxTransaction+0x3a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713a:	d004      	beq.n	8007146 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d107      	bne.n	8007156 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007154:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800715e:	d12a      	bne.n	80071b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007168:	d012      	beq.n	8007190 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff49 	bl	800700c <SPI_WaitFlagStateUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02d      	beq.n	80071dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e026      	b.n	80071de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	2101      	movs	r1, #1
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff ff36 	bl	800700c <SPI_WaitFlagStateUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d01a      	beq.n	80071dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0220 	orr.w	r2, r3, #32
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e013      	b.n	80071de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2200      	movs	r2, #0
 80071be:	2101      	movs	r1, #1
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff ff23 	bl	800700c <SPI_WaitFlagStateUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e000      	b.n	80071de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071f4:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <SPI_EndRxTxTransaction+0x7c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <SPI_EndRxTxTransaction+0x80>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	0d5b      	lsrs	r3, r3, #21
 8007200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007212:	d112      	bne.n	800723a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fef4 	bl	800700c <SPI_WaitFlagStateUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d016      	beq.n	8007258 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	f043 0220 	orr.w	r2, r3, #32
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e00f      	b.n	800725a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	3b01      	subs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d0f2      	beq.n	800723a <SPI_EndRxTxTransaction+0x52>
 8007254:	e000      	b.n	8007258 <SPI_EndRxTxTransaction+0x70>
        break;
 8007256:	bf00      	nop
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000104 	.word	0x20000104
 8007268:	165e9f81 	.word	0x165e9f81

0800726c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e041      	b.n	8007302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f008 fbbe 	bl	800fa14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f000 fa98 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d001      	beq.n	8007324 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e046      	b.n	80073b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a23      	ldr	r2, [pc, #140]	; (80073c0 <HAL_TIM_Base_Start+0xb4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733e:	d01d      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <HAL_TIM_Base_Start+0xb8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <HAL_TIM_Base_Start+0xbc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <HAL_TIM_Base_Start+0xc0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <HAL_TIM_Base_Start+0xc4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <HAL_TIM_Base_Start+0xc8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_TIM_Base_Start+0x70>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <HAL_TIM_Base_Start+0xcc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d111      	bne.n	80073a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b06      	cmp	r3, #6
 800738c:	d010      	beq.n	80073b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0201 	orr.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739e:	e007      	b.n	80073b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010000 	.word	0x40010000
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	40010400 	.word	0x40010400
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40001800 	.word	0x40001800

080073dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d122      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d11b      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0202 	mvn.w	r2, #2
 8007408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9bf 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9b1 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9c2 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d122      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b04      	cmp	r3, #4
 8007452:	d11b      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0204 	mvn.w	r2, #4
 800745c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f995 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 8007478:	e005      	b.n	8007486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f987 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f998 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b08      	cmp	r3, #8
 8007498:	d122      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d11b      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0208 	mvn.w	r2, #8
 80074b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2204      	movs	r2, #4
 80074b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f96b 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 80074cc:	e005      	b.n	80074da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f95d 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f96e 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d122      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d11b      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0210 	mvn.w	r2, #16
 8007504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2208      	movs	r2, #8
 800750a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f941 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 8007520:	e005      	b.n	800752e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f933 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f944 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10e      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d107      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f90d 	bl	800777a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 faea 	bl	8007b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f909 	bl	80077ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0220 	mvn.w	r2, #32
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fab4 	bl	8007b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_ConfigClockSource+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e0b4      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x186>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x172>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xa6>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x11a>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xfa>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x13a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 f9b7 	bl	8007a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 f9a0 	bl	8007a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 f914 	bl	8007920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f96d 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 f933 	bl	800797e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f95d 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 f8f4 	bl	8007920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f94d 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 f944 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a40      	ldr	r2, [pc, #256]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d013      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fe:	d00f      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a3d      	ldr	r2, [pc, #244]	; (80078f8 <TIM_Base_SetConfig+0x118>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a3c      	ldr	r2, [pc, #240]	; (80078fc <TIM_Base_SetConfig+0x11c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3b      	ldr	r2, [pc, #236]	; (8007900 <TIM_Base_SetConfig+0x120>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3a      	ldr	r2, [pc, #232]	; (8007904 <TIM_Base_SetConfig+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d108      	bne.n	8007832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2f      	ldr	r2, [pc, #188]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d02b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007840:	d027      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2c      	ldr	r2, [pc, #176]	; (80078f8 <TIM_Base_SetConfig+0x118>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d023      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <TIM_Base_SetConfig+0x11c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d01f      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <TIM_Base_SetConfig+0x120>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a29      	ldr	r2, [pc, #164]	; (8007904 <TIM_Base_SetConfig+0x124>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d017      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a28      	ldr	r2, [pc, #160]	; (8007908 <TIM_Base_SetConfig+0x128>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a27      	ldr	r2, [pc, #156]	; (800790c <TIM_Base_SetConfig+0x12c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a26      	ldr	r2, [pc, #152]	; (8007910 <TIM_Base_SetConfig+0x130>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a25      	ldr	r2, [pc, #148]	; (8007914 <TIM_Base_SetConfig+0x134>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a24      	ldr	r2, [pc, #144]	; (8007918 <TIM_Base_SetConfig+0x138>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a23      	ldr	r2, [pc, #140]	; (800791c <TIM_Base_SetConfig+0x13c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a0a      	ldr	r2, [pc, #40]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_Base_SetConfig+0xf8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <TIM_Base_SetConfig+0x124>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d103      	bne.n	80078e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	615a      	str	r2, [r3, #20]
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800
 8007914:	40001800 	.word	0x40001800
 8007918:	40001c00 	.word	0x40001c00
 800791c:	40002000 	.word	0x40002000

08007920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0201 	bic.w	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800794a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 030a 	bic.w	r3, r3, #10
 800795c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800797e:	b480      	push	{r7}
 8007980:	b087      	sub	sp, #28
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0210 	bic.w	r2, r3, #16
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	031b      	lsls	r3, r3, #12
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f043 0307 	orr.w	r3, r3, #7
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	609a      	str	r2, [r3, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e05a      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab8:	d01d      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40001800 	.word	0x40001800

08007b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e03f      	b.n	8007c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f008 fb20 	bl	80101e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	; 0x24
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 ff5d 	bl	8008a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695a      	ldr	r2, [r3, #20]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b08a      	sub	sp, #40	; 0x28
 8007c12:	af02      	add	r7, sp, #8
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d17c      	bne.n	8007d28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_UART_Transmit+0x2c>
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e075      	b.n	8007d2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_UART_Transmit+0x3e>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e06e      	b.n	8007d2a <HAL_UART_Transmit+0x11c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2221      	movs	r2, #33	; 0x21
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c62:	f7fb fa13 	bl	800308c <HAL_GetTick>
 8007c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7c:	d108      	bne.n	8007c90 <HAL_UART_Transmit+0x82>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	e003      	b.n	8007c98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ca0:	e02a      	b.n	8007cf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2180      	movs	r1, #128	; 0x80
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fc15 	bl	80084dc <UART_WaitOnFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e036      	b.n	8007d2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10b      	bne.n	8007cda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	e007      	b.n	8007cea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	781a      	ldrb	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1cf      	bne.n	8007ca2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2140      	movs	r1, #64	; 0x40
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fbe5 	bl	80084dc <UART_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e006      	b.n	8007d2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d11d      	bne.n	8007d88 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <HAL_UART_Receive_DMA+0x26>
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e016      	b.n	8007d8a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Receive_DMA+0x38>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e00f      	b.n	8007d8a <HAL_UART_Receive_DMA+0x58>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fc1a 	bl	80085b8 <UART_Start_Receive_DMA>
 8007d84:	4603      	mov	r3, r0
 8007d86:	e000      	b.n	8007d8a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b0ba      	sub	sp, #232	; 0xe8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10f      	bne.n	8007dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <HAL_UART_IRQHandler+0x66>
 8007de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fd85 	bl	8008902 <UART_Receive_IT>
      return;
 8007df8:	e256      	b.n	80082a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80de 	beq.w	8007fc0 <HAL_UART_IRQHandler+0x22c>
 8007e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80d1 	beq.w	8007fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00b      	beq.n	8007e42 <HAL_UART_IRQHandler+0xae>
 8007e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f043 0201 	orr.w	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <HAL_UART_IRQHandler+0xd2>
 8007e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f043 0202 	orr.w	r2, r3, #2
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <HAL_UART_IRQHandler+0xf6>
 8007e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f043 0204 	orr.w	r2, r3, #4
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d011      	beq.n	8007eba <HAL_UART_IRQHandler+0x126>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f043 0208 	orr.w	r2, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 81ed 	beq.w	800829e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x14e>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fd10 	bl	8008902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <HAL_UART_IRQHandler+0x17a>
 8007f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d04f      	beq.n	8007fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc18 	bl	8008744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d141      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3314      	adds	r3, #20
 8007f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3314      	adds	r3, #20
 8007f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1d9      	bne.n	8007f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d013      	beq.n	8007f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	4a7d      	ldr	r2, [pc, #500]	; (8008170 <HAL_UART_IRQHandler+0x3dc>)
 8007f7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fb fb3a 	bl	80035fc <HAL_DMA_Abort_IT>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d016      	beq.n	8007fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9c:	e00e      	b.n	8007fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f008 f908 	bl	80101b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa4:	e00a      	b.n	8007fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f008 f904 	bl	80101b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	e006      	b.n	8007fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f008 f900 	bl	80101b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fba:	e170      	b.n	800829e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	bf00      	nop
    return;
 8007fbe:	e16e      	b.n	800829e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 814a 	bne.w	800825e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 8143 	beq.w	800825e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 813c 	beq.w	800825e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	60bb      	str	r3, [r7, #8]
 8007ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	f040 80b4 	bne.w	8008174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8140 	beq.w	80082a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800802a:	429a      	cmp	r2, r3
 800802c:	f080 8139 	bcs.w	80082a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008042:	f000 8088 	beq.w	8008156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800805c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800807e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800808a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1d9      	bne.n	8008046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e1      	bne.n	8008092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3314      	adds	r3, #20
 80080ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e3      	bne.n	80080ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008126:	f023 0310 	bic.w	r3, r3, #16
 800812a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008138:	65ba      	str	r2, [r7, #88]	; 0x58
 800813a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800813e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e3      	bne.n	8008114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	4618      	mov	r0, r3
 8008152:	f7fb f9e3 	bl	800351c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800815e:	b29b      	uxth	r3, r3
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	b29b      	uxth	r3, r3
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f008 f82e 	bl	80101c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800816c:	e099      	b.n	80082a2 <HAL_UART_IRQHandler+0x50e>
 800816e:	bf00      	nop
 8008170:	0800880b 	.word	0x0800880b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800817c:	b29b      	uxth	r3, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 808b 	beq.w	80082a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8086 	beq.w	80082a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	330c      	adds	r3, #12
 80081a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081be:	647a      	str	r2, [r7, #68]	; 0x44
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e3      	bne.n	800819a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3314      	adds	r3, #20
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3314      	adds	r3, #20
 80081f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081f6:	633a      	str	r2, [r7, #48]	; 0x30
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e3      	bne.n	80081d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	60fb      	str	r3, [r7, #12]
   return(result);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0310 	bic.w	r3, r3, #16
 800822e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800823c:	61fa      	str	r2, [r7, #28]
 800823e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	617b      	str	r3, [r7, #20]
   return(result);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e3      	bne.n	8008218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f007 ffb6 	bl	80101c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800825c:	e023      	b.n	80082a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_UART_IRQHandler+0x4ea>
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fadb 	bl	8008832 <UART_Transmit_IT>
    return;
 800827c:	e014      	b.n	80082a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00e      	beq.n	80082a8 <HAL_UART_IRQHandler+0x514>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d008      	beq.n	80082a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fb1b 	bl	80088d2 <UART_EndTransmit_IT>
    return;
 800829c:	e004      	b.n	80082a8 <HAL_UART_IRQHandler+0x514>
    return;
 800829e:	bf00      	nop
 80082a0:	e002      	b.n	80082a8 <HAL_UART_IRQHandler+0x514>
      return;
 80082a2:	bf00      	nop
 80082a4:	e000      	b.n	80082a8 <HAL_UART_IRQHandler+0x514>
      return;
 80082a6:	bf00      	nop
  }
}
 80082a8:	37e8      	adds	r7, #232	; 0xe8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop

080082b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b09c      	sub	sp, #112	; 0x70
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d172      	bne.n	80083ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	2200      	movs	r2, #0
 800830c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800830e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800831e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
 8008326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800832e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008330:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800833c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	667b      	str	r3, [r7, #100]	; 0x64
 800835a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008362:	647a      	str	r2, [r7, #68]	; 0x44
 8008364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	623b      	str	r3, [r7, #32]
   return(result);
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800838c:	663b      	str	r3, [r7, #96]	; 0x60
 800838e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3314      	adds	r3, #20
 8008394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008396:	633a      	str	r2, [r7, #48]	; 0x30
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d119      	bne.n	80083ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	330c      	adds	r3, #12
 80083c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f023 0310 	bic.w	r3, r3, #16
 80083d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	330c      	adds	r3, #12
 80083d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083da:	61fa      	str	r2, [r7, #28]
 80083dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	69b9      	ldr	r1, [r7, #24]
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	617b      	str	r3, [r7, #20]
   return(result);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e5      	bne.n	80083ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d106      	bne.n	8008404 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083fa:	4619      	mov	r1, r3
 80083fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083fe:	f007 fee3 	bl	80101c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008402:	e002      	b.n	800840a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008404:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008406:	f7ff ff5d 	bl	80082c4 <HAL_UART_RxCpltCallback>
}
 800840a:	bf00      	nop
 800840c:	3770      	adds	r7, #112	; 0x70
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	2b01      	cmp	r3, #1
 8008426:	d108      	bne.n	800843a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	b29b      	uxth	r3, r3
 8008430:	4619      	mov	r1, r3
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f007 fec8 	bl	80101c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008438:	e002      	b.n	8008440 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff ff4c 	bl	80082d8 <HAL_UART_RxHalfCpltCallback>
}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008464:	2b80      	cmp	r3, #128	; 0x80
 8008466:	bf0c      	ite	eq
 8008468:	2301      	moveq	r3, #1
 800846a:	2300      	movne	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b21      	cmp	r3, #33	; 0x21
 800847a:	d108      	bne.n	800848e <UART_DMAError+0x46>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008488:	68b8      	ldr	r0, [r7, #8]
 800848a:	f000 f933 	bl	80086f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b22      	cmp	r3, #34	; 0x22
 80084ae:	d108      	bne.n	80084c2 <UART_DMAError+0x7a>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2200      	movs	r2, #0
 80084ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80084bc:	68b8      	ldr	r0, [r7, #8]
 80084be:	f000 f941 	bl	8008744 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	f043 0210 	orr.w	r2, r3, #16
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f007 fe70 	bl	80101b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b090      	sub	sp, #64	; 0x40
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ec:	e050      	b.n	8008590 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d04c      	beq.n	8008590 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <UART_WaitOnFlagUntilTimeout+0x30>
 80084fc:	f7fa fdc6 	bl	800308c <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008508:	429a      	cmp	r2, r3
 800850a:	d241      	bcs.n	8008590 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	330c      	adds	r3, #12
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852c:	637a      	str	r2, [r7, #52]	; 0x34
 800852e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3314      	adds	r3, #20
 8008546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	613b      	str	r3, [r7, #16]
   return(result);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3314      	adds	r3, #20
 800855e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008560:	623a      	str	r2, [r7, #32]
 8008562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	69f9      	ldr	r1, [r7, #28]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	61bb      	str	r3, [r7, #24]
   return(result);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e5      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e00f      	b.n	80085b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4013      	ands	r3, r2
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	bf0c      	ite	eq
 80085a0:	2301      	moveq	r3, #1
 80085a2:	2300      	movne	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d09f      	beq.n	80084ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3740      	adds	r7, #64	; 0x40
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b098      	sub	sp, #96	; 0x60
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2222      	movs	r2, #34	; 0x22
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	4a40      	ldr	r2, [pc, #256]	; (80086e8 <UART_Start_Receive_DMA+0x130>)
 80085e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	4a3f      	ldr	r2, [pc, #252]	; (80086ec <UART_Start_Receive_DMA+0x134>)
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	4a3e      	ldr	r2, [pc, #248]	; (80086f0 <UART_Start_Receive_DMA+0x138>)
 80085f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	2200      	movs	r2, #0
 80085fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008600:	f107 0308 	add.w	r3, r7, #8
 8008604:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	f7fa ff28 	bl	800346c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	613b      	str	r3, [r7, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d019      	beq.n	8008676 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	330c      	adds	r3, #12
 8008648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008658:	65bb      	str	r3, [r7, #88]	; 0x58
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008662:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008664:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3314      	adds	r3, #20
 800867c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	657b      	str	r3, [r7, #84]	; 0x54
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3314      	adds	r3, #20
 8008694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008696:	63ba      	str	r2, [r7, #56]	; 0x38
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800869c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e5      	bne.n	8008676 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3314      	adds	r3, #20
 80086b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c0:	653b      	str	r3, [r7, #80]	; 0x50
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3314      	adds	r3, #20
 80086c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086ca:	627a      	str	r2, [r7, #36]	; 0x24
 80086cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6a39      	ldr	r1, [r7, #32]
 80086d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3760      	adds	r7, #96	; 0x60
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	080082ed 	.word	0x080082ed
 80086ec:	08008413 	.word	0x08008413
 80086f0:	08008449 	.word	0x08008449

080086f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b089      	sub	sp, #36	; 0x24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	330c      	adds	r3, #12
 8008702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	60bb      	str	r3, [r7, #8]
   return(result);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	61ba      	str	r2, [r7, #24]
 800871e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6979      	ldr	r1, [r7, #20]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	613b      	str	r3, [r7, #16]
   return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008738:	bf00      	nop
 800873a:	3724      	adds	r7, #36	; 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b095      	sub	sp, #84	; 0x54
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800876c:	643a      	str	r2, [r7, #64]	; 0x40
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e5      	bne.n	800874c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3314      	adds	r3, #20
 8008786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f023 0301 	bic.w	r3, r3, #1
 8008796:	64bb      	str	r3, [r7, #72]	; 0x48
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3314      	adds	r3, #20
 800879e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e5      	bne.n	8008780 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d119      	bne.n	80087f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f023 0310 	bic.w	r3, r3, #16
 80087d2:	647b      	str	r3, [r7, #68]	; 0x44
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087dc:	61ba      	str	r2, [r7, #24]
 80087de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6979      	ldr	r1, [r7, #20]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e5      	bne.n	80087bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087fe:	bf00      	nop
 8008800:	3754      	adds	r7, #84	; 0x54
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f007 fcc5 	bl	80101b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b21      	cmp	r3, #33	; 0x21
 8008844:	d13e      	bne.n	80088c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d114      	bne.n	800887a <UART_Transmit_IT+0x48>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d110      	bne.n	800887a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800886c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	1c9a      	adds	r2, r3, #2
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	621a      	str	r2, [r3, #32]
 8008878:	e008      	b.n	800888c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	1c59      	adds	r1, r3, #1
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6211      	str	r1, [r2, #32]
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	b29b      	uxth	r3, r3
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	4619      	mov	r1, r3
 800889a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10f      	bne.n	80088c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e000      	b.n	80088c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fcdc 	bl	80082b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08c      	sub	sp, #48	; 0x30
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b22      	cmp	r3, #34	; 0x22
 8008914:	f040 80ab 	bne.w	8008a6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008920:	d117      	bne.n	8008952 <UART_Receive_IT+0x50>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d113      	bne.n	8008952 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008940:	b29a      	uxth	r2, r3
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	1c9a      	adds	r2, r3, #2
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28
 8008950:	e026      	b.n	80089a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008958:	2300      	movs	r3, #0
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008964:	d007      	beq.n	8008976 <UART_Receive_IT+0x74>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <UART_Receive_IT+0x82>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	e008      	b.n	8008996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008990:	b2da      	uxtb	r2, r3
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	4619      	mov	r1, r3
 80089ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d15a      	bne.n	8008a6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0220 	bic.w	r2, r2, #32
 80089c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	695a      	ldr	r2, [r3, #20]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0201 	bic.w	r2, r2, #1
 80089e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d135      	bne.n	8008a60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	330c      	adds	r3, #12
 8008a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f023 0310 	bic.w	r3, r3, #16
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	623a      	str	r2, [r7, #32]
 8008a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	69f9      	ldr	r1, [r7, #28]
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e5      	bne.n	80089fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d10a      	bne.n	8008a52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f007 fbb5 	bl	80101c8 <HAL_UARTEx_RxEventCallback>
 8008a5e:	e002      	b.n	8008a66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff fc2f 	bl	80082c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e002      	b.n	8008a70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e000      	b.n	8008a70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
  }
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	; 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a7c:	b0c0      	sub	sp, #256	; 0x100
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a94:	68d9      	ldr	r1, [r3, #12]
 8008a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	ea40 0301 	orr.w	r3, r0, r1
 8008aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ad0:	f021 010c 	bic.w	r1, r1, #12
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af2:	6999      	ldr	r1, [r3, #24]
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	ea40 0301 	orr.w	r3, r0, r1
 8008afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	4b8f      	ldr	r3, [pc, #572]	; (8008d44 <UART_SetConfig+0x2cc>)
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d005      	beq.n	8008b18 <UART_SetConfig+0xa0>
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b8d      	ldr	r3, [pc, #564]	; (8008d48 <UART_SetConfig+0x2d0>)
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d104      	bne.n	8008b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fd fba2 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b20:	e003      	b.n	8008b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b22:	f7fd fb89 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8008b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b34:	f040 810c 	bne.w	8008d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	1891      	adds	r1, r2, r2
 8008b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b52:	415b      	adcs	r3, r3
 8008b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	eb12 0801 	adds.w	r8, r2, r1
 8008b60:	4629      	mov	r1, r5
 8008b62:	eb43 0901 	adc.w	r9, r3, r1
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b7a:	4690      	mov	r8, r2
 8008b7c:	4699      	mov	r9, r3
 8008b7e:	4623      	mov	r3, r4
 8008b80:	eb18 0303 	adds.w	r3, r8, r3
 8008b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b88:	462b      	mov	r3, r5
 8008b8a:	eb49 0303 	adc.w	r3, r9, r3
 8008b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	18db      	adds	r3, r3, r3
 8008baa:	653b      	str	r3, [r7, #80]	; 0x50
 8008bac:	4613      	mov	r3, r2
 8008bae:	eb42 0303 	adc.w	r3, r2, r3
 8008bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bbc:	f7f8 f844 	bl	8000c48 <__aeabi_uldivmod>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4b61      	ldr	r3, [pc, #388]	; (8008d4c <UART_SetConfig+0x2d4>)
 8008bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	011c      	lsls	r4, r3, #4
 8008bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	1891      	adds	r1, r2, r2
 8008be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008be8:	415b      	adcs	r3, r3
 8008bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	f04f 0300 	mov.w	r3, #0
 8008c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c10:	4692      	mov	sl, r2
 8008c12:	469b      	mov	fp, r3
 8008c14:	4643      	mov	r3, r8
 8008c16:	eb1a 0303 	adds.w	r3, sl, r3
 8008c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c1e:	464b      	mov	r3, r9
 8008c20:	eb4b 0303 	adc.w	r3, fp, r3
 8008c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	18db      	adds	r3, r3, r3
 8008c40:	643b      	str	r3, [r7, #64]	; 0x40
 8008c42:	4613      	mov	r3, r2
 8008c44:	eb42 0303 	adc.w	r3, r2, r3
 8008c48:	647b      	str	r3, [r7, #68]	; 0x44
 8008c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c52:	f7f7 fff9 	bl	8000c48 <__aeabi_uldivmod>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4b3b      	ldr	r3, [pc, #236]	; (8008d4c <UART_SetConfig+0x2d4>)
 8008c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	2264      	movs	r2, #100	; 0x64
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	1acb      	subs	r3, r1, r3
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c72:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <UART_SetConfig+0x2d4>)
 8008c74:	fba3 2302 	umull	r2, r3, r3, r2
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c80:	441c      	add	r4, r3
 8008c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	1891      	adds	r1, r2, r2
 8008c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c9c:	415b      	adcs	r3, r3
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	1851      	adds	r1, r2, r1
 8008ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8008caa:	4649      	mov	r1, r9
 8008cac:	414b      	adcs	r3, r1
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cbc:	4659      	mov	r1, fp
 8008cbe:	00cb      	lsls	r3, r1, #3
 8008cc0:	4651      	mov	r1, sl
 8008cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cc6:	4651      	mov	r1, sl
 8008cc8:	00ca      	lsls	r2, r1, #3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	189b      	adds	r3, r3, r2
 8008cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cd8:	464b      	mov	r3, r9
 8008cda:	460a      	mov	r2, r1
 8008cdc:	eb42 0303 	adc.w	r3, r2, r3
 8008ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	18db      	adds	r3, r3, r3
 8008cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cfe:	4613      	mov	r3, r2
 8008d00:	eb42 0303 	adc.w	r3, r2, r3
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d0e:	f7f7 ff9b 	bl	8000c48 <__aeabi_uldivmod>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <UART_SetConfig+0x2d4>)
 8008d18:	fba3 1302 	umull	r1, r3, r3, r2
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	2164      	movs	r1, #100	; 0x64
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	3332      	adds	r3, #50	; 0x32
 8008d2a:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <UART_SetConfig+0x2d4>)
 8008d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	f003 0207 	and.w	r2, r3, #7
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4422      	add	r2, r4
 8008d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d40:	e106      	b.n	8008f50 <UART_SetConfig+0x4d8>
 8008d42:	bf00      	nop
 8008d44:	40011000 	.word	0x40011000
 8008d48:	40011400 	.word	0x40011400
 8008d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d62:	4642      	mov	r2, r8
 8008d64:	464b      	mov	r3, r9
 8008d66:	1891      	adds	r1, r2, r2
 8008d68:	6239      	str	r1, [r7, #32]
 8008d6a:	415b      	adcs	r3, r3
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d72:	4641      	mov	r1, r8
 8008d74:	1854      	adds	r4, r2, r1
 8008d76:	4649      	mov	r1, r9
 8008d78:	eb43 0501 	adc.w	r5, r3, r1
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	00eb      	lsls	r3, r5, #3
 8008d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d8a:	00e2      	lsls	r2, r4, #3
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	461d      	mov	r5, r3
 8008d90:	4643      	mov	r3, r8
 8008d92:	18e3      	adds	r3, r4, r3
 8008d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d98:	464b      	mov	r3, r9
 8008d9a:	eb45 0303 	adc.w	r3, r5, r3
 8008d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	008b      	lsls	r3, r1, #2
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dc8:	4621      	mov	r1, r4
 8008dca:	008a      	lsls	r2, r1, #2
 8008dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008dd0:	f7f7 ff3a 	bl	8000c48 <__aeabi_uldivmod>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4b60      	ldr	r3, [pc, #384]	; (8008f5c <UART_SetConfig+0x4e4>)
 8008dda:	fba3 2302 	umull	r2, r3, r3, r2
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	011c      	lsls	r4, r3, #4
 8008de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008df4:	4642      	mov	r2, r8
 8008df6:	464b      	mov	r3, r9
 8008df8:	1891      	adds	r1, r2, r2
 8008dfa:	61b9      	str	r1, [r7, #24]
 8008dfc:	415b      	adcs	r3, r3
 8008dfe:	61fb      	str	r3, [r7, #28]
 8008e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e04:	4641      	mov	r1, r8
 8008e06:	1851      	adds	r1, r2, r1
 8008e08:	6139      	str	r1, [r7, #16]
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	414b      	adcs	r3, r1
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	00cb      	lsls	r3, r1, #3
 8008e20:	4651      	mov	r1, sl
 8008e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e26:	4651      	mov	r1, sl
 8008e28:	00ca      	lsls	r2, r1, #3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4642      	mov	r2, r8
 8008e32:	189b      	adds	r3, r3, r2
 8008e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e38:	464b      	mov	r3, r9
 8008e3a:	460a      	mov	r2, r1
 8008e3c:	eb42 0303 	adc.w	r3, r2, r3
 8008e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	008b      	lsls	r3, r1, #2
 8008e60:	4641      	mov	r1, r8
 8008e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e66:	4641      	mov	r1, r8
 8008e68:	008a      	lsls	r2, r1, #2
 8008e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e6e:	f7f7 feeb 	bl	8000c48 <__aeabi_uldivmod>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	4b38      	ldr	r3, [pc, #224]	; (8008f5c <UART_SetConfig+0x4e4>)
 8008e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	2264      	movs	r2, #100	; 0x64
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	1acb      	subs	r3, r1, r3
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	3332      	adds	r3, #50	; 0x32
 8008e8c:	4a33      	ldr	r2, [pc, #204]	; (8008f5c <UART_SetConfig+0x4e4>)
 8008e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e98:	441c      	add	r4, r3
 8008e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8008ea2:	677a      	str	r2, [r7, #116]	; 0x74
 8008ea4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	1891      	adds	r1, r2, r2
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	415b      	adcs	r3, r3
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb8:	4641      	mov	r1, r8
 8008eba:	1851      	adds	r1, r2, r1
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	414b      	adcs	r3, r1
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ed0:	4659      	mov	r1, fp
 8008ed2:	00cb      	lsls	r3, r1, #3
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eda:	4651      	mov	r1, sl
 8008edc:	00ca      	lsls	r2, r1, #3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4642      	mov	r2, r8
 8008ee6:	189b      	adds	r3, r3, r2
 8008ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eea:	464b      	mov	r3, r9
 8008eec:	460a      	mov	r2, r1
 8008eee:	eb42 0303 	adc.w	r3, r2, r3
 8008ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	663b      	str	r3, [r7, #96]	; 0x60
 8008efe:	667a      	str	r2, [r7, #100]	; 0x64
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	008b      	lsls	r3, r1, #2
 8008f10:	4641      	mov	r1, r8
 8008f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f16:	4641      	mov	r1, r8
 8008f18:	008a      	lsls	r2, r1, #2
 8008f1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f1e:	f7f7 fe93 	bl	8000c48 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <UART_SetConfig+0x4e4>)
 8008f28:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	2164      	movs	r1, #100	; 0x64
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	3332      	adds	r3, #50	; 0x32
 8008f3a:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <UART_SetConfig+0x4e4>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	f003 020f 	and.w	r2, r3, #15
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4422      	add	r2, r4
 8008f4e:	609a      	str	r2, [r3, #8]
}
 8008f50:	bf00      	nop
 8008f52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f56:	46bd      	mov	sp, r7
 8008f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f5c:	51eb851f 	.word	0x51eb851f

08008f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f60:	b084      	sub	sp, #16
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	f107 001c 	add.w	r0, r7, #28
 8008f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d122      	bne.n	8008fbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d105      	bne.n	8008fb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fbee 	bl	800a794 <USB_CoreReset>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e01a      	b.n	8008ff4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fbe2 	bl	800a794 <USB_CoreReset>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8008fe6:	e005      	b.n	8008ff4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d10b      	bne.n	8009012 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f043 0206 	orr.w	r2, r3, #6
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f043 0220 	orr.w	r2, r3, #32
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800901e:	b004      	add	sp, #16
 8009020:	4770      	bx	lr
	...

08009024 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d165      	bne.n	8009104 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4a41      	ldr	r2, [pc, #260]	; (8009140 <USB_SetTurnaroundTime+0x11c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d906      	bls.n	800904e <USB_SetTurnaroundTime+0x2a>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4a40      	ldr	r2, [pc, #256]	; (8009144 <USB_SetTurnaroundTime+0x120>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d202      	bcs.n	800904e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009048:	230f      	movs	r3, #15
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	e062      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	4a3c      	ldr	r2, [pc, #240]	; (8009144 <USB_SetTurnaroundTime+0x120>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d306      	bcc.n	8009064 <USB_SetTurnaroundTime+0x40>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	4a3b      	ldr	r2, [pc, #236]	; (8009148 <USB_SetTurnaroundTime+0x124>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d202      	bcs.n	8009064 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800905e:	230e      	movs	r3, #14
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	e057      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4a38      	ldr	r2, [pc, #224]	; (8009148 <USB_SetTurnaroundTime+0x124>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d306      	bcc.n	800907a <USB_SetTurnaroundTime+0x56>
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4a37      	ldr	r2, [pc, #220]	; (800914c <USB_SetTurnaroundTime+0x128>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d202      	bcs.n	800907a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009074:	230d      	movs	r3, #13
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	e04c      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4a33      	ldr	r2, [pc, #204]	; (800914c <USB_SetTurnaroundTime+0x128>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d306      	bcc.n	8009090 <USB_SetTurnaroundTime+0x6c>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	4a32      	ldr	r2, [pc, #200]	; (8009150 <USB_SetTurnaroundTime+0x12c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d802      	bhi.n	8009090 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800908a:	230c      	movs	r3, #12
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	e041      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4a2f      	ldr	r2, [pc, #188]	; (8009150 <USB_SetTurnaroundTime+0x12c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d906      	bls.n	80090a6 <USB_SetTurnaroundTime+0x82>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4a2e      	ldr	r2, [pc, #184]	; (8009154 <USB_SetTurnaroundTime+0x130>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d802      	bhi.n	80090a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090a0:	230b      	movs	r3, #11
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e036      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4a2a      	ldr	r2, [pc, #168]	; (8009154 <USB_SetTurnaroundTime+0x130>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d906      	bls.n	80090bc <USB_SetTurnaroundTime+0x98>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a29      	ldr	r2, [pc, #164]	; (8009158 <USB_SetTurnaroundTime+0x134>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d802      	bhi.n	80090bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090b6:	230a      	movs	r3, #10
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e02b      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a26      	ldr	r2, [pc, #152]	; (8009158 <USB_SetTurnaroundTime+0x134>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d906      	bls.n	80090d2 <USB_SetTurnaroundTime+0xae>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a25      	ldr	r2, [pc, #148]	; (800915c <USB_SetTurnaroundTime+0x138>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d202      	bcs.n	80090d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090cc:	2309      	movs	r3, #9
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e020      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a21      	ldr	r2, [pc, #132]	; (800915c <USB_SetTurnaroundTime+0x138>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d306      	bcc.n	80090e8 <USB_SetTurnaroundTime+0xc4>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a20      	ldr	r2, [pc, #128]	; (8009160 <USB_SetTurnaroundTime+0x13c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d802      	bhi.n	80090e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80090e2:	2308      	movs	r3, #8
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e015      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a1d      	ldr	r2, [pc, #116]	; (8009160 <USB_SetTurnaroundTime+0x13c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d906      	bls.n	80090fe <USB_SetTurnaroundTime+0xda>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a1c      	ldr	r2, [pc, #112]	; (8009164 <USB_SetTurnaroundTime+0x140>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d202      	bcs.n	80090fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80090f8:	2307      	movs	r3, #7
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e00a      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80090fe:	2306      	movs	r3, #6
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e007      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800910a:	2309      	movs	r3, #9
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e001      	b.n	8009114 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009110:	2309      	movs	r3, #9
 8009112:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800912c:	431a      	orrs	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	00d8acbf 	.word	0x00d8acbf
 8009144:	00e4e1c0 	.word	0x00e4e1c0
 8009148:	00f42400 	.word	0x00f42400
 800914c:	01067380 	.word	0x01067380
 8009150:	011a499f 	.word	0x011a499f
 8009154:	01312cff 	.word	0x01312cff
 8009158:	014ca43f 	.word	0x014ca43f
 800915c:	016e3600 	.word	0x016e3600
 8009160:	01a6ab1f 	.word	0x01a6ab1f
 8009164:	01e84800 	.word	0x01e84800

08009168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f043 0201 	orr.w	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f023 0201 	bic.w	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d115      	bne.n	80091fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091da:	2001      	movs	r0, #1
 80091dc:	f7f9 ff62 	bl	80030a4 <HAL_Delay>
      ms++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fa45 	bl	800a676 <USB_GetMode>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d01e      	beq.n	8009230 <USB_SetCurrentMode+0x84>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b31      	cmp	r3, #49	; 0x31
 80091f6:	d9f0      	bls.n	80091da <USB_SetCurrentMode+0x2e>
 80091f8:	e01a      	b.n	8009230 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d115      	bne.n	800922c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800920c:	2001      	movs	r0, #1
 800920e:	f7f9 ff49 	bl	80030a4 <HAL_Delay>
      ms++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 fa2c 	bl	800a676 <USB_GetMode>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <USB_SetCurrentMode+0x84>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b31      	cmp	r3, #49	; 0x31
 8009228:	d9f0      	bls.n	800920c <USB_SetCurrentMode+0x60>
 800922a:	e001      	b.n	8009230 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e005      	b.n	800923c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b32      	cmp	r3, #50	; 0x32
 8009234:	d101      	bne.n	800923a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009244:	b084      	sub	sp, #16
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800925e:	2300      	movs	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	e009      	b.n	8009278 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	3340      	adds	r3, #64	; 0x40
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	2200      	movs	r2, #0
 8009270:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3301      	adds	r3, #1
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2b0e      	cmp	r3, #14
 800927c:	d9f2      	bls.n	8009264 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11c      	bne.n	80092be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009292:	f043 0302 	orr.w	r3, r3, #2
 8009296:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
 80092bc:	e00b      	b.n	80092d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092dc:	461a      	mov	r2, r3
 80092de:	2300      	movs	r3, #0
 80092e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e8:	4619      	mov	r1, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f0:	461a      	mov	r2, r3
 80092f2:	680b      	ldr	r3, [r1, #0]
 80092f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d10c      	bne.n	8009316 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009302:	2100      	movs	r1, #0
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f965 	bl	80095d4 <USB_SetDevSpeed>
 800930a:	e008      	b.n	800931e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800930c:	2101      	movs	r1, #1
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f960 	bl	80095d4 <USB_SetDevSpeed>
 8009314:	e003      	b.n	800931e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009316:	2103      	movs	r1, #3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f95b 	bl	80095d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800931e:	2110      	movs	r1, #16
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f8f3 	bl	800950c <USB_FlushTxFifo>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f91f 	bl	8009574 <USB_FlushRxFifo>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009346:	461a      	mov	r2, r3
 8009348:	2300      	movs	r3, #0
 800934a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	461a      	mov	r2, r3
 8009354:	2300      	movs	r3, #0
 8009356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	461a      	mov	r2, r3
 8009360:	2300      	movs	r3, #0
 8009362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009364:	2300      	movs	r3, #0
 8009366:	613b      	str	r3, [r7, #16]
 8009368:	e043      	b.n	80093f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800937c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009380:	d118      	bne.n	80093b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	461a      	mov	r2, r3
 8009396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e013      	b.n	80093c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093aa:	461a      	mov	r2, r3
 80093ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e008      	b.n	80093c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	461a      	mov	r2, r3
 80093c2:	2300      	movs	r3, #0
 80093c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d2:	461a      	mov	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	461a      	mov	r2, r3
 80093e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	3301      	adds	r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d3b7      	bcc.n	800936a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093fa:	2300      	movs	r3, #0
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	e043      	b.n	8009488 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009416:	d118      	bne.n	800944a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942a:	461a      	mov	r2, r3
 800942c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e013      	b.n	800945c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	461a      	mov	r2, r3
 8009442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	e008      	b.n	800945c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	461a      	mov	r2, r3
 8009458:	2300      	movs	r3, #0
 800945a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	461a      	mov	r2, r3
 800946a:	2300      	movs	r3, #0
 800946c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947a:	461a      	mov	r2, r3
 800947c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3301      	adds	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	d3b7      	bcc.n	8009400 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f043 0210 	orr.w	r2, r3, #16
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <USB_DevInit+0x2c4>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f043 0208 	orr.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d107      	bne.n	80094f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094f0:	f043 0304 	orr.w	r3, r3, #4
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009504:	b004      	add	sp, #16
 8009506:	4770      	bx	lr
 8009508:	803c3800 	.word	0x803c3800

0800950c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a13      	ldr	r2, [pc, #76]	; (8009570 <USB_FlushTxFifo+0x64>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d901      	bls.n	800952c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e01b      	b.n	8009564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	daf2      	bge.n	800951a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	019b      	lsls	r3, r3, #6
 800953c:	f043 0220 	orr.w	r2, r3, #32
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a08      	ldr	r2, [pc, #32]	; (8009570 <USB_FlushTxFifo+0x64>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e006      	b.n	8009564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b20      	cmp	r3, #32
 8009560:	d0f0      	beq.n	8009544 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	00030d40 	.word	0x00030d40

08009574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a11      	ldr	r2, [pc, #68]	; (80095d0 <USB_FlushRxFifo+0x5c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d901      	bls.n	8009592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e018      	b.n	80095c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	daf2      	bge.n	8009580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2210      	movs	r2, #16
 80095a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <USB_FlushRxFifo+0x5c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d901      	bls.n	80095b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e006      	b.n	80095c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b10      	cmp	r3, #16
 80095c0:	d0f0      	beq.n	80095a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	00030d40 	.word	0x00030d40

080095d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095f4:	4313      	orrs	r3, r2
 80095f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f003 0306 	and.w	r3, r3, #6
 800961e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]
 800962a:	e00a      	b.n	8009642 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d002      	beq.n	8009638 <USB_GetDevSpeed+0x32>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b06      	cmp	r3, #6
 8009636:	d102      	bne.n	800963e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009638:	2302      	movs	r3, #2
 800963a:	75fb      	strb	r3, [r7, #23]
 800963c:	e001      	b.n	8009642 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800963e:	230f      	movs	r3, #15
 8009640:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d13a      	bne.n	80096e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009672:	69da      	ldr	r2, [r3, #28]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	2101      	movs	r1, #1
 800967e:	fa01 f303 	lsl.w	r3, r1, r3
 8009682:	b29b      	uxth	r3, r3
 8009684:	68f9      	ldr	r1, [r7, #12]
 8009686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800968a:	4313      	orrs	r3, r2
 800968c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d155      	bne.n	8009750 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	791b      	ldrb	r3, [r3, #4]
 80096be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	059b      	lsls	r3, r3, #22
 80096c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c8:	4313      	orrs	r3, r2
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	e036      	b.n	8009750 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e8:	69da      	ldr	r2, [r3, #28]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	2101      	movs	r1, #1
 80096f4:	fa01 f303 	lsl.w	r3, r1, r3
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009700:	4313      	orrs	r3, r2
 8009702:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d11a      	bne.n	8009750 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	791b      	ldrb	r3, [r3, #4]
 8009734:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009736:	430b      	orrs	r3, r1
 8009738:	4313      	orrs	r3, r2
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	0151      	lsls	r1, r2, #5
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	440a      	add	r2, r1
 8009742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d161      	bne.n	8009840 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800978e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009792:	d11f      	bne.n	80097d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 030f 	and.w	r3, r3, #15
 80097e4:	2101      	movs	r1, #1
 80097e6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	43db      	mvns	r3, r3
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097f4:	4013      	ands	r3, r2
 80097f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	69da      	ldr	r2, [r3, #28]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	2101      	movs	r1, #1
 800980a:	fa01 f303 	lsl.w	r3, r1, r3
 800980e:	b29b      	uxth	r3, r3
 8009810:	43db      	mvns	r3, r3
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009818:	4013      	ands	r3, r2
 800981a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	0159      	lsls	r1, r3, #5
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	440b      	add	r3, r1
 8009832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009836:	4619      	mov	r1, r3
 8009838:	4b35      	ldr	r3, [pc, #212]	; (8009910 <USB_DeactivateEndpoint+0x1b0>)
 800983a:	4013      	ands	r3, r2
 800983c:	600b      	str	r3, [r1, #0]
 800983e:	e060      	b.n	8009902 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009856:	d11f      	bne.n	8009898 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009876:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009896:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	2101      	movs	r1, #1
 80098aa:	fa01 f303 	lsl.w	r3, r1, r3
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	43db      	mvns	r3, r3
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098b8:	4013      	ands	r3, r2
 80098ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	2101      	movs	r1, #1
 80098ce:	fa01 f303 	lsl.w	r3, r1, r3
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	43db      	mvns	r3, r3
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098dc:	4013      	ands	r3, r2
 80098de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	0159      	lsls	r1, r3, #5
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	440b      	add	r3, r1
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	4619      	mov	r1, r3
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <USB_DeactivateEndpoint+0x1b4>)
 80098fe:	4013      	ands	r3, r2
 8009900:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	ec337800 	.word	0xec337800
 8009914:	eff37800 	.word	0xeff37800

08009918 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af02      	add	r7, sp, #8
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	2b01      	cmp	r3, #1
 8009936:	f040 815c 	bne.w	8009bf2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d132      	bne.n	80099a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a0:	0cdb      	lsrs	r3, r3, #19
 80099a2:	04db      	lsls	r3, r3, #19
 80099a4:	6113      	str	r3, [r2, #16]
 80099a6:	e074      	b.n	8009a92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	0151      	lsls	r1, r2, #5
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	440a      	add	r2, r1
 80099be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c2:	0cdb      	lsrs	r3, r3, #19
 80099c4:	04db      	lsls	r3, r3, #19
 80099c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6999      	ldr	r1, [r3, #24]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	440b      	add	r3, r1
 8009a04:	1e59      	subs	r1, r3, #1
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a10:	4b9d      	ldr	r3, [pc, #628]	; (8009c88 <USB_EPStartXfer+0x370>)
 8009a12:	400b      	ands	r3, r1
 8009a14:	69b9      	ldr	r1, [r7, #24]
 8009a16:	0148      	lsls	r0, r1, #5
 8009a18:	69f9      	ldr	r1, [r7, #28]
 8009a1a:	4401      	add	r1, r0
 8009a1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a20:	4313      	orrs	r3, r2
 8009a22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a3a:	69b9      	ldr	r1, [r7, #24]
 8009a3c:	0148      	lsls	r0, r1, #5
 8009a3e:	69f9      	ldr	r1, [r7, #28]
 8009a40:	4401      	add	r1, r0
 8009a42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a46:	4313      	orrs	r3, r2
 8009a48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	791b      	ldrb	r3, [r3, #4]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d11f      	bne.n	8009a92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d14b      	bne.n	8009b30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d009      	beq.n	8009ab4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	461a      	mov	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	791b      	ldrb	r3, [r3, #4]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d128      	bne.n	8009b0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d110      	bne.n	8009aee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	e00f      	b.n	8009b0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	e133      	b.n	8009d98 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d015      	beq.n	8009b84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 811b 	beq.w	8009d98 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	2101      	movs	r1, #1
 8009b74:	fa01 f303 	lsl.w	r3, r1, r3
 8009b78:	69f9      	ldr	r1, [r7, #28]
 8009b7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	634b      	str	r3, [r1, #52]	; 0x34
 8009b82:	e109      	b.n	8009d98 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d110      	bne.n	8009bb6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e00f      	b.n	8009bd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6919      	ldr	r1, [r3, #16]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	b298      	uxth	r0, r3
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4603      	mov	r3, r0
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fade 	bl	800a1ac <USB_WritePacket>
 8009bf0:	e0d2      	b.n	8009d98 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0c:	0cdb      	lsrs	r3, r3, #19
 8009c0e:	04db      	lsls	r3, r3, #19
 8009c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	69fa      	ldr	r2, [r7, #28]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d126      	bne.n	8009c8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c54:	69b9      	ldr	r1, [r7, #24]
 8009c56:	0148      	lsls	r0, r1, #5
 8009c58:	69f9      	ldr	r1, [r7, #28]
 8009c5a:	4401      	add	r1, r0
 8009c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c60:	4313      	orrs	r3, r2
 8009c62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c82:	6113      	str	r3, [r2, #16]
 8009c84:	e03a      	b.n	8009cfc <USB_EPStartXfer+0x3e4>
 8009c86:	bf00      	nop
 8009c88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	4413      	add	r3, r2
 8009c96:	1e5a      	subs	r2, r3, #1
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	8afa      	ldrh	r2, [r7, #22]
 8009ca8:	fb03 f202 	mul.w	r2, r3, r2
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	691a      	ldr	r2, [r3, #16]
 8009cbe:	8afb      	ldrh	r3, [r7, #22]
 8009cc0:	04d9      	lsls	r1, r3, #19
 8009cc2:	4b38      	ldr	r3, [pc, #224]	; (8009da4 <USB_EPStartXfer+0x48c>)
 8009cc4:	400b      	ands	r3, r1
 8009cc6:	69b9      	ldr	r1, [r7, #24]
 8009cc8:	0148      	lsls	r0, r1, #5
 8009cca:	69f9      	ldr	r1, [r7, #28]
 8009ccc:	4401      	add	r1, r0
 8009cce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cec:	69b9      	ldr	r1, [r7, #24]
 8009cee:	0148      	lsls	r0, r1, #5
 8009cf0:	69f9      	ldr	r1, [r7, #28]
 8009cf2:	4401      	add	r1, r0
 8009cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d10d      	bne.n	8009d1e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6919      	ldr	r1, [r3, #16]
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	460a      	mov	r2, r1
 8009d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d128      	bne.n	8009d78 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d110      	bne.n	8009d58 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	0151      	lsls	r1, r2, #5
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	440a      	add	r2, r1
 8009d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	e00f      	b.n	8009d78 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3720      	adds	r7, #32
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	1ff80000 	.word	0x1ff80000

08009da8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4613      	mov	r3, r2
 8009db4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	f040 80ce 	bne.w	8009f66 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d132      	bne.n	8009e38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e30:	0cdb      	lsrs	r3, r3, #19
 8009e32:	04db      	lsls	r3, r3, #19
 8009e34:	6113      	str	r3, [r2, #16]
 8009e36:	e04e      	b.n	8009ed6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e52:	0cdb      	lsrs	r3, r3, #19
 8009e54:	04db      	lsls	r3, r3, #19
 8009e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	0151      	lsls	r1, r2, #5
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	440a      	add	r2, r1
 8009e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d903      	bls.n	8009e90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	0151      	lsls	r1, r2, #5
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec6:	6939      	ldr	r1, [r7, #16]
 8009ec8:	0148      	lsls	r0, r1, #5
 8009eca:	6979      	ldr	r1, [r7, #20]
 8009ecc:	4401      	add	r1, r0
 8009ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d11e      	bne.n	8009f1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	0151      	lsls	r1, r2, #5
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	440a      	add	r2, r1
 8009f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e097      	b.n	800a04a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 8083 	beq.w	800a04a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	f003 030f 	and.w	r3, r3, #15
 8009f54:	2101      	movs	r1, #1
 8009f56:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5a:	6979      	ldr	r1, [r7, #20]
 8009f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f60:	4313      	orrs	r3, r2
 8009f62:	634b      	str	r3, [r1, #52]	; 0x34
 8009f64:	e071      	b.n	800a04a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f80:	0cdb      	lsrs	r3, r3, #19
 8009f82:	04db      	lsls	r3, r3, #19
 8009f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ff8:	6939      	ldr	r1, [r7, #16]
 8009ffa:	0148      	lsls	r0, r1, #5
 8009ffc:	6979      	ldr	r1, [r7, #20]
 8009ffe:	4401      	add	r1, r0
 800a000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a004:	4313      	orrs	r3, r2
 800a006:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d10d      	bne.n	800a02a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6919      	ldr	r1, [r3, #16]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a026:	460a      	mov	r2, r1
 800a028:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	0151      	lsls	r1, r2, #5
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	440a      	add	r2, r1
 800a040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a044:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d14a      	bne.n	800a10c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a08a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a08e:	f040 8086 	bne.w	800a19e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	7812      	ldrb	r2, [r2, #0]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	7812      	ldrb	r2, [r2, #0]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d902      	bls.n	800a0f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ee:	e056      	b.n	800a19e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a108:	d0e7      	beq.n	800a0da <USB_EPStopXfer+0x82>
 800a10a:	e048      	b.n	800a19e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a124:	d13b      	bne.n	800a19e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	7812      	ldrb	r2, [r2, #0]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a148:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a16c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f242 7210 	movw	r2, #10000	; 0x2710
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d902      	bls.n	800a184 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
          break;
 800a182:	e00c      	b.n	800a19e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a19c:	d0e7      	beq.n	800a16e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	371c      	adds	r7, #28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b089      	sub	sp, #36	; 0x24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	71fb      	strb	r3, [r7, #7]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d123      	bne.n	800a21a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1d2:	88bb      	ldrh	r3, [r7, #4]
 800a1d4:	3303      	adds	r3, #3
 800a1d6:	089b      	lsrs	r3, r3, #2
 800a1d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	e018      	b.n	800a212 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	031a      	lsls	r2, r3, #12
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	3301      	adds	r3, #1
 800a204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	3301      	adds	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	3301      	adds	r3, #1
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d3e2      	bcc.n	800a1e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3724      	adds	r7, #36	; 0x24
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a228:	b480      	push	{r7}
 800a22a:	b08b      	sub	sp, #44	; 0x2c
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	4613      	mov	r3, r2
 800a234:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	089b      	lsrs	r3, r3, #2
 800a242:	b29b      	uxth	r3, r3
 800a244:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a24e:	2300      	movs	r3, #0
 800a250:	623b      	str	r3, [r7, #32]
 800a252:	e014      	b.n	800a27e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	3301      	adds	r3, #1
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	3301      	adds	r3, #1
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	3301      	adds	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	3301      	adds	r3, #1
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	3301      	adds	r3, #1
 800a27c:	623b      	str	r3, [r7, #32]
 800a27e:	6a3a      	ldr	r2, [r7, #32]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	429a      	cmp	r2, r3
 800a284:	d3e6      	bcc.n	800a254 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a286:	8bfb      	ldrh	r3, [r7, #30]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a296:	461a      	mov	r2, r3
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	701a      	strb	r2, [r3, #0]
      i++;
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2be:	8bfb      	ldrh	r3, [r7, #30]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2c4:	8bfb      	ldrh	r3, [r7, #30]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1ea      	bne.n	800a2a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	372c      	adds	r7, #44	; 0x2c
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d12c      	bne.n	800a34e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	db12      	blt.n	800a32c <USB_EPSetStall+0x54>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00f      	beq.n	800a32c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	440a      	add	r2, r1
 800a322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a32a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	0151      	lsls	r1, r2, #5
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	440a      	add	r2, r1
 800a342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	e02b      	b.n	800a3a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	db12      	blt.n	800a386 <USB_EPSetStall+0xae>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00f      	beq.n	800a386 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a384:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	0151      	lsls	r1, r2, #5
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	440a      	add	r2, r1
 800a39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d128      	bne.n	800a422 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	791b      	ldrb	r3, [r3, #4]
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d003      	beq.n	800a400 <USB_EPClearStall+0x4c>
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	791b      	ldrb	r3, [r3, #4]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d138      	bne.n	800a472 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	0151      	lsls	r1, r2, #5
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	440a      	add	r2, r1
 800a416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a41a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	e027      	b.n	800a472 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	0151      	lsls	r1, r2, #5
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	440a      	add	r2, r1
 800a438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a43c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a440:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	791b      	ldrb	r3, [r3, #4]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d003      	beq.n	800a452 <USB_EPClearStall+0x9e>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	791b      	ldrb	r3, [r3, #4]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d10f      	bne.n	800a472 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a470:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a49e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4b4:	68f9      	ldr	r1, [r7, #12]
 800a4b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4fa:	f023 0302 	bic.w	r3, r3, #2
 800a4fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a528:	f023 0303 	bic.w	r3, r3, #3
 800a52c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a53c:	f043 0302 	orr.w	r3, r3, #2
 800a540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	4013      	ands	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a568:	68fb      	ldr	r3, [r7, #12]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a576:	b480      	push	{r7}
 800a578:	b085      	sub	sp, #20
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	4013      	ands	r3, r2
 800a598:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	0c1b      	lsrs	r3, r3, #16
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	b29b      	uxth	r3, r3
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4013      	ands	r3, r2
 800a60a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a60c:	68bb      	ldr	r3, [r7, #8]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	f003 030f 	and.w	r3, r3, #15
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	fa22 f303 	lsr.w	r3, r2, r3
 800a64a:	01db      	lsls	r3, r3, #7
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	4013      	ands	r3, r2
 800a666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a668:	68bb      	ldr	r3, [r7, #8]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f003 0301 	and.w	r3, r3, #1
}
 800a686:	4618      	mov	r0, r3
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	333c      	adds	r3, #60	; 0x3c
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	; (800a790 <USB_EP0_OutStart+0xb8>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d90a      	bls.n	800a712 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a70c:	d101      	bne.n	800a712 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	e037      	b.n	800a782 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	461a      	mov	r2, r3
 800a71a:	2300      	movs	r3, #0
 800a71c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a740:	f043 0318 	orr.w	r3, r3, #24
 800a744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a754:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a758:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d10f      	bne.n	800a780 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	461a      	mov	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a77a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a77e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	4f54300a 	.word	0x4f54300a

0800a794 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <USB_CoreReset+0x64>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d901      	bls.n	800a7b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e01b      	b.n	800a7ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	daf2      	bge.n	800a7a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f043 0201 	orr.w	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <USB_CoreReset+0x64>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d901      	bls.n	800a7dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e006      	b.n	800a7ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d0f0      	beq.n	800a7ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	00030d40 	.word	0x00030d40

0800a7fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a800:	2200      	movs	r2, #0
 800a802:	4912      	ldr	r1, [pc, #72]	; (800a84c <MX_USB_DEVICE_Init+0x50>)
 800a804:	4812      	ldr	r0, [pc, #72]	; (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a806:	f7f7 f8e1 	bl	80019cc <USBD_Init>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a810:	f005 fef0 	bl	80105f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a814:	490f      	ldr	r1, [pc, #60]	; (800a854 <MX_USB_DEVICE_Init+0x58>)
 800a816:	480e      	ldr	r0, [pc, #56]	; (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a818:	f7f7 f908 	bl	8001a2c <USBD_RegisterClass>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a822:	f005 fee7 	bl	80105f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a826:	490c      	ldr	r1, [pc, #48]	; (800a858 <MX_USB_DEVICE_Init+0x5c>)
 800a828:	4809      	ldr	r0, [pc, #36]	; (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a82a:	f7f6 fff9 	bl	8001820 <USBD_CDC_RegisterInterface>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a834:	f005 fede 	bl	80105f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a83a:	f7f7 f92d 	bl	8001a98 <USBD_Start>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a844:	f005 fed6 	bl	80105f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a848:	bf00      	nop
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	200000b4 	.word	0x200000b4
 800a850:	20000404 	.word	0x20000404
 800a854:	2000000c 	.word	0x2000000c
 800a858:	200000a0 	.word	0x200000a0

0800a85c <cdcAvailable>:
uint8_t  rx_buf[1024];
bool     rx_full = false;


uint32_t cdcAvailable(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <cdcAvailable+0x30>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <cdcAvailable+0x34>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	4a09      	ldr	r2, [pc, #36]	; (800a894 <cdcAvailable+0x38>)
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	fbb3 f1f2 	udiv	r1, r3, r2
 800a874:	fb01 f202 	mul.w	r2, r1, r2
 800a878:	1a9b      	subs	r3, r3, r2
 800a87a:	607b      	str	r3, [r7, #4]

  return ret;
 800a87c:	687b      	ldr	r3, [r7, #4]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	200006e0 	.word	0x200006e0
 800a890:	200006e4 	.word	0x200006e4
 800a894:	2000009c 	.word	0x2000009c

0800a898 <cdcRead>:

uint8_t cdcRead(void)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <cdcRead+0x44>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a0f      	ldr	r2, [pc, #60]	; (800a8e0 <cdcRead+0x48>)
 800a8a4:	5cd3      	ldrb	r3, [r2, r3]
 800a8a6:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <cdcRead+0x44>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <cdcRead+0x4c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d00b      	beq.n	800a8cc <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <cdcRead+0x44>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a0b      	ldr	r2, [pc, #44]	; (800a8e8 <cdcRead+0x50>)
 800a8bc:	6812      	ldr	r2, [r2, #0]
 800a8be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8c2:	fb01 f202 	mul.w	r2, r1, r2
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <cdcRead+0x44>)
 800a8ca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	200006e4 	.word	0x200006e4
 800a8e0:	200006e8 	.word	0x200006e8
 800a8e4:	200006e0 	.word	0x200006e0
 800a8e8:	2000009c 	.word	0x2000009c

0800a8ec <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 800a8f6:	4b0f      	ldr	r3, [pc, #60]	; (800a934 <cdcDataIn+0x48>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	490f      	ldr	r1, [pc, #60]	; (800a938 <cdcDataIn+0x4c>)
 800a8fc:	79fa      	ldrb	r2, [r7, #7]
 800a8fe:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <cdcDataIn+0x48>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a0d      	ldr	r2, [pc, #52]	; (800a93c <cdcDataIn+0x50>)
 800a908:	6812      	ldr	r2, [r2, #0]
 800a90a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a90e:	fb01 f202 	mul.w	r2, r1, r2
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <cdcDataIn+0x54>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d002      	beq.n	800a926 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 800a920:	4a04      	ldr	r2, [pc, #16]	; (800a934 <cdcDataIn+0x48>)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6013      	str	r3, [r2, #0]
  }
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	200006e0 	.word	0x200006e0
 800a938:	200006e8 	.word	0x200006e8
 800a93c:	2000009c 	.word	0x2000009c
 800a940:	200006e4 	.word	0x200006e4

0800a944 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 800a94e:	f000 fdc0 	bl	800b4d2 <millis>
 800a952:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	b29b      	uxth	r3, r3
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f94a 	bl	800abf4 <CDC_Transmit_FS>
 800a960:	4603      	mov	r3, r0
 800a962:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 800a964:	7afb      	ldrb	r3, [r7, #11]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <cdcWrite+0x2a>
    {
      return length;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	e00e      	b.n	800a98c <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 800a96e:	7afb      	ldrb	r3, [r7, #11]
 800a970:	2b03      	cmp	r3, #3
 800a972:	d101      	bne.n	800a978 <cdcWrite+0x34>
    {
      return 0;
 800a974:	2300      	movs	r3, #0
 800a976:	e009      	b.n	800a98c <cdcWrite+0x48>
    }

    if (millis()-pre_time >= 100)
 800a978:	f000 fdab 	bl	800b4d2 <millis>
 800a97c:	4602      	mov	r2, r0
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b63      	cmp	r3, #99	; 0x63
 800a984:	d800      	bhi.n	800a988 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800a986:	e7e5      	b.n	800a954 <cdcWrite+0x10>
    {
      break;
 800a988:	bf00      	nop
    }
  }

  return 0;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBD_CDC_SOF>:
{
  return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]

  if (rx_full == true)
 800a99c:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <USBD_CDC_SOF+0x3c>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d010      	beq.n	800a9c6 <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    buf_len = (rx_len - cdcAvailable()) - 1;
 800a9a4:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <USBD_CDC_SOF+0x40>)
 800a9a6:	681c      	ldr	r4, [r3, #0]
 800a9a8:	f7ff ff58 	bl	800a85c <cdcAvailable>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	1ae3      	subs	r3, r4, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	60fb      	str	r3, [r7, #12]

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b3f      	cmp	r3, #63	; 0x3f
 800a9b8:	d905      	bls.n	800a9c6 <USBD_CDC_SOF+0x32>
    {
      USBD_CDC_ReceivePacket(pdev);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7f6 ffd0 	bl	8001960 <USBD_CDC_ReceivePacket>
      rx_full = false;
 800a9c0:	4b03      	ldr	r3, [pc, #12]	; (800a9d0 <USBD_CDC_SOF+0x3c>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd90      	pop	{r4, r7, pc}
 800a9d0:	20000ae8 	.word	0x20000ae8
 800a9d4:	2000009c 	.word	0x2000009c

0800a9d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4905      	ldr	r1, [pc, #20]	; (800a9f4 <CDC_Init_FS+0x1c>)
 800a9e0:	4805      	ldr	r0, [pc, #20]	; (800a9f8 <CDC_Init_FS+0x20>)
 800a9e2:	f7f6 ff37 	bl	8001854 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9e6:	4905      	ldr	r1, [pc, #20]	; (800a9fc <CDC_Init_FS+0x24>)
 800a9e8:	4803      	ldr	r0, [pc, #12]	; (800a9f8 <CDC_Init_FS+0x20>)
 800a9ea:	f7f6 ff55 	bl	8001898 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20000eec 	.word	0x20000eec
 800a9f8:	20000404 	.word	0x20000404
 800a9fc:	20000aec 	.word	0x20000aec

0800aa00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b23      	cmp	r3, #35	; 0x23
 800aa24:	f200 80a3 	bhi.w	800ab6e <CDC_Control_FS+0x15e>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <CDC_Control_FS+0x20>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800ab6f 	.word	0x0800ab6f
 800aa34:	0800ab6f 	.word	0x0800ab6f
 800aa38:	0800ab6f 	.word	0x0800ab6f
 800aa3c:	0800ab6f 	.word	0x0800ab6f
 800aa40:	0800ab6f 	.word	0x0800ab6f
 800aa44:	0800ab6f 	.word	0x0800ab6f
 800aa48:	0800ab6f 	.word	0x0800ab6f
 800aa4c:	0800ab6f 	.word	0x0800ab6f
 800aa50:	0800ab6f 	.word	0x0800ab6f
 800aa54:	0800ab6f 	.word	0x0800ab6f
 800aa58:	0800ab6f 	.word	0x0800ab6f
 800aa5c:	0800ab6f 	.word	0x0800ab6f
 800aa60:	0800ab6f 	.word	0x0800ab6f
 800aa64:	0800ab6f 	.word	0x0800ab6f
 800aa68:	0800ab6f 	.word	0x0800ab6f
 800aa6c:	0800ab6f 	.word	0x0800ab6f
 800aa70:	0800ab6f 	.word	0x0800ab6f
 800aa74:	0800ab6f 	.word	0x0800ab6f
 800aa78:	0800ab6f 	.word	0x0800ab6f
 800aa7c:	0800ab6f 	.word	0x0800ab6f
 800aa80:	0800ab6f 	.word	0x0800ab6f
 800aa84:	0800ab6f 	.word	0x0800ab6f
 800aa88:	0800ab6f 	.word	0x0800ab6f
 800aa8c:	0800ab6f 	.word	0x0800ab6f
 800aa90:	0800ab6f 	.word	0x0800ab6f
 800aa94:	0800ab6f 	.word	0x0800ab6f
 800aa98:	0800ab6f 	.word	0x0800ab6f
 800aa9c:	0800ab6f 	.word	0x0800ab6f
 800aaa0:	0800ab6f 	.word	0x0800ab6f
 800aaa4:	0800ab6f 	.word	0x0800ab6f
 800aaa8:	0800ab6f 	.word	0x0800ab6f
 800aaac:	0800ab6f 	.word	0x0800ab6f
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800ab1b 	.word	0x0800ab1b
 800aab8:	0800ab6f 	.word	0x0800ab6f
 800aabc:	0800ab6f 	.word	0x0800ab6f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
 800aac6:	4b2e      	ldr	r3, [pc, #184]	; (800ab80 <CDC_Control_FS+0x170>)
 800aac8:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800aaca:	4b2d      	ldr	r3, [pc, #180]	; (800ab80 <CDC_Control_FS+0x170>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	3201      	adds	r2, #1
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	0212      	lsls	r2, r2, #8
 800aad6:	4313      	orrs	r3, r2
 800aad8:	4a29      	ldr	r2, [pc, #164]	; (800ab80 <CDC_Control_FS+0x170>)
 800aada:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800aadc:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <CDC_Control_FS+0x170>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	3202      	adds	r2, #2
 800aae4:	7812      	ldrb	r2, [r2, #0]
 800aae6:	0412      	lsls	r2, r2, #16
 800aae8:	4313      	orrs	r3, r2
 800aaea:	4a25      	ldr	r2, [pc, #148]	; (800ab80 <CDC_Control_FS+0x170>)
 800aaec:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <CDC_Control_FS+0x170>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	3203      	adds	r2, #3
 800aaf6:	7812      	ldrb	r2, [r2, #0]
 800aaf8:	0612      	lsls	r2, r2, #24
 800aafa:	4313      	orrs	r3, r2
 800aafc:	4a20      	ldr	r2, [pc, #128]	; (800ab80 <CDC_Control_FS+0x170>)
 800aafe:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	791a      	ldrb	r2, [r3, #4]
 800ab04:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab06:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	795a      	ldrb	r2, [r3, #5]
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab0e:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	799a      	ldrb	r2, [r3, #6]
 800ab14:	4b1a      	ldr	r3, [pc, #104]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab16:	719a      	strb	r2, [r3, #6]
    break;
 800ab18:	e02a      	b.n	800ab70 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ab1a:	4b19      	ldr	r3, [pc, #100]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800ab24:	4b16      	ldr	r3, [pc, #88]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	0a1a      	lsrs	r2, r3, #8
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	b2d2      	uxtb	r2, r2
 800ab30:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800ab32:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	0c1a      	lsrs	r2, r3, #16
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	0e1a      	lsrs	r2, r3, #24
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	3303      	adds	r3, #3
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4a0b      	ldr	r2, [pc, #44]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab54:	7912      	ldrb	r2, [r2, #4]
 800ab56:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	3305      	adds	r3, #5
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab5e:	7952      	ldrb	r2, [r2, #5]
 800ab60:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	3306      	adds	r3, #6
 800ab66:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <CDC_Control_FS+0x170>)
 800ab68:	7992      	ldrb	r2, [r2, #6]
 800ab6a:	701a      	strb	r2, [r3, #0]

    break;
 800ab6c:	e000      	b.n	800ab70 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab6e:	bf00      	nop
  }

  return (USBD_OK);
 800ab70:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20000094 	.word	0x20000094

0800ab84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i=0; i<*Len; i++)
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e009      	b.n	800aba8 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4413      	add	r3, r2
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fea5 	bl	800a8ec <cdcDataIn>
  for (int i=0; i<*Len; i++)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d8f0      	bhi.n	800ab94 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  buf_len = (rx_len - cdcAvailable()) - 1;
 800abb2:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <CDC_Receive_FS+0x64>)
 800abb4:	681c      	ldr	r4, [r3, #0]
 800abb6:	f7ff fe51 	bl	800a85c <cdcAvailable>
 800abba:	4603      	mov	r3, r0
 800abbc:	1ae3      	subs	r3, r4, r3
 800abbe:	3b01      	subs	r3, #1
 800abc0:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b3f      	cmp	r3, #63	; 0x3f
 800abc6:	d907      	bls.n	800abd8 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	4808      	ldr	r0, [pc, #32]	; (800abec <CDC_Receive_FS+0x68>)
 800abcc:	f7f6 fe64 	bl	8001898 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800abd0:	4806      	ldr	r0, [pc, #24]	; (800abec <CDC_Receive_FS+0x68>)
 800abd2:	f7f6 fec5 	bl	8001960 <USBD_CDC_ReceivePacket>
 800abd6:	e002      	b.n	800abde <CDC_Receive_FS+0x5a>
  }
  else
  {
    rx_full = true;
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <CDC_Receive_FS+0x6c>)
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]
  }
  return (USBD_OK);
 800abde:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd90      	pop	{r4, r7, pc}
 800abe8:	2000009c 	.word	0x2000009c
 800abec:	20000404 	.word	0x20000404
 800abf0:	20000ae8 	.word	0x20000ae8

0800abf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac04:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <CDC_Transmit_FS+0x48>)
 800ac06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e00b      	b.n	800ac32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac1a:	887b      	ldrh	r3, [r7, #2]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4806      	ldr	r0, [pc, #24]	; (800ac3c <CDC_Transmit_FS+0x48>)
 800ac22:	f7f6 fe17 	bl	8001854 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <CDC_Transmit_FS+0x48>)
 800ac28:	f7f6 fe54 	bl	80018d4 <USBD_CDC_TransmitPacket>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000404 	.word	0x20000404

0800ac40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
	...

0800ac64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2212      	movs	r2, #18
 800ac74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac76:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	200000d0 	.word	0x200000d0

0800ac88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2204      	movs	r2, #4
 800ac98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac9a:	4b03      	ldr	r3, [pc, #12]	; (800aca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	200000e4 	.word	0x200000e4

0800acac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	4907      	ldr	r1, [pc, #28]	; (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
 800acc2:	4808      	ldr	r0, [pc, #32]	; (800ace4 <USBD_FS_ProductStrDescriptor+0x38>)
 800acc4:	f7f8 f89c 	bl	8002e00 <USBD_GetString>
 800acc8:	e004      	b.n	800acd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	4904      	ldr	r1, [pc, #16]	; (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
 800acce:	4805      	ldr	r0, [pc, #20]	; (800ace4 <USBD_FS_ProductStrDescriptor+0x38>)
 800acd0:	f7f8 f896 	bl	8002e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200012ec 	.word	0x200012ec
 800ace4:	08013880 	.word	0x08013880

0800ace8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	4904      	ldr	r1, [pc, #16]	; (800ad08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acf8:	4804      	ldr	r0, [pc, #16]	; (800ad0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acfa:	f7f8 f881 	bl	8002e00 <USBD_GetString>
  return USBD_StrDesc;
 800acfe:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200012ec 	.word	0x200012ec
 800ad0c:	08013898 	.word	0x08013898

0800ad10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	221a      	movs	r2, #26
 800ad20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad22:	f000 f843 	bl	800adac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad26:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	200000e8 	.word	0x200000e8

0800ad34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	4907      	ldr	r1, [pc, #28]	; (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad4a:	4808      	ldr	r0, [pc, #32]	; (800ad6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad4c:	f7f8 f858 	bl	8002e00 <USBD_GetString>
 800ad50:	e004      	b.n	800ad5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad56:	4805      	ldr	r0, [pc, #20]	; (800ad6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad58:	f7f8 f852 	bl	8002e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200012ec 	.word	0x200012ec
 800ad6c:	080138ac 	.word	0x080138ac

0800ad70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4907      	ldr	r1, [pc, #28]	; (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad86:	4808      	ldr	r0, [pc, #32]	; (800ada8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad88:	f7f8 f83a 	bl	8002e00 <USBD_GetString>
 800ad8c:	e004      	b.n	800ad98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	4904      	ldr	r1, [pc, #16]	; (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad92:	4805      	ldr	r0, [pc, #20]	; (800ada8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad94:	f7f8 f834 	bl	8002e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200012ec 	.word	0x200012ec
 800ada8:	080138b8 	.word	0x080138b8

0800adac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <Get_SerialNum+0x44>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800adb8:	4b0e      	ldr	r3, [pc, #56]	; (800adf4 <Get_SerialNum+0x48>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adbe:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <Get_SerialNum+0x4c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800add2:	2208      	movs	r2, #8
 800add4:	4909      	ldr	r1, [pc, #36]	; (800adfc <Get_SerialNum+0x50>)
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f814 	bl	800ae04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800addc:	2204      	movs	r2, #4
 800adde:	4908      	ldr	r1, [pc, #32]	; (800ae00 <Get_SerialNum+0x54>)
 800ade0:	68b8      	ldr	r0, [r7, #8]
 800ade2:	f000 f80f 	bl	800ae04 <IntToUnicode>
  }
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	1fff7a10 	.word	0x1fff7a10
 800adf4:	1fff7a14 	.word	0x1fff7a14
 800adf8:	1fff7a18 	.word	0x1fff7a18
 800adfc:	200000ea 	.word	0x200000ea
 800ae00:	200000fa 	.word	0x200000fa

0800ae04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
 800ae1a:	e027      	b.n	800ae6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	0f1b      	lsrs	r3, r3, #28
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	d80b      	bhi.n	800ae3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	0f1b      	lsrs	r3, r3, #28
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	4619      	mov	r1, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	440b      	add	r3, r1
 800ae34:	3230      	adds	r2, #48	; 0x30
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e00a      	b.n	800ae52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	0f1b      	lsrs	r3, r3, #28
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	4619      	mov	r1, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3237      	adds	r2, #55	; 0x37
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
 800ae6c:	7dfa      	ldrb	r2, [r7, #23]
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3d3      	bcc.n	800ae1c <IntToUnicode+0x18>
  }
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
	...

0800ae84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae8c:	f107 0314 	add.w	r3, r7, #20
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	605a      	str	r2, [r3, #4]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aea4:	d13a      	bne.n	800af1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aea6:	2300      	movs	r3, #0
 800aea8:	613b      	str	r3, [r7, #16]
 800aeaa:	4b1e      	ldr	r3, [pc, #120]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeae:	4a1d      	ldr	r2, [pc, #116]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aeb0:	f043 0301 	orr.w	r3, r3, #1
 800aeb4:	6313      	str	r3, [r2, #48]	; 0x30
 800aeb6:	4b1b      	ldr	r3, [pc, #108]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec8:	2302      	movs	r3, #2
 800aeca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aed0:	2303      	movs	r3, #3
 800aed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aed4:	230a      	movs	r3, #10
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aed8:	f107 0314 	add.w	r3, r7, #20
 800aedc:	4619      	mov	r1, r3
 800aede:	4812      	ldr	r0, [pc, #72]	; (800af28 <HAL_PCD_MspInit+0xa4>)
 800aee0:	f7f9 f8f0 	bl	80040c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aee4:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee8:	4a0e      	ldr	r2, [pc, #56]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aeea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeee:	6353      	str	r3, [r2, #52]	; 0x34
 800aef0:	2300      	movs	r3, #0
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef8:	4a0a      	ldr	r2, [pc, #40]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800aefa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aefe:	6453      	str	r3, [r2, #68]	; 0x44
 800af00:	4b08      	ldr	r3, [pc, #32]	; (800af24 <HAL_PCD_MspInit+0xa0>)
 800af02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af0c:	2200      	movs	r2, #0
 800af0e:	2100      	movs	r1, #0
 800af10:	2043      	movs	r0, #67	; 0x43
 800af12:	f7f8 f9c6 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af16:	2043      	movs	r0, #67	; 0x43
 800af18:	f7f8 f9df 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af1c:	bf00      	nop
 800af1e:	3728      	adds	r7, #40	; 0x28
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	40023800 	.word	0x40023800
 800af28:	40020000 	.word	0x40020000

0800af2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7f6 fdf5 	bl	8001b32 <USBD_LL_SetupStage>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	4619      	mov	r1, r3
 800af7a:	f7f6 fe2f 	bl	8001bdc <USBD_LL_DataOutStage>
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	460b      	mov	r3, r1
 800af90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af98:	78fa      	ldrb	r2, [r7, #3]
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4613      	mov	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	334c      	adds	r3, #76	; 0x4c
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	4619      	mov	r1, r3
 800afae:	f7f6 fecc 	bl	8001d4a <USBD_LL_DataInStage>
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afc8:	4618      	mov	r0, r3
 800afca:	f7f7 f800 	bl	8001fce <USBD_LL_SOF>
}
 800afce:	bf00      	nop
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800afde:	2301      	movs	r3, #1
 800afe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800afea:	2300      	movs	r3, #0
 800afec:	73fb      	strb	r3, [r7, #15]
 800afee:	e008      	b.n	800b002 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d102      	bne.n	800affe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e001      	b.n	800b002 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800affe:	f005 faf9 	bl	80105f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b008:	7bfa      	ldrb	r2, [r7, #15]
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7f6 ffa0 	bl	8001f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b018:	4618      	mov	r0, r3
 800b01a:	f7f6 ff48 	bl	8001eae <USBD_LL_Reset>
}
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b036:	4618      	mov	r0, r3
 800b038:	f7f6 ff9b 	bl	8001f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b04e:	f043 0301 	orr.w	r3, r3, #1
 800b052:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b05c:	4b04      	ldr	r3, [pc, #16]	; (800b070 <HAL_PCD_SuspendCallback+0x48>)
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	4a03      	ldr	r2, [pc, #12]	; (800b070 <HAL_PCD_SuspendCallback+0x48>)
 800b062:	f043 0306 	orr.w	r3, r3, #6
 800b066:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b068:	bf00      	nop
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	e000ed00 	.word	0xe000ed00

0800b074 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b082:	4618      	mov	r0, r3
 800b084:	f7f6 ff8b 	bl	8001f9e <USBD_LL_Resume>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f6 ffe3 	bl	8002072 <USBD_LL_IsoOUTIncomplete>
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0c6:	78fa      	ldrb	r2, [r7, #3]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f6 ff9f 	bl	800200e <USBD_LL_IsoINIncomplete>
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f6 fff5 	bl	80020d6 <USBD_LL_DevConnected>
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b102:	4618      	mov	r0, r3
 800b104:	f7f6 fff2 	bl	80020ec <USBD_LL_DevDisconnected>
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d13c      	bne.n	800b19a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b120:	4a20      	ldr	r2, [pc, #128]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b12c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b130:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b132:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b136:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b138:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b13a:	2204      	movs	r2, #4
 800b13c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b13e:	4b19      	ldr	r3, [pc, #100]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b140:	2202      	movs	r2, #2
 800b142:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b144:	4b17      	ldr	r3, [pc, #92]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b146:	2200      	movs	r2, #0
 800b148:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b14a:	4b16      	ldr	r3, [pc, #88]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b14c:	2202      	movs	r2, #2
 800b14e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b150:	4b14      	ldr	r3, [pc, #80]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b152:	2201      	movs	r2, #1
 800b154:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b156:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b158:	2200      	movs	r2, #0
 800b15a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b15c:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b15e:	2200      	movs	r2, #0
 800b160:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b162:	4b10      	ldr	r3, [pc, #64]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b164:	2200      	movs	r2, #0
 800b166:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b168:	4b0e      	ldr	r3, [pc, #56]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b16e:	480d      	ldr	r0, [pc, #52]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b170:	f7f9 f975 	bl	800445e <HAL_PCD_Init>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b17a:	f005 fa3b 	bl	80105f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b17e:	2180      	movs	r1, #128	; 0x80
 800b180:	4808      	ldr	r0, [pc, #32]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b182:	f7fa fbcc 	bl	800591e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b186:	2240      	movs	r2, #64	; 0x40
 800b188:	2100      	movs	r1, #0
 800b18a:	4806      	ldr	r0, [pc, #24]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b18c:	f7fa fb80 	bl	8005890 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b190:	2280      	movs	r2, #128	; 0x80
 800b192:	2101      	movs	r1, #1
 800b194:	4803      	ldr	r0, [pc, #12]	; (800b1a4 <USBD_LL_Init+0x94>)
 800b196:	f7fa fb7b 	bl	8005890 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	200014ec 	.word	0x200014ec

0800b1a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7f9 fa6a 	bl	8004698 <HAL_PCD_Start>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f942 	bl	800b454 <USBD_Get_USB_Status>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	70fb      	strb	r3, [r7, #3]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70bb      	strb	r3, [r7, #2]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b206:	78bb      	ldrb	r3, [r7, #2]
 800b208:	883a      	ldrh	r2, [r7, #0]
 800b20a:	78f9      	ldrb	r1, [r7, #3]
 800b20c:	f7f9 ff3b 	bl	8005086 <HAL_PCD_EP_Open>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f91c 	bl	800b454 <USBD_Get_USB_Status>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b220:	7bbb      	ldrb	r3, [r7, #14]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b244:	78fa      	ldrb	r2, [r7, #3]
 800b246:	4611      	mov	r1, r2
 800b248:	4618      	mov	r0, r3
 800b24a:	f7f9 ff84 	bl	8005156 <HAL_PCD_EP_Close>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 f8fd 	bl	800b454 <USBD_Get_USB_Status>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b282:	78fa      	ldrb	r2, [r7, #3]
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f7fa f85c 	bl	8005344 <HAL_PCD_EP_SetStall>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	4618      	mov	r0, r3
 800b294:	f000 f8de 	bl	800b454 <USBD_Get_USB_Status>
 800b298:	4603      	mov	r3, r0
 800b29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2c0:	78fa      	ldrb	r2, [r7, #3]
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa f8a1 	bl	800540c <HAL_PCD_EP_ClrStall>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f8bf 	bl	800b454 <USBD_Get_USB_Status>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b2f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da0b      	bge.n	800b318 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b306:	68f9      	ldr	r1, [r7, #12]
 800b308:	4613      	mov	r3, r2
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	4413      	add	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	440b      	add	r3, r1
 800b312:	333e      	adds	r3, #62	; 0x3e
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	e00b      	b.n	800b330 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	4613      	mov	r3, r2
 800b322:	00db      	lsls	r3, r3, #3
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	440b      	add	r3, r1
 800b32a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b32e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f9 fe6e 	bl	800503c <HAL_PCD_SetAddress>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f874 	bl	800b454 <USBD_Get_USB_Status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b370:	7bbb      	ldrb	r3, [r7, #14]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
 800b386:	460b      	mov	r3, r1
 800b388:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b398:	7af9      	ldrb	r1, [r7, #11]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	f7f9 ff87 	bl	80052b0 <HAL_PCD_EP_Transmit>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 f853 	bl	800b454 <USBD_Get_USB_Status>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3da:	7af9      	ldrb	r1, [r7, #11]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	f7f9 ff03 	bl	80051ea <HAL_PCD_EP_Receive>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f832 	bl	800b454 <USBD_Get_USB_Status>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b410:	78fa      	ldrb	r2, [r7, #3]
 800b412:	4611      	mov	r1, r2
 800b414:	4618      	mov	r0, r3
 800b416:	f7f9 ff33 	bl	8005280 <HAL_PCD_EP_GetRxCount>
 800b41a:	4603      	mov	r3, r0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b42c:	4b03      	ldr	r3, [pc, #12]	; (800b43c <USBD_static_malloc+0x18>)
}
 800b42e:	4618      	mov	r0, r3
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	200019f8 	.word	0x200019f8

0800b440 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]

}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	2b03      	cmp	r3, #3
 800b466:	d817      	bhi.n	800b498 <USBD_Get_USB_Status+0x44>
 800b468:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <USBD_Get_USB_Status+0x1c>)
 800b46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46e:	bf00      	nop
 800b470:	0800b481 	.word	0x0800b481
 800b474:	0800b487 	.word	0x0800b487
 800b478:	0800b48d 	.word	0x0800b48d
 800b47c:	0800b493 	.word	0x0800b493
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
    break;
 800b484:	e00b      	b.n	800b49e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b486:	2303      	movs	r3, #3
 800b488:	73fb      	strb	r3, [r7, #15]
    break;
 800b48a:	e008      	b.n	800b49e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b48c:	2301      	movs	r3, #1
 800b48e:	73fb      	strb	r3, [r7, #15]
    break;
 800b490:	e005      	b.n	800b49e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b492:	2303      	movs	r3, #3
 800b494:	73fb      	strb	r3, [r7, #15]
    break;
 800b496:	e002      	b.n	800b49e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	73fb      	strb	r3, [r7, #15]
    break;
 800b49c:	bf00      	nop
  }
  return usb_status;
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <delay>:
{
    return micros * usTicks;
}

void delay(uint32_t ms)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
    while (ms--)
 800b4b4:	e003      	b.n	800b4be <delay+0x12>
        delayMicroseconds(1000);
 800b4b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b4ba:	f000 f81d 	bl	800b4f8 <delayMicroseconds>
    while (ms--)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	1e5a      	subs	r2, r3, #1
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1f6      	bne.n	800b4b6 <delay+0xa>
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <millis>:

uint32_t millis(void)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b4d6:	f7f7 fdd9 	bl	800308c <HAL_GetTick>
 800b4da:	4603      	mov	r3, r0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <micros>:

// Return system uptime in microseconds (rollover in 70minutes)

uint32_t micros(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
//	do {
//		ms = sysTickUptime;
//		cycle_cnt = SysTick->VAL;
//	} while (ms != sysTickUptime);
//	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks; //168
	return htim5.Instance->CNT;
 800b4e4:	4b03      	ldr	r3, [pc, #12]	; (800b4f4 <micros+0x14>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	200028f4 	.word	0x200028f4

0800b4f8 <delayMicroseconds>:

void delayMicroseconds(uint32_t us)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
    uint32_t now = micros();
 800b500:	f7ff ffee 	bl	800b4e0 <micros>
 800b504:	60f8      	str	r0, [r7, #12]
    while (micros() - now < us);
 800b506:	bf00      	nop
 800b508:	f7ff ffea 	bl	800b4e0 <micros>
 800b50c:	4602      	mov	r2, r0
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d8f7      	bhi.n	800b508 <delayMicroseconds+0x10>
}
 800b518:	bf00      	nop
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <__io_putchar>:

int __io_putchar(int ch)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 800b52a:	1d3b      	adds	r3, r7, #4
 800b52c:	2201      	movs	r2, #1
 800b52e:	4619      	mov	r1, r3
 800b530:	2001      	movs	r0, #1
 800b532:	f004 fdbb 	bl	80100ac <uartWrite>
  return 1;
 800b536:	2301      	movs	r3, #1
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b546:	2300      	movs	r3, #0
 800b548:	607b      	str	r3, [r7, #4]
 800b54a:	4b10      	ldr	r3, [pc, #64]	; (800b58c <HAL_MspInit+0x4c>)
 800b54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54e:	4a0f      	ldr	r2, [pc, #60]	; (800b58c <HAL_MspInit+0x4c>)
 800b550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b554:	6453      	str	r3, [r2, #68]	; 0x44
 800b556:	4b0d      	ldr	r3, [pc, #52]	; (800b58c <HAL_MspInit+0x4c>)
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b55e:	607b      	str	r3, [r7, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b562:	2300      	movs	r3, #0
 800b564:	603b      	str	r3, [r7, #0]
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <HAL_MspInit+0x4c>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	4a08      	ldr	r2, [pc, #32]	; (800b58c <HAL_MspInit+0x4c>)
 800b56c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b570:	6413      	str	r3, [r2, #64]	; 0x40
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <HAL_MspInit+0x4c>)
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	40023800 	.word	0x40023800

0800b590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b594:	e7fe      	b.n	800b594 <NMI_Handler+0x4>

0800b596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b596:	b480      	push	{r7}
 800b598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b59a:	e7fe      	b.n	800b59a <HardFault_Handler+0x4>

0800b59c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b5a0:	e7fe      	b.n	800b5a0 <MemManage_Handler+0x4>

0800b5a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b5a6:	e7fe      	b.n	800b5a6 <BusFault_Handler+0x4>

0800b5a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5ac:	e7fe      	b.n	800b5ac <UsageFault_Handler+0x4>

0800b5ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b5b2:	bf00      	nop
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b5c0:	bf00      	nop
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b5ce:	bf00      	nop
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b5dc:	f7f7 fd42 	bl	8003064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b5e0:	bf00      	nop
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b5e8:	4802      	ldr	r0, [pc, #8]	; (800b5f4 <DMA1_Stream1_IRQHandler+0x10>)
 800b5ea:	f7f8 f829 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b5ee:	bf00      	nop
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20002aa0 	.word	0x20002aa0

0800b5f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800b5fc:	4802      	ldr	r0, [pc, #8]	; (800b608 <DMA1_Stream3_IRQHandler+0x10>)
 800b5fe:	f7f8 f81f 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b602:	bf00      	nop
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20002a40 	.word	0x20002a40

0800b60c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b610:	4802      	ldr	r0, [pc, #8]	; (800b61c <SPI1_IRQHandler+0x10>)
 800b612:	f7fb fb67 	bl	8006ce4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b616:	bf00      	nop
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200027dc 	.word	0x200027dc

0800b620 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b624:	4802      	ldr	r0, [pc, #8]	; (800b630 <USART3_IRQHandler+0x10>)
 800b626:	f7fc fbb5 	bl	8007d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b62a:	bf00      	nop
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200029fc 	.word	0x200029fc

0800b634 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b638:	4802      	ldr	r0, [pc, #8]	; (800b644 <TIM5_IRQHandler+0x10>)
 800b63a:	f7fb fecf 	bl	80073dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b63e:	bf00      	nop
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	200028f4 	.word	0x200028f4

0800b648 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b64c:	4802      	ldr	r0, [pc, #8]	; (800b658 <DMA2_Stream0_IRQHandler+0x10>)
 800b64e:	f7f7 fff7 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b652:	bf00      	nop
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20002834 	.word	0x20002834

0800b65c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b660:	4802      	ldr	r0, [pc, #8]	; (800b66c <DMA2_Stream3_IRQHandler+0x10>)
 800b662:	f7f7 ffed 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b666:	bf00      	nop
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20002894 	.word	0x20002894

0800b670 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b674:	4802      	ldr	r0, [pc, #8]	; (800b680 <OTG_FS_IRQHandler+0x10>)
 800b676:	f7f9 f842 	bl	80046fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b67a:	bf00      	nop
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200014ec 	.word	0x200014ec

0800b684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0
  return 1;
 800b688:	2301      	movs	r3, #1
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <_kill>:

int _kill(int pid, int sig)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b69e:	f006 f8fd 	bl	801189c <__errno>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2216      	movs	r2, #22
 800b6a6:	601a      	str	r2, [r3, #0]
  return -1;
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <_exit>:

void _exit (int status)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b6bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ffe7 	bl	800b694 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b6c6:	e7fe      	b.n	800b6c6 <_exit+0x12>

0800b6c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]
 800b6d8:	e00a      	b.n	800b6f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b6da:	f3af 8000 	nop.w
 800b6de:	4601      	mov	r1, r0
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	60ba      	str	r2, [r7, #8]
 800b6e6:	b2ca      	uxtb	r2, r1
 800b6e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	dbf0      	blt.n	800b6da <_read+0x12>
  }

  return len;
 800b6f8:	687b      	ldr	r3, [r7, #4]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	60b9      	str	r1, [r7, #8]
 800b70c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	e009      	b.n	800b728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	60ba      	str	r2, [r7, #8]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff00 	bl	800b522 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	3301      	adds	r3, #1
 800b726:	617b      	str	r3, [r7, #20]
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	dbf1      	blt.n	800b714 <_write+0x12>
  }
  return len;
 800b730:	687b      	ldr	r3, [r7, #4]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <_close>:

int _close(int file)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b742:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b762:	605a      	str	r2, [r3, #4]
  return 0;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <_isatty>:

int _isatty(int file)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b77a:	2301      	movs	r3, #1
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b7ac:	4a14      	ldr	r2, [pc, #80]	; (800b800 <_sbrk+0x5c>)
 800b7ae:	4b15      	ldr	r3, [pc, #84]	; (800b804 <_sbrk+0x60>)
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b7b8:	4b13      	ldr	r3, [pc, #76]	; (800b808 <_sbrk+0x64>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d102      	bne.n	800b7c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b7c0:	4b11      	ldr	r3, [pc, #68]	; (800b808 <_sbrk+0x64>)
 800b7c2:	4a12      	ldr	r2, [pc, #72]	; (800b80c <_sbrk+0x68>)
 800b7c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b7c6:	4b10      	ldr	r3, [pc, #64]	; (800b808 <_sbrk+0x64>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d207      	bcs.n	800b7e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b7d4:	f006 f862 	bl	801189c <__errno>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	220c      	movs	r2, #12
 800b7dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b7de:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e2:	e009      	b.n	800b7f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b7e4:	4b08      	ldr	r3, [pc, #32]	; (800b808 <_sbrk+0x64>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b7ea:	4b07      	ldr	r3, [pc, #28]	; (800b808 <_sbrk+0x64>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4a05      	ldr	r2, [pc, #20]	; (800b808 <_sbrk+0x64>)
 800b7f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20020000 	.word	0x20020000
 800b804:	00000400 	.word	0x00000400
 800b808:	20001c18 	.word	0x20001c18
 800b80c:	20002c58 	.word	0x20002c58

0800b810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b810:	b480      	push	{r7}
 800b812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <SystemInit+0x20>)
 800b816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b81a:	4a05      	ldr	r2, [pc, #20]	; (800b830 <SystemInit+0x20>)
 800b81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b824:	bf00      	nop
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	e000ed00 	.word	0xe000ed00

0800b834 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800b840:	2301      	movs	r3, #1
 800b842:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	611a      	str	r2, [r3, #16]

  return ret;
 800b862:	7dfb      	ldrb	r3, [r7, #23]
}
 800b864:	4618      	mov	r0, r3
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	; 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800b87c:	2301      	movs	r3, #1
 800b87e:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 800b880:	2300      	movs	r3, #0
 800b882:	61bb      	str	r3, [r7, #24]
 800b884:	e041      	b.n	800b90a <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d024      	beq.n	800b8d8 <qbufferRead+0x68>
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d021      	beq.n	800b8d8 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	691a      	ldr	r2, [r3, #16]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	68f9      	ldr	r1, [r7, #12]
 800b89e:	68c9      	ldr	r1, [r1, #12]
 800b8a0:	fb01 f303 	mul.w	r3, r1, r3
 800b8a4:	4413      	add	r3, r2
 800b8a6:	613b      	str	r3, [r7, #16]
      for (int j=0; j<p_node->size; j++)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e00a      	b.n	800b8c4 <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	441a      	add	r2, r3
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	68b9      	ldr	r1, [r7, #8]
 800b8b8:	440b      	add	r3, r1
 800b8ba:	7812      	ldrb	r2, [r2, #0]
 800b8bc:	701a      	strb	r2, [r3, #0]
      for (int j=0; j<p_node->size; j++)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68da      	ldr	r2, [r3, #12]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d8ef      	bhi.n	800b8ae <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d00c      	beq.n	800b8fe <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	6892      	ldr	r2, [r2, #8]
 800b8ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8f2:	fb01 f202 	mul.w	r2, r1, r2
 800b8f6:	1a9a      	subs	r2, r3, r2
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	605a      	str	r2, [r3, #4]
 800b8fc:	e002      	b.n	800b904 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800b8fe:	2300      	movs	r3, #0
 800b900:	77fb      	strb	r3, [r7, #31]
      break;
 800b902:	e006      	b.n	800b912 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	3301      	adds	r3, #1
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d8b9      	bhi.n	800b886 <qbufferRead+0x16>
    }
  }

  return ret;
 800b912:	7ffb      	ldrb	r3, [r7, #31]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3724      	adds	r7, #36	; 0x24
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	441a      	add	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	6892      	ldr	r2, [r2, #8]
 800b93c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b940:	fb01 f202 	mul.w	r2, r1, r2
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	60fb      	str	r3, [r7, #12]

  return ret;
 800b948:	68fb      	ldr	r3, [r7, #12]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	3306      	adds	r3, #6
 800b966:	2220      	movs	r2, #32
 800b968:	2100      	movs	r1, #0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f005 ff0a 	bl	8011784 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2200      	movs	r2, #0
 800b974:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <hanFontLoad+0x2e>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2b0a      	cmp	r3, #10
 800b984:	d107      	bne.n	800b996 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2204      	movs	r2, #4
 800b98a:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2201      	movs	r2, #1
 800b990:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 800b992:	2304      	movs	r3, #4
 800b994:	e03b      	b.n	800ba0e <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	b25b      	sxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da2b      	bge.n	800b9f8 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	041a      	lsls	r2, r3, #16
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	3202      	adds	r2, #2
 800b9b4:	7812      	ldrb	r2, [r2, #0]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4a16      	ldr	r2, [pc, #88]	; (800ba18 <hanFontLoad+0xc0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d30e      	bcc.n	800b9e0 <hanFontLoad+0x88>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4a15      	ldr	r2, [pc, #84]	; (800ba1c <hanFontLoad+0xc4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d80a      	bhi.n	800b9e0 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f91f 	bl	800bc1c <hanUniFontLoad>
 800b9de:	e009      	b.n	800b9f4 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f816 	bl	800ba20 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e00a      	b.n	800ba0e <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2201      	movs	r2, #1
 800ba02:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fa30 	bl	800be6c <hanEngFontLoad>
    return PHAN_ENG_CODE;
 800ba0c:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	00eab080 	.word	0x00eab080
 800ba1c:	00ed9fb0 	.word	0x00ed9fb0

0800ba20 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	b21a      	sxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3301      	adds	r3, #1
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	b21b      	sxth	r3, r3
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	b21b      	sxth	r3, r3
 800ba3e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 800ba40:	89bb      	ldrh	r3, [r7, #12]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 fa3c 	bl	800bec0 <hanCnvCodeWan2Johab>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 800ba4c:	89bb      	ldrh	r3, [r7, #12]
 800ba4e:	0a9b      	lsrs	r3, r3, #10
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	f003 031f 	and.w	r3, r3, #31
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	4b63      	ldr	r3, [pc, #396]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800ba5a:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 800ba5c:	89bb      	ldrh	r3, [r7, #12]
 800ba5e:	095b      	lsrs	r3, r3, #5
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	f003 031f 	and.w	r3, r3, #31
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	4b60      	ldr	r3, [pc, #384]	; (800bbec <hanWanFontLoad+0x1cc>)
 800ba6a:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 800ba6c:	89bb      	ldrh	r3, [r7, #12]
 800ba6e:	f003 031f 	and.w	r3, r3, #31
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	4b5e      	ldr	r3, [pc, #376]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800ba76:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 800ba78:	4b5b      	ldr	r3, [pc, #364]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	4b5d      	ldr	r3, [pc, #372]	; (800bbf4 <hanWanFontLoad+0x1d4>)
 800ba80:	5c9b      	ldrb	r3, [r3, r2]
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	4b58      	ldr	r3, [pc, #352]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800ba86:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 800ba88:	4b58      	ldr	r3, [pc, #352]	; (800bbec <hanWanFontLoad+0x1cc>)
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b5a      	ldr	r3, [pc, #360]	; (800bbf8 <hanWanFontLoad+0x1d8>)
 800ba90:	5c9b      	ldrb	r3, [r3, r2]
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	4b55      	ldr	r3, [pc, #340]	; (800bbec <hanWanFontLoad+0x1cc>)
 800ba96:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 800ba98:	4b55      	ldr	r3, [pc, #340]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4b57      	ldr	r3, [pc, #348]	; (800bbfc <hanWanFontLoad+0x1dc>)
 800baa0:	5c9b      	ldrb	r3, [r3, r2]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	4b52      	ldr	r3, [pc, #328]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800baa6:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800baa8:	4b51      	ldr	r3, [pc, #324]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d006      	beq.n	800babe <hanWanFontLoad+0x9e>
 800bab0:	4b4e      	ldr	r3, [pc, #312]	; (800bbec <hanWanFontLoad+0x1cc>)
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	4b52      	ldr	r3, [pc, #328]	; (800bc00 <hanWanFontLoad+0x1e0>)
 800bab8:	5c9b      	ldrb	r3, [r3, r2]
 800baba:	b29b      	uxth	r3, r3
 800babc:	e005      	b.n	800baca <hanWanFontLoad+0xaa>
 800babe:	4b4b      	ldr	r3, [pc, #300]	; (800bbec <hanWanFontLoad+0x1cc>)
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	4b4f      	ldr	r3, [pc, #316]	; (800bc04 <hanWanFontLoad+0x1e4>)
 800bac6:	5c9b      	ldrb	r3, [r3, r2]
 800bac8:	b29b      	uxth	r3, r3
 800baca:	4a4f      	ldr	r2, [pc, #316]	; (800bc08 <hanWanFontLoad+0x1e8>)
 800bacc:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800bace:	4b46      	ldr	r3, [pc, #280]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d009      	beq.n	800baea <hanWanFontLoad+0xca>
 800bad6:	4b44      	ldr	r3, [pc, #272]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d005      	beq.n	800baea <hanWanFontLoad+0xca>
 800bade:	4b42      	ldr	r3, [pc, #264]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b10      	cmp	r3, #16
 800bae4:	d001      	beq.n	800baea <hanWanFontLoad+0xca>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <hanWanFontLoad+0xcc>
 800baea:	2300      	movs	r3, #0
 800baec:	b29b      	uxth	r3, r3
 800baee:	4a40      	ldr	r2, [pc, #256]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800baf0:	8812      	ldrh	r2, [r2, #0]
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	d001      	beq.n	800bafa <hanWanFontLoad+0xda>
 800baf6:	2202      	movs	r2, #2
 800baf8:	e000      	b.n	800bafc <hanWanFontLoad+0xdc>
 800bafa:	2200      	movs	r2, #0
 800bafc:	4413      	add	r3, r2
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	4b42      	ldr	r3, [pc, #264]	; (800bc0c <hanWanFontLoad+0x1ec>)
 800bb02:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 800bb04:	4b39      	ldr	r3, [pc, #228]	; (800bbec <hanWanFontLoad+0x1cc>)
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4b41      	ldr	r3, [pc, #260]	; (800bc10 <hanWanFontLoad+0x1f0>)
 800bb0c:	5c9b      	ldrb	r3, [r3, r2]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	4b40      	ldr	r3, [pc, #256]	; (800bc14 <hanWanFontLoad+0x1f4>)
 800bb12:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 800bb14:	2300      	movs	r3, #0
 800bb16:	81fb      	strh	r3, [r7, #14]
 800bb18:	e035      	b.n	800bb86 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800bb1a:	4b3b      	ldr	r3, [pc, #236]	; (800bc08 <hanWanFontLoad+0x1e8>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4b2f      	ldr	r3, [pc, #188]	; (800bbe8 <hanWanFontLoad+0x1c8>)
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	441a      	add	r2, r3
 800bb30:	89fb      	ldrh	r3, [r7, #14]
 800bb32:	4939      	ldr	r1, [pc, #228]	; (800bc18 <hanWanFontLoad+0x1f8>)
 800bb34:	0152      	lsls	r2, r2, #5
 800bb36:	4413      	add	r3, r2
 800bb38:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bb3c:	89fb      	ldrh	r3, [r7, #14]
 800bb3e:	b2d1      	uxtb	r1, r2
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	4413      	add	r3, r2
 800bb44:	460a      	mov	r2, r1
 800bb46:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 800bb48:	89fb      	ldrh	r3, [r7, #14]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	7999      	ldrb	r1, [r3, #6]
 800bb50:	4b2e      	ldr	r3, [pc, #184]	; (800bc0c <hanWanFontLoad+0x1ec>)
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	461a      	mov	r2, r3
 800bb56:	2316      	movs	r3, #22
 800bb58:	fb02 f303 	mul.w	r3, r2, r3
 800bb5c:	33a0      	adds	r3, #160	; 0xa0
 800bb5e:	4a23      	ldr	r2, [pc, #140]	; (800bbec <hanWanFontLoad+0x1cc>)
 800bb60:	8812      	ldrh	r2, [r2, #0]
 800bb62:	441a      	add	r2, r3
 800bb64:	89fb      	ldrh	r3, [r7, #14]
 800bb66:	482c      	ldr	r0, [pc, #176]	; (800bc18 <hanWanFontLoad+0x1f8>)
 800bb68:	0152      	lsls	r2, r2, #5
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	89fb      	ldrh	r3, [r7, #14]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	b2d1      	uxtb	r1, r2
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	460a      	mov	r2, r1
 800bb7e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800bb80:	89fb      	ldrh	r3, [r7, #14]
 800bb82:	3301      	adds	r3, #1
 800bb84:	81fb      	strh	r3, [r7, #14]
 800bb86:	89fb      	ldrh	r3, [r7, #14]
 800bb88:	2b1f      	cmp	r3, #31
 800bb8a:	d9c6      	bls.n	800bb1a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 800bb8c:	4b18      	ldr	r3, [pc, #96]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d025      	beq.n	800bbe0 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800bb94:	2300      	movs	r3, #0
 800bb96:	81fb      	strh	r3, [r7, #14]
 800bb98:	e01f      	b.n	800bbda <hanWanFontLoad+0x1ba>
 800bb9a:	89fb      	ldrh	r3, [r7, #14]
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	4413      	add	r3, r2
 800bba0:	7999      	ldrb	r1, [r3, #6]
 800bba2:	4b1c      	ldr	r3, [pc, #112]	; (800bc14 <hanWanFontLoad+0x1f4>)
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	4613      	mov	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	1a9b      	subs	r3, r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	33f8      	adds	r3, #248	; 0xf8
 800bbb2:	4a0f      	ldr	r2, [pc, #60]	; (800bbf0 <hanWanFontLoad+0x1d0>)
 800bbb4:	8812      	ldrh	r2, [r2, #0]
 800bbb6:	441a      	add	r2, r3
 800bbb8:	89fb      	ldrh	r3, [r7, #14]
 800bbba:	4817      	ldr	r0, [pc, #92]	; (800bc18 <hanWanFontLoad+0x1f8>)
 800bbbc:	0152      	lsls	r2, r2, #5
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	89fb      	ldrh	r3, [r7, #14]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	b2d1      	uxtb	r1, r2
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	4413      	add	r3, r2
 800bbd0:	460a      	mov	r2, r1
 800bbd2:	719a      	strb	r2, [r3, #6]
 800bbd4:	89fb      	ldrh	r3, [r7, #14]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	81fb      	strh	r3, [r7, #14]
 800bbda:	89fb      	ldrh	r3, [r7, #14]
 800bbdc:	2b1f      	cmp	r3, #31
 800bbde:	d9dc      	bls.n	800bb9a <hanWanFontLoad+0x17a>
  }
}
 800bbe0:	bf00      	nop
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20001c1c 	.word	0x20001c1c
 800bbec:	20001c1e 	.word	0x20001c1e
 800bbf0:	20001c20 	.word	0x20001c20
 800bbf4:	08015514 	.word	0x08015514
 800bbf8:	08015534 	.word	0x08015534
 800bbfc:	08015554 	.word	0x08015554
 800bc00:	080155ec 	.word	0x080155ec
 800bc04:	080155d4 	.word	0x080155d4
 800bc08:	20001c22 	.word	0x20001c22
 800bc0c:	20001c24 	.word	0x20001c24
 800bc10:	08015604 	.word	0x08015604
 800bc14:	20001c26 	.word	0x20001c26
 800bc18:	08017b00 	.word	0x08017b00

0800bc1c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	031b      	lsls	r3, r3, #12
 800bc2c:	b21a      	sxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3301      	adds	r3, #1
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	019b      	lsls	r3, r3, #6
 800bc36:	b21b      	sxth	r3, r3
 800bc38:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800bc3c:	b21b      	sxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b21a      	sxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	3302      	adds	r3, #2
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	b21b      	sxth	r3, r3
 800bc4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc4e:	b21b      	sxth	r3, r3
 800bc50:	4313      	orrs	r3, r2
 800bc52:	b21b      	sxth	r3, r3
 800bc54:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 800bc56:	89bb      	ldrh	r3, [r7, #12]
 800bc58:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800bc5c:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800bc5e:	89ba      	ldrh	r2, [r7, #12]
 800bc60:	0893      	lsrs	r3, r2, #2
 800bc62:	4973      	ldr	r1, [pc, #460]	; (800be30 <hanUniFontLoad+0x214>)
 800bc64:	fba1 3103 	umull	r3, r1, r1, r3
 800bc68:	460b      	mov	r3, r1
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	1a5b      	subs	r3, r3, r1
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	4b6f      	ldr	r3, [pc, #444]	; (800be34 <hanUniFontLoad+0x218>)
 800bc76:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 800bc78:	89bb      	ldrh	r3, [r7, #12]
 800bc7a:	089b      	lsrs	r3, r3, #2
 800bc7c:	4a6c      	ldr	r2, [pc, #432]	; (800be30 <hanUniFontLoad+0x214>)
 800bc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc82:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 800bc84:	89b9      	ldrh	r1, [r7, #12]
 800bc86:	4b6c      	ldr	r3, [pc, #432]	; (800be38 <hanUniFontLoad+0x21c>)
 800bc88:	fba3 2301 	umull	r2, r3, r3, r1
 800bc8c:	1aca      	subs	r2, r1, r3
 800bc8e:	0852      	lsrs	r2, r2, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	091a      	lsrs	r2, r3, #4
 800bc94:	4613      	mov	r3, r2
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	4413      	add	r3, r2
 800bc9a:	00da      	lsls	r2, r3, #3
 800bc9c:	1ad2      	subs	r2, r2, r3
 800bc9e:	1a8b      	subs	r3, r1, r2
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	4b66      	ldr	r3, [pc, #408]	; (800be3c <hanUniFontLoad+0x220>)
 800bca4:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 800bca6:	89ba      	ldrh	r2, [r7, #12]
 800bca8:	4b63      	ldr	r3, [pc, #396]	; (800be38 <hanUniFontLoad+0x21c>)
 800bcaa:	fba3 1302 	umull	r1, r3, r3, r2
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	0852      	lsrs	r2, r2, #1
 800bcb2:	4413      	add	r3, r2
 800bcb4:	091b      	lsrs	r3, r3, #4
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	4b61      	ldr	r3, [pc, #388]	; (800be40 <hanUniFontLoad+0x224>)
 800bcba:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 800bcbc:	4b60      	ldr	r3, [pc, #384]	; (800be40 <hanUniFontLoad+0x224>)
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4b60      	ldr	r3, [pc, #384]	; (800be44 <hanUniFontLoad+0x228>)
 800bcc4:	5c9b      	ldrb	r3, [r3, r2]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	4b5d      	ldr	r3, [pc, #372]	; (800be40 <hanUniFontLoad+0x224>)
 800bcca:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 800bccc:	4b5b      	ldr	r3, [pc, #364]	; (800be3c <hanUniFontLoad+0x220>)
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b5d      	ldr	r3, [pc, #372]	; (800be48 <hanUniFontLoad+0x22c>)
 800bcd4:	5c9b      	ldrb	r3, [r3, r2]
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	4b58      	ldr	r3, [pc, #352]	; (800be3c <hanUniFontLoad+0x220>)
 800bcda:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800bcdc:	4b55      	ldr	r3, [pc, #340]	; (800be34 <hanUniFontLoad+0x218>)
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b5a      	ldr	r3, [pc, #360]	; (800be4c <hanUniFontLoad+0x230>)
 800bce4:	5c9b      	ldrb	r3, [r3, r2]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	4b52      	ldr	r3, [pc, #328]	; (800be34 <hanUniFontLoad+0x218>)
 800bcea:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800bcec:	4b51      	ldr	r3, [pc, #324]	; (800be34 <hanUniFontLoad+0x218>)
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d006      	beq.n	800bd02 <hanUniFontLoad+0xe6>
 800bcf4:	4b51      	ldr	r3, [pc, #324]	; (800be3c <hanUniFontLoad+0x220>)
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4b55      	ldr	r3, [pc, #340]	; (800be50 <hanUniFontLoad+0x234>)
 800bcfc:	5c9b      	ldrb	r3, [r3, r2]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	e005      	b.n	800bd0e <hanUniFontLoad+0xf2>
 800bd02:	4b4e      	ldr	r3, [pc, #312]	; (800be3c <hanUniFontLoad+0x220>)
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	4b52      	ldr	r3, [pc, #328]	; (800be54 <hanUniFontLoad+0x238>)
 800bd0a:	5c9b      	ldrb	r3, [r3, r2]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	4a52      	ldr	r2, [pc, #328]	; (800be58 <hanUniFontLoad+0x23c>)
 800bd10:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800bd12:	4b4b      	ldr	r3, [pc, #300]	; (800be40 <hanUniFontLoad+0x224>)
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <hanUniFontLoad+0x112>
 800bd1a:	4b49      	ldr	r3, [pc, #292]	; (800be40 <hanUniFontLoad+0x224>)
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d005      	beq.n	800bd2e <hanUniFontLoad+0x112>
 800bd22:	4b47      	ldr	r3, [pc, #284]	; (800be40 <hanUniFontLoad+0x224>)
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	2b10      	cmp	r3, #16
 800bd28:	d001      	beq.n	800bd2e <hanUniFontLoad+0x112>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <hanUniFontLoad+0x114>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	4a40      	ldr	r2, [pc, #256]	; (800be34 <hanUniFontLoad+0x218>)
 800bd34:	8812      	ldrh	r2, [r2, #0]
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	d001      	beq.n	800bd3e <hanUniFontLoad+0x122>
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	e000      	b.n	800bd40 <hanUniFontLoad+0x124>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4413      	add	r3, r2
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	4b45      	ldr	r3, [pc, #276]	; (800be5c <hanUniFontLoad+0x240>)
 800bd46:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 800bd48:	4b3c      	ldr	r3, [pc, #240]	; (800be3c <hanUniFontLoad+0x220>)
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4b44      	ldr	r3, [pc, #272]	; (800be60 <hanUniFontLoad+0x244>)
 800bd50:	5c9b      	ldrb	r3, [r3, r2]
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	4b43      	ldr	r3, [pc, #268]	; (800be64 <hanUniFontLoad+0x248>)
 800bd56:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	81fb      	strh	r3, [r7, #14]
 800bd5c:	e035      	b.n	800bdca <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800bd5e:	4b3e      	ldr	r3, [pc, #248]	; (800be58 <hanUniFontLoad+0x23c>)
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b34      	ldr	r3, [pc, #208]	; (800be40 <hanUniFontLoad+0x224>)
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	441a      	add	r2, r3
 800bd74:	89fb      	ldrh	r3, [r7, #14]
 800bd76:	493c      	ldr	r1, [pc, #240]	; (800be68 <hanUniFontLoad+0x24c>)
 800bd78:	0152      	lsls	r2, r2, #5
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800bd80:	89fb      	ldrh	r3, [r7, #14]
 800bd82:	b2d1      	uxtb	r1, r2
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	4413      	add	r3, r2
 800bd88:	460a      	mov	r2, r1
 800bd8a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 800bd8c:	89fb      	ldrh	r3, [r7, #14]
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4413      	add	r3, r2
 800bd92:	7999      	ldrb	r1, [r3, #6]
 800bd94:	4b31      	ldr	r3, [pc, #196]	; (800be5c <hanUniFontLoad+0x240>)
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2316      	movs	r3, #22
 800bd9c:	fb02 f303 	mul.w	r3, r2, r3
 800bda0:	33a0      	adds	r3, #160	; 0xa0
 800bda2:	4a26      	ldr	r2, [pc, #152]	; (800be3c <hanUniFontLoad+0x220>)
 800bda4:	8812      	ldrh	r2, [r2, #0]
 800bda6:	441a      	add	r2, r3
 800bda8:	89fb      	ldrh	r3, [r7, #14]
 800bdaa:	482f      	ldr	r0, [pc, #188]	; (800be68 <hanUniFontLoad+0x24c>)
 800bdac:	0152      	lsls	r2, r2, #5
 800bdae:	4413      	add	r3, r2
 800bdb0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	89fb      	ldrh	r3, [r7, #14]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	b2d1      	uxtb	r1, r2
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	460a      	mov	r2, r1
 800bdc2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800bdc4:	89fb      	ldrh	r3, [r7, #14]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	81fb      	strh	r3, [r7, #14]
 800bdca:	89fb      	ldrh	r3, [r7, #14]
 800bdcc:	2b1f      	cmp	r3, #31
 800bdce:	d9c6      	bls.n	800bd5e <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800bdd0:	4b18      	ldr	r3, [pc, #96]	; (800be34 <hanUniFontLoad+0x218>)
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d025      	beq.n	800be24 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800bdd8:	2300      	movs	r3, #0
 800bdda:	81fb      	strh	r3, [r7, #14]
 800bddc:	e01f      	b.n	800be1e <hanUniFontLoad+0x202>
 800bdde:	89fb      	ldrh	r3, [r7, #14]
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	4413      	add	r3, r2
 800bde4:	7999      	ldrb	r1, [r3, #6]
 800bde6:	4b1f      	ldr	r3, [pc, #124]	; (800be64 <hanUniFontLoad+0x248>)
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	4613      	mov	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	1a9b      	subs	r3, r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	33f8      	adds	r3, #248	; 0xf8
 800bdf6:	4a0f      	ldr	r2, [pc, #60]	; (800be34 <hanUniFontLoad+0x218>)
 800bdf8:	8812      	ldrh	r2, [r2, #0]
 800bdfa:	441a      	add	r2, r3
 800bdfc:	89fb      	ldrh	r3, [r7, #14]
 800bdfe:	481a      	ldr	r0, [pc, #104]	; (800be68 <hanUniFontLoad+0x24c>)
 800be00:	0152      	lsls	r2, r2, #5
 800be02:	4413      	add	r3, r2
 800be04:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	89fb      	ldrh	r3, [r7, #14]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	b2d1      	uxtb	r1, r2
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	4413      	add	r3, r2
 800be14:	460a      	mov	r2, r1
 800be16:	719a      	strb	r2, [r3, #6]
 800be18:	89fb      	ldrh	r3, [r7, #14]
 800be1a:	3301      	adds	r3, #1
 800be1c:	81fb      	strh	r3, [r7, #14]
 800be1e:	89fb      	ldrh	r3, [r7, #14]
 800be20:	2b1f      	cmp	r3, #31
 800be22:	d9dc      	bls.n	800bdde <hanUniFontLoad+0x1c2>
  }
}
 800be24:	bf00      	nop
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	24924925 	.word	0x24924925
 800be34:	20001c28 	.word	0x20001c28
 800be38:	86186187 	.word	0x86186187
 800be3c:	20001c2a 	.word	0x20001c2a
 800be40:	20001c2c 	.word	0x20001c2c
 800be44:	08015574 	.word	0x08015574
 800be48:	08015594 	.word	0x08015594
 800be4c:	080155b4 	.word	0x080155b4
 800be50:	080155ec 	.word	0x080155ec
 800be54:	080155d4 	.word	0x080155d4
 800be58:	20001c2e 	.word	0x20001c2e
 800be5c:	20001c30 	.word	0x20001c30
 800be60:	08015604 	.word	0x08015604
 800be64:	20001c32 	.word	0x20001c32
 800be68:	08017b00 	.word	0x08017b00

0800be6c <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 800be7c:	7b7b      	ldrb	r3, [r7, #13]
 800be7e:	3b20      	subs	r3, #32
 800be80:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 800be82:	2300      	movs	r3, #0
 800be84:	81fb      	strh	r3, [r7, #14]
 800be86:	e00f      	b.n	800bea8 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 800be88:	7b7a      	ldrb	r2, [r7, #13]
 800be8a:	89fb      	ldrh	r3, [r7, #14]
 800be8c:	490b      	ldr	r1, [pc, #44]	; (800bebc <hanEngFontLoad+0x50>)
 800be8e:	0112      	lsls	r2, r2, #4
 800be90:	4413      	add	r3, r2
 800be92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800be96:	89fb      	ldrh	r3, [r7, #14]
 800be98:	b2d1      	uxtb	r1, r2
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	4413      	add	r3, r2
 800be9e:	460a      	mov	r2, r1
 800bea0:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 800bea2:	89fb      	ldrh	r3, [r7, #14]
 800bea4:	3301      	adds	r3, #1
 800bea6:	81fb      	strh	r3, [r7, #14]
 800bea8:	89fb      	ldrh	r3, [r7, #14]
 800beaa:	2b0f      	cmp	r3, #15
 800beac:	d9ec      	bls.n	800be88 <hanEngFontLoad+0x1c>
  }
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	08013d14 	.word	0x08013d14

0800bec0 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 800beca:	88fb      	ldrh	r3, [r7, #6]
 800becc:	0a1b      	lsrs	r3, r3, #8
 800bece:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800bed0:	88fb      	ldrh	r3, [r7, #6]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 800bed6:	89fb      	ldrh	r3, [r7, #14]
 800bed8:	3bb0      	subs	r3, #176	; 0xb0
 800beda:	225e      	movs	r2, #94	; 0x5e
 800bedc:	fb03 f202 	mul.w	r2, r3, r2
 800bee0:	89bb      	ldrh	r3, [r7, #12]
 800bee2:	3ba1      	subs	r3, #161	; 0xa1
 800bee4:	4413      	add	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 800bee8:	4a05      	ldr	r2, [pc, #20]	; (800bf00 <hanCnvCodeWan2Johab+0x40>)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bef0:	b29b      	uxth	r3, r3
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	08015640 	.word	0x08015640

0800bf04 <TransferDoneISR>:
static void st7796SetRotation(uint8_t m);
static bool st7796Reset(void);


static void TransferDoneISR(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 800bf08:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <TransferDoneISR+0x30>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00d      	beq.n	800bf2e <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <TransferDoneISR+0x30>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
    TFT_CS_H;
 800bf18:	2101      	movs	r1, #1
 800bf1a:	200f      	movs	r0, #15
 800bf1c:	f002 fa20 	bl	800e360 <gpioPinWrite>

    if (frameCallBack != NULL)
 800bf20:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <TransferDoneISR+0x34>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <TransferDoneISR+0x2a>
    {
      frameCallBack();
 800bf28:	4b03      	ldr	r3, [pc, #12]	; (800bf38 <TransferDoneISR+0x34>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4798      	blx	r3
    }
  }
}
 800bf2e:	bf00      	nop
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20001c40 	.word	0x20001c40
 800bf38:	20001c3c 	.word	0x20001c3c

0800bf3c <st7796Init>:


bool st7796Init(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7796Reset();
 800bf42:	f000 f847 	bl	800bfd4 <st7796Reset>
 800bf46:	4603      	mov	r3, r0
 800bf48:	71fb      	strb	r3, [r7, #7]

  return ret;
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <st7796InitDriver>:

bool st7796InitDriver(lcd_driver_t *p_driver)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  p_lcd_driver = p_driver;
 800bf5c:	4a14      	ldr	r2, [pc, #80]	; (800bfb0 <st7796InitDriver+0x5c>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6013      	str	r3, [r2, #0]
  p_driver->init = st7796Init;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a13      	ldr	r2, [pc, #76]	; (800bfb4 <st7796InitDriver+0x60>)
 800bf66:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7796Reset;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a13      	ldr	r2, [pc, #76]	; (800bfb8 <st7796InitDriver+0x64>)
 800bf6c:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7796SetWindow;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a12      	ldr	r2, [pc, #72]	; (800bfbc <st7796InitDriver+0x68>)
 800bf72:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7796GetWidth;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a12      	ldr	r2, [pc, #72]	; (800bfc0 <st7796InitDriver+0x6c>)
 800bf78:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7796GetHeight;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a11      	ldr	r2, [pc, #68]	; (800bfc4 <st7796InitDriver+0x70>)
 800bf7e:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7796SetCallBack;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a11      	ldr	r2, [pc, #68]	; (800bfc8 <st7796InitDriver+0x74>)
 800bf84:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7796SendBuffer;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a10      	ldr	r2, [pc, #64]	; (800bfcc <st7796InitDriver+0x78>)
 800bf8a:	619a      	str	r2, [r3, #24]
  p_driver->fillRect = st7796FillRect;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <st7796InitDriver+0x7c>)
 800bf90:	61da      	str	r2, [r3, #28]

  p_driver->_width = HW_LCD_WIDTH;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf98:	841a      	strh	r2, [r3, #32]
  p_driver->_height = HW_LCD_HEIGHT;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bfa0:	845a      	strh	r2, [r3, #34]	; 0x22
  return true;
 800bfa2:	2301      	movs	r3, #1
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	20001c38 	.word	0x20001c38
 800bfb4:	0800bf3d 	.word	0x0800bf3d
 800bfb8:	0800bfd5 	.word	0x0800bfd5
 800bfbc:	0800c3d9 	.word	0x0800c3d9
 800bfc0:	0800c049 	.word	0x0800c049
 800bfc4:	0800c05b 	.word	0x0800c05b
 800bfc8:	0800c659 	.word	0x0800c659
 800bfcc:	0800c60d 	.word	0x0800c60d
 800bfd0:	0800c469 	.word	0x0800c469

0800bfd4 <st7796Reset>:

bool st7796Reset(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 800bfda:	4b19      	ldr	r3, [pc, #100]	; (800c040 <st7796Reset+0x6c>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f003 f8f2 	bl	800f1c8 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 800bfe4:	4b16      	ldr	r3, [pc, #88]	; (800c040 <st7796Reset+0x6c>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4618      	mov	r0, r3
 800bfec:	f003 f94a 	bl	800f284 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 800bff0:	4b13      	ldr	r3, [pc, #76]	; (800c040 <st7796Reset+0x6c>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	4913      	ldr	r1, [pc, #76]	; (800c044 <st7796Reset+0x70>)
 800bff6:	4618      	mov	r0, r3
 800bff8:	f003 fb34 	bl	800f664 <spiAttachTxInterrupt>

  TFT_BKL_L;
 800bffc:	2100      	movs	r1, #0
 800bffe:	2012      	movs	r0, #18
 800c000:	f002 f9ae 	bl	800e360 <gpioPinWrite>
  TFT_DC_D;
 800c004:	2101      	movs	r1, #1
 800c006:	2010      	movs	r0, #16
 800c008:	f002 f9aa 	bl	800e360 <gpioPinWrite>
  TFT_CS_H;
 800c00c:	2101      	movs	r1, #1
 800c00e:	200f      	movs	r0, #15
 800c010:	f002 f9a6 	bl	800e360 <gpioPinWrite>
  delay(10);
 800c014:	200a      	movs	r0, #10
 800c016:	f7ff fa49 	bl	800b4ac <delay>

  st7796InitRegs();
 800c01a:	f000 f85b 	bl	800c0d4 <st7796InitRegs>

  st7796SetRotation(1);
 800c01e:	2001      	movs	r0, #1
 800c020:	f000 f940 	bl	800c2a4 <st7796SetRotation>
  st7796FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, TFT_BLACK);
 800c024:	2300      	movs	r3, #0
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800c02c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c030:	2100      	movs	r1, #0
 800c032:	2000      	movs	r0, #0
 800c034:	f000 fa18 	bl	800c468 <st7796FillRect>

  return true;
 800c038:	2301      	movs	r3, #1
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	20001c34 	.word	0x20001c34
 800c044:	0800bf05 	.word	0x0800bf05

0800c048 <st7796GetWidth>:

uint16_t st7796GetWidth(void)
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 800c04c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800c050:	4618      	mov	r0, r3
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <st7796GetHeight>:

uint16_t st7796GetHeight(void)
{
 800c05a:	b480      	push	{r7}
 800c05c:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 800c05e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800c062:	4618      	mov	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <writecommand>:

void writecommand(uint8_t c)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C;
 800c076:	2100      	movs	r1, #0
 800c078:	2010      	movs	r0, #16
 800c07a:	f002 f971 	bl	800e360 <gpioPinWrite>
	TFT_CS_L;
 800c07e:	2100      	movs	r1, #0
 800c080:	200f      	movs	r0, #15
 800c082:	f002 f96d 	bl	800e360 <gpioPinWrite>

	spiTransfer8(_DEF_SPI1, c);
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	4619      	mov	r1, r3
 800c08a:	2000      	movs	r0, #0
 800c08c:	f003 f9f8 	bl	800f480 <spiTransfer8>

	TFT_CS_H;
 800c090:	2101      	movs	r1, #1
 800c092:	200f      	movs	r0, #15
 800c094:	f002 f964 	bl	800e360 <gpioPinWrite>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <writedata>:

void writedata(uint8_t d)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
	TFT_DC_D;        // Play safe, but should already be in data mode
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	2010      	movs	r0, #16
 800c0ae:	f002 f957 	bl	800e360 <gpioPinWrite>
	TFT_CS_L;
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	200f      	movs	r0, #15
 800c0b6:	f002 f953 	bl	800e360 <gpioPinWrite>

	spiTransfer8(_DEF_SPI1, d);
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f003 f9de 	bl	800f480 <spiTransfer8>

	TFT_CS_H;
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	200f      	movs	r0, #15
 800c0c8:	f002 f94a 	bl	800e360 <gpioPinWrite>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <st7796InitRegs>:

void st7796InitRegs(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
	delay(120);
 800c0d8:	2078      	movs	r0, #120	; 0x78
 800c0da:	f7ff f9e7 	bl	800b4ac <delay>
	writecommand(ST7796_SWRESET); //Software reset
 800c0de:	2001      	movs	r0, #1
 800c0e0:	f7ff ffc4 	bl	800c06c <writecommand>
	delay(120);
 800c0e4:	2078      	movs	r0, #120	; 0x78
 800c0e6:	f7ff f9e1 	bl	800b4ac <delay>
	writecommand(ST7796_SLPOUT); // Sleep out
 800c0ea:	2011      	movs	r0, #17
 800c0ec:	f7ff ffbe 	bl	800c06c <writecommand>

	delay(20);
 800c0f0:	2014      	movs	r0, #20
 800c0f2:	f7ff f9db 	bl	800b4ac <delay>

	writecommand(ST7796_CSCON); //Command Set Control
 800c0f6:	20f0      	movs	r0, #240	; 0xf0
 800c0f8:	f7ff ffb8 	bl	800c06c <writecommand>
	writedata(0xC3);            //enable command 2 part I
 800c0fc:	20c3      	movs	r0, #195	; 0xc3
 800c0fe:	f7ff ffcf 	bl	800c0a0 <writedata>

	writecommand(ST7796_CSCON);	//Command Set Control
 800c102:	20f0      	movs	r0, #240	; 0xf0
 800c104:	f7ff ffb2 	bl	800c06c <writecommand>
	writedata(0x96);           	//enable command 2 part II
 800c108:	2096      	movs	r0, #150	; 0x96
 800c10a:	f7ff ffc9 	bl	800c0a0 <writedata>

	writecommand(ST7796_MADCTL);//Memory Data Access Control
 800c10e:	2036      	movs	r0, #54	; 0x36
 800c110:	f7ff ffac 	bl	800c06c <writecommand>
	writedata(TFT_MAD_MX | TFT_MAD_COLOR_ORDER);
 800c114:	2048      	movs	r0, #72	; 0x48
 800c116:	f7ff ffc3 	bl	800c0a0 <writedata>

	writecommand(ST7796_PIXFMT);//Interface Pixel Format
 800c11a:	203a      	movs	r0, #58	; 0x3a
 800c11c:	f7ff ffa6 	bl	800c06c <writecommand>
	writedata(0x55);			//16bit/pixel
 800c120:	2055      	movs	r0, #85	; 0x55
 800c122:	f7ff ffbd 	bl	800c0a0 <writedata>

	writecommand(ST7796_INVCTR);//Display Inversion Cotnrol
 800c126:	20b4      	movs	r0, #180	; 0xb4
 800c128:	f7ff ffa0 	bl	800c06c <writecommand>
	writedata(0x01);			//1-dot inversion
 800c12c:	2001      	movs	r0, #1
 800c12e:	f7ff ffb7 	bl	800c0a0 <writedata>

	writecommand(ST7796_DFUNCTR); //Display Function Control
 800c132:	20b6      	movs	r0, #182	; 0xb6
 800c134:	f7ff ff9a 	bl	800c06c <writecommand>
	writedata(0x80);    //Bypass
 800c138:	2080      	movs	r0, #128	; 0x80
 800c13a:	f7ff ffb1 	bl	800c0a0 <writedata>
	writedata(0x02);    //Source Output Scan from S1 to S960, Gate Output scan from G1 to G480, scan cycle=2
 800c13e:	2002      	movs	r0, #2
 800c140:	f7ff ffae 	bl	800c0a0 <writedata>
	writedata(0x3B);    //LCD Drive Line=8*(59+1)
 800c144:	203b      	movs	r0, #59	; 0x3b
 800c146:	f7ff ffab 	bl	800c0a0 <writedata>

	writecommand(ST7796_EM);	//Entry Mode Set
 800c14a:	20b7      	movs	r0, #183	; 0xb7
 800c14c:	f7ff ff8e 	bl	800c06c <writecommand>
	writedata(0xC6);
 800c150:	20c6      	movs	r0, #198	; 0xc6
 800c152:	f7ff ffa5 	bl	800c0a0 <writedata>

	writecommand(ST7796_PWCTR2);
 800c156:	20c1      	movs	r0, #193	; 0xc1
 800c158:	f7ff ff88 	bl	800c06c <writecommand>
	writedata(0x15);
 800c15c:	2015      	movs	r0, #21
 800c15e:	f7ff ff9f 	bl	800c0a0 <writedata>

	writecommand(ST7796_PWCTR3);
 800c162:	20c2      	movs	r0, #194	; 0xc2
 800c164:	f7ff ff82 	bl	800c06c <writecommand>
	writedata(0xAF);
 800c168:	20af      	movs	r0, #175	; 0xaf
 800c16a:	f7ff ff99 	bl	800c0a0 <writedata>

	writecommand(ST7796_VMCTR1);
 800c16e:	20c5      	movs	r0, #197	; 0xc5
 800c170:	f7ff ff7c 	bl	800c06c <writecommand>
	writedata(0x22);
 800c174:	2022      	movs	r0, #34	; 0x22
 800c176:	f7ff ff93 	bl	800c0a0 <writedata>

	writecommand(ST7796_VMCOFF);
 800c17a:	20c6      	movs	r0, #198	; 0xc6
 800c17c:	f7ff ff76 	bl	800c06c <writecommand>
	writedata(0x00);
 800c180:	2000      	movs	r0, #0
 800c182:	f7ff ff8d 	bl	800c0a0 <writedata>

	writecommand(ST7796_DOCA);  //Display Output Ctrl Adjust
 800c186:	20e8      	movs	r0, #232	; 0xe8
 800c188:	f7ff ff70 	bl	800c06c <writecommand>
	writedata(0x40);
 800c18c:	2040      	movs	r0, #64	; 0x40
 800c18e:	f7ff ff87 	bl	800c0a0 <writedata>
	writedata(0x8A);
 800c192:	208a      	movs	r0, #138	; 0x8a
 800c194:	f7ff ff84 	bl	800c0a0 <writedata>
	writedata(0x00);
 800c198:	2000      	movs	r0, #0
 800c19a:	f7ff ff81 	bl	800c0a0 <writedata>
	writedata(0x00);
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f7ff ff7e 	bl	800c0a0 <writedata>
	writedata(0x29);
 800c1a4:	2029      	movs	r0, #41	; 0x29
 800c1a6:	f7ff ff7b 	bl	800c0a0 <writedata>
	writedata(0x19);
 800c1aa:	2019      	movs	r0, #25
 800c1ac:	f7ff ff78 	bl	800c0a0 <writedata>
	writedata(0xA5);
 800c1b0:	20a5      	movs	r0, #165	; 0xa5
 800c1b2:	f7ff ff75 	bl	800c0a0 <writedata>
	writedata(0x33);
 800c1b6:	2033      	movs	r0, #51	; 0x33
 800c1b8:	f7ff ff72 	bl	800c0a0 <writedata>

	writecommand(ST7796_GMCTRP1); //Positiove Gamma Cotnrol
 800c1bc:	20e0      	movs	r0, #224	; 0xe0
 800c1be:	f7ff ff55 	bl	800c06c <writecommand>
	writedata(0xF0);
 800c1c2:	20f0      	movs	r0, #240	; 0xf0
 800c1c4:	f7ff ff6c 	bl	800c0a0 <writedata>
	writedata(0x04);
 800c1c8:	2004      	movs	r0, #4
 800c1ca:	f7ff ff69 	bl	800c0a0 <writedata>
	writedata(0x08);
 800c1ce:	2008      	movs	r0, #8
 800c1d0:	f7ff ff66 	bl	800c0a0 <writedata>
	writedata(0x09);
 800c1d4:	2009      	movs	r0, #9
 800c1d6:	f7ff ff63 	bl	800c0a0 <writedata>
	writedata(0x08);
 800c1da:	2008      	movs	r0, #8
 800c1dc:	f7ff ff60 	bl	800c0a0 <writedata>
	writedata(0x15);
 800c1e0:	2015      	movs	r0, #21
 800c1e2:	f7ff ff5d 	bl	800c0a0 <writedata>
	writedata(0x2F);
 800c1e6:	202f      	movs	r0, #47	; 0x2f
 800c1e8:	f7ff ff5a 	bl	800c0a0 <writedata>
	writedata(0x42);
 800c1ec:	2042      	movs	r0, #66	; 0x42
 800c1ee:	f7ff ff57 	bl	800c0a0 <writedata>
	writedata(0x46);
 800c1f2:	2046      	movs	r0, #70	; 0x46
 800c1f4:	f7ff ff54 	bl	800c0a0 <writedata>
	writedata(0x28);
 800c1f8:	2028      	movs	r0, #40	; 0x28
 800c1fa:	f7ff ff51 	bl	800c0a0 <writedata>
	writedata(0x15);
 800c1fe:	2015      	movs	r0, #21
 800c200:	f7ff ff4e 	bl	800c0a0 <writedata>
	writedata(0x16);
 800c204:	2016      	movs	r0, #22
 800c206:	f7ff ff4b 	bl	800c0a0 <writedata>
	writedata(0x29);
 800c20a:	2029      	movs	r0, #41	; 0x29
 800c20c:	f7ff ff48 	bl	800c0a0 <writedata>
	writedata(0x2D);
 800c210:	202d      	movs	r0, #45	; 0x2d
 800c212:	f7ff ff45 	bl	800c0a0 <writedata>

	writecommand(ST7796_GMCTRN1); //Negative Gamma Cotnrol
 800c216:	20e1      	movs	r0, #225	; 0xe1
 800c218:	f7ff ff28 	bl	800c06c <writecommand>
	writedata(0xF0);
 800c21c:	20f0      	movs	r0, #240	; 0xf0
 800c21e:	f7ff ff3f 	bl	800c0a0 <writedata>
	writedata(0x04);
 800c222:	2004      	movs	r0, #4
 800c224:	f7ff ff3c 	bl	800c0a0 <writedata>
	writedata(0x09);
 800c228:	2009      	movs	r0, #9
 800c22a:	f7ff ff39 	bl	800c0a0 <writedata>
	writedata(0x09);
 800c22e:	2009      	movs	r0, #9
 800c230:	f7ff ff36 	bl	800c0a0 <writedata>
	writedata(0x08);
 800c234:	2008      	movs	r0, #8
 800c236:	f7ff ff33 	bl	800c0a0 <writedata>
	writedata(0x15);
 800c23a:	2015      	movs	r0, #21
 800c23c:	f7ff ff30 	bl	800c0a0 <writedata>
	writedata(0x2E);
 800c240:	202e      	movs	r0, #46	; 0x2e
 800c242:	f7ff ff2d 	bl	800c0a0 <writedata>
	writedata(0x46);
 800c246:	2046      	movs	r0, #70	; 0x46
 800c248:	f7ff ff2a 	bl	800c0a0 <writedata>
	writedata(0x46);
 800c24c:	2046      	movs	r0, #70	; 0x46
 800c24e:	f7ff ff27 	bl	800c0a0 <writedata>
	writedata(0x28);
 800c252:	2028      	movs	r0, #40	; 0x28
 800c254:	f7ff ff24 	bl	800c0a0 <writedata>
	writedata(0x15);
 800c258:	2015      	movs	r0, #21
 800c25a:	f7ff ff21 	bl	800c0a0 <writedata>
	writedata(0x16);
 800c25e:	2016      	movs	r0, #22
 800c260:	f7ff ff1e 	bl	800c0a0 <writedata>
	writedata(0x29);
 800c264:	2029      	movs	r0, #41	; 0x29
 800c266:	f7ff ff1b 	bl	800c0a0 <writedata>
	writedata(0x2D);
 800c26a:	202d      	movs	r0, #45	; 0x2d
 800c26c:	f7ff ff18 	bl	800c0a0 <writedata>

	writecommand(ST7796_NORON);
 800c270:	2013      	movs	r0, #19
 800c272:	f7ff fefb 	bl	800c06c <writecommand>

	writecommand(ST7796_WRCTRLD);
 800c276:	2053      	movs	r0, #83	; 0x53
 800c278:	f7ff fef8 	bl	800c06c <writecommand>
	writedata(0x24);
 800c27c:	2024      	movs	r0, #36	; 0x24
 800c27e:	f7ff ff0f 	bl	800c0a0 <writedata>

	writecommand(ST7796_CSCON);
 800c282:	20f0      	movs	r0, #240	; 0xf0
 800c284:	f7ff fef2 	bl	800c06c <writecommand>
	writedata(0xC3);
 800c288:	20c3      	movs	r0, #195	; 0xc3
 800c28a:	f7ff ff09 	bl	800c0a0 <writedata>

	writecommand(ST7796_CSCON);
 800c28e:	20f0      	movs	r0, #240	; 0xf0
 800c290:	f7ff feec 	bl	800c06c <writecommand>
	writedata(0x69);
 800c294:	2069      	movs	r0, #105	; 0x69
 800c296:	f7ff ff03 	bl	800c0a0 <writedata>

	writecommand(ST7796_DISPON);
 800c29a:	2029      	movs	r0, #41	; 0x29
 800c29c:	f7ff fee6 	bl	800c06c <writecommand>
}
 800c2a0:	bf00      	nop
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <st7796SetRotation>:

void st7796SetRotation(uint8_t mode)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	71fb      	strb	r3, [r7, #7]

	writecommand(TFT_MADCTL);
 800c2ae:	2036      	movs	r0, #54	; 0x36
 800c2b0:	f7ff fedc 	bl	800c06c <writecommand>
	switch (mode) {
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	2b07      	cmp	r3, #7
 800c2b8:	f200 8084 	bhi.w	800c3c4 <st7796SetRotation+0x120>
 800c2bc:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <st7796SetRotation+0x20>)
 800c2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c2:	bf00      	nop
 800c2c4:	0800c2e5 	.word	0x0800c2e5
 800c2c8:	0800c301 	.word	0x0800c301
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c355 	.word	0x0800c355
 800c2d8:	0800c371 	.word	0x0800c371
 800c2dc:	0800c38d 	.word	0x0800c38d
 800c2e0:	0800c3a9 	.word	0x0800c3a9
	  case 0:
		writedata(TFT_MAD_MX | TFT_MAD_COLOR_ORDER);
 800c2e4:	2048      	movs	r0, #72	; 0x48
 800c2e6:	f7ff fedb 	bl	800c0a0 <writedata>
			p_lcd_driver->_width  = HW_LCD_HEIGHT;
 800c2ea:	4b3a      	ldr	r3, [pc, #232]	; (800c3d4 <st7796SetRotation+0x130>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c2f2:	841a      	strh	r2, [r3, #32]
			p_lcd_driver->_height = HW_LCD_WIDTH;
 800c2f4:	4b37      	ldr	r3, [pc, #220]	; (800c3d4 <st7796SetRotation+0x130>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c2fc:	845a      	strh	r2, [r3, #34]	; 0x22
		{
			lcd.colstart = 49;
			lcd.rowstart = 0;
		}
	#endif
		break;
 800c2fe:	e061      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 1:
		writedata(TFT_MAD_MV | TFT_MAD_COLOR_ORDER);
 800c300:	2028      	movs	r0, #40	; 0x28
 800c302:	f7ff fecd 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_WIDTH;
 800c306:	4b33      	ldr	r3, [pc, #204]	; (800c3d4 <st7796SetRotation+0x130>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c30e:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_HEIGHT;
 800c310:	4b30      	ldr	r3, [pc, #192]	; (800c3d4 <st7796SetRotation+0x130>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c318:	845a      	strh	r2, [r3, #34]	; 0x22
		{
			lcd.colstart = 0;
			lcd.rowstart = 49;
		}
	#endif
		break;
 800c31a:	e053      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 2:
		writedata(TFT_MAD_MY | TFT_MAD_COLOR_ORDER);
 800c31c:	2088      	movs	r0, #136	; 0x88
 800c31e:	f7ff febf 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_HEIGHT;
 800c322:	4b2c      	ldr	r3, [pc, #176]	; (800c3d4 <st7796SetRotation+0x130>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c32a:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_WIDTH;
 800c32c:	4b29      	ldr	r3, [pc, #164]	; (800c3d4 <st7796SetRotation+0x130>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c334:	845a      	strh	r2, [r3, #34]	; 0x22
		{
			lcd.colstart = 49;
			lcd.rowstart = 0;
		}
	#endif
		break;
 800c336:	e045      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 3:
		writedata(TFT_MAD_MX | TFT_MAD_MY | TFT_MAD_MV | TFT_MAD_COLOR_ORDER);
 800c338:	20e8      	movs	r0, #232	; 0xe8
 800c33a:	f7ff feb1 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_WIDTH;
 800c33e:	4b25      	ldr	r3, [pc, #148]	; (800c3d4 <st7796SetRotation+0x130>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c346:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_HEIGHT;
 800c348:	4b22      	ldr	r3, [pc, #136]	; (800c3d4 <st7796SetRotation+0x130>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c350:	845a      	strh	r2, [r3, #34]	; 0x22
		{
			lcd.colstart = 0;
			lcd.rowstart = 49;
		}
	#endif
		break;
 800c352:	e037      	b.n	800c3c4 <st7796SetRotation+0x120>
	// These next rotations are for bottom up BMP drawing
	  case 4:
		writedata(TFT_MAD_MX | TFT_MAD_MY | TFT_MAD_COLOR_ORDER);
 800c354:	20c8      	movs	r0, #200	; 0xc8
 800c356:	f7ff fea3 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_HEIGHT;
 800c35a:	4b1e      	ldr	r3, [pc, #120]	; (800c3d4 <st7796SetRotation+0x130>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c362:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_WIDTH;
 800c364:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <st7796SetRotation+0x130>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c36c:	845a      	strh	r2, [r3, #34]	; 0x22
		break;
 800c36e:	e029      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 5:
		writedata(TFT_MAD_MV | TFT_MAD_MX | TFT_MAD_COLOR_ORDER);
 800c370:	2068      	movs	r0, #104	; 0x68
 800c372:	f7ff fe95 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_WIDTH;
 800c376:	4b17      	ldr	r3, [pc, #92]	; (800c3d4 <st7796SetRotation+0x130>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c37e:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_HEIGHT;
 800c380:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <st7796SetRotation+0x130>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c388:	845a      	strh	r2, [r3, #34]	; 0x22
		break;
 800c38a:	e01b      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 6:
		writedata(TFT_MAD_COLOR_ORDER);
 800c38c:	2008      	movs	r0, #8
 800c38e:	f7ff fe87 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_HEIGHT;
 800c392:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <st7796SetRotation+0x130>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c39a:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_WIDTH;
 800c39c:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <st7796SetRotation+0x130>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c3a4:	845a      	strh	r2, [r3, #34]	; 0x22
		break;
 800c3a6:	e00d      	b.n	800c3c4 <st7796SetRotation+0x120>
	  case 7:
		writedata(TFT_MAD_MY | TFT_MAD_MV | TFT_MAD_COLOR_ORDER);
 800c3a8:	20a8      	movs	r0, #168	; 0xa8
 800c3aa:	f7ff fe79 	bl	800c0a0 <writedata>
		p_lcd_driver->_width  = HW_LCD_WIDTH;
 800c3ae:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <st7796SetRotation+0x130>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c3b6:	841a      	strh	r2, [r3, #32]
		p_lcd_driver->_height = HW_LCD_HEIGHT;
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <st7796SetRotation+0x130>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c3c0:	845a      	strh	r2, [r3, #34]	; 0x22
		break;
 800c3c2:	bf00      	nop

	}

	delayMicroseconds(10);
 800c3c4:	200a      	movs	r0, #10
 800c3c6:	f7ff f897 	bl	800b4f8 <delayMicroseconds>
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20001c38 	.word	0x20001c38

0800c3d8 <st7796SetWindow>:

void st7796SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
	spiSetBitWidth(spi_ch, 8);
 800c3e6:	4b1f      	ldr	r3, [pc, #124]	; (800c464 <st7796SetWindow+0x8c>)
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2108      	movs	r1, #8
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f003 f817 	bl	800f420 <spiSetBitWidth>
	x1+=colstart;
	y0+=rowstart;
	y1+=rowstart;
	#endif

	writecommand(TFT_CASET); // Column addr set
 800c3f2:	202a      	movs	r0, #42	; 0x2a
 800c3f4:	f7ff fe3a 	bl	800c06c <writecommand>
	writedata((x0 >> 8) & 0xFF);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	121b      	asrs	r3, r3, #8
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff fe4e 	bl	800c0a0 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fe49 	bl	800c0a0 <writedata>
	writedata((x1 >> 8) & 0xFF);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	121b      	asrs	r3, r3, #8
 800c412:	b2db      	uxtb	r3, r3
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fe43 	bl	800c0a0 <writedata>
	writedata(x1 & 0xFF);     // XEND
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff fe3e 	bl	800c0a0 <writedata>

	writecommand(TFT_PASET); // Row addr set
 800c424:	202b      	movs	r0, #43	; 0x2b
 800c426:	f7ff fe21 	bl	800c06c <writecommand>
	writedata((y0 >> 8) & 0xFF);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	121b      	asrs	r3, r3, #8
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff fe35 	bl	800c0a0 <writedata>
	writedata(y0 & 0xFF);     // YSTART
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff fe30 	bl	800c0a0 <writedata>
	writedata((y1 >>8) & 0xFF);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	121b      	asrs	r3, r3, #8
 800c444:	b2db      	uxtb	r3, r3
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fe2a 	bl	800c0a0 <writedata>
	writedata(y1 & 0xFF);     // YEND
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fe25 	bl	800c0a0 <writedata>

	writecommand(TFT_RAMWR); // write to RAM
 800c456:	202c      	movs	r0, #44	; 0x2c
 800c458:	f7ff fe08 	bl	800c06c <writecommand>
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	20001c34 	.word	0x20001c34

0800c468 <st7796FillRect>:

void st7796FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 800c468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c46c:	b089      	sub	sp, #36	; 0x24
 800c46e:	af00      	add	r7, sp, #0
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	466b      	mov	r3, sp
 800c47a:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 800c47c:	6879      	ldr	r1, [r7, #4]
 800c47e:	1e4b      	subs	r3, r1, #1
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	460a      	mov	r2, r1
 800c484:	2300      	movs	r3, #0
 800c486:	4690      	mov	r8, r2
 800c488:	4699      	mov	r9, r3
 800c48a:	f04f 0200 	mov.w	r2, #0
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c496:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c49a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c49e:	460a      	mov	r2, r1
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	461d      	mov	r5, r3
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	012b      	lsls	r3, r5, #4
 800c4b0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c4b4:	0122      	lsls	r2, r4, #4
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	3307      	adds	r3, #7
 800c4bc:	08db      	lsrs	r3, r3, #3
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	ebad 0d03 	sub.w	sp, sp, r3
 800c4c4:	466b      	mov	r3, sp
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= p_lcd_driver->_width) || (y >= p_lcd_driver->_height)) return;
 800c4ce:	4b4d      	ldr	r3, [pc, #308]	; (800c604 <st7796FillRect+0x19c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	8c1b      	ldrh	r3, [r3, #32]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	f280 808e 	bge.w	800c5fa <st7796FillRect+0x192>
 800c4de:	4b49      	ldr	r3, [pc, #292]	; (800c604 <st7796FillRect+0x19c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	f280 8086 	bge.w	800c5fa <st7796FillRect+0x192>

  if (x < 0) { w += x; x = 0; }
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	da05      	bge.n	800c500 <st7796FillRect+0x98>
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	607b      	str	r3, [r7, #4]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	da05      	bge.n	800c512 <st7796FillRect+0xaa>
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4413      	add	r3, r2
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	60bb      	str	r3, [r7, #8]

  if ((x + w) > p_lcd_driver->_width)  w = p_lcd_driver->_width  - x;
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4413      	add	r3, r2
 800c518:	4a3a      	ldr	r2, [pc, #232]	; (800c604 <st7796FillRect+0x19c>)
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	8c12      	ldrh	r2, [r2, #32]
 800c51e:	4293      	cmp	r3, r2
 800c520:	dd06      	ble.n	800c530 <st7796FillRect+0xc8>
 800c522:	4b38      	ldr	r3, [pc, #224]	; (800c604 <st7796FillRect+0x19c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	8c1b      	ldrh	r3, [r3, #32]
 800c528:	461a      	mov	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	607b      	str	r3, [r7, #4]
  if ((y + h) > p_lcd_driver->_height) h = p_lcd_driver->_height - y;
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	4413      	add	r3, r2
 800c536:	4a33      	ldr	r2, [pc, #204]	; (800c604 <st7796FillRect+0x19c>)
 800c538:	6812      	ldr	r2, [r2, #0]
 800c53a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800c53c:	4293      	cmp	r3, r2
 800c53e:	dd06      	ble.n	800c54e <st7796FillRect+0xe6>
 800c540:	4b30      	ldr	r3, [pc, #192]	; (800c604 <st7796FillRect+0x19c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c546:	461a      	mov	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	dd51      	ble.n	800c5f8 <st7796FillRect+0x190>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd4e      	ble.n	800c5f8 <st7796FillRect+0x190>


  st7796SetWindow(x, y, x + w - 1, y + h - 1);
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4413      	add	r3, r2
 800c560:	1e59      	subs	r1, r3, #1
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	4413      	add	r3, r2
 800c568:	3b01      	subs	r3, #1
 800c56a:	460a      	mov	r2, r1
 800c56c:	68b9      	ldr	r1, [r7, #8]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff ff32 	bl	800c3d8 <st7796SetWindow>
  spiSetBitWidth(spi_ch, 16);
 800c574:	4b24      	ldr	r3, [pc, #144]	; (800c608 <st7796FillRect+0x1a0>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2110      	movs	r1, #16
 800c57a:	4618      	mov	r0, r3
 800c57c:	f002 ff50 	bl	800f420 <spiSetBitWidth>

  TFT_DC_D;
 800c580:	2101      	movs	r1, #1
 800c582:	2010      	movs	r0, #16
 800c584:	f001 feec 	bl	800e360 <gpioPinWrite>
  TFT_CS_L;
 800c588:	2100      	movs	r1, #0
 800c58a:	200f      	movs	r0, #15
 800c58c:	f001 fee8 	bl	800e360 <gpioPinWrite>

  for (int i=0; i<w; i++)
 800c590:	2300      	movs	r3, #0
 800c592:	61fb      	str	r3, [r7, #28]
 800c594:	e008      	b.n	800c5a8 <st7796FillRect+0x140>
  {
    line_buf[i] = color;
 800c596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c598:	b299      	uxth	r1, r3
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	69fa      	ldr	r2, [r7, #28]
 800c59e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	dbf2      	blt.n	800c596 <st7796FillRect+0x12e>
  }
  for (int i=0; i<h; i++)
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61bb      	str	r3, [r7, #24]
 800c5b4:	e00e      	b.n	800c5d4 <st7796FillRect+0x16c>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	230a      	movs	r3, #10
 800c5ba:	6939      	ldr	r1, [r7, #16]
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f003 f801 	bl	800f5c4 <spiDmaTxTransfer>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	f083 0301 	eor.w	r3, r3, #1
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d107      	bne.n	800c5de <st7796FillRect+0x176>
  for (int i=0; i<h; i++)
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	dbec      	blt.n	800c5b6 <st7796FillRect+0x14e>
 800c5dc:	e000      	b.n	800c5e0 <st7796FillRect+0x178>
    {
      break;
 800c5de:	bf00      	nop
    }
  }
  spiSetBitWidth(spi_ch, 8);
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <st7796FillRect+0x1a0>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2108      	movs	r1, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f002 ff1a 	bl	800f420 <spiSetBitWidth>
  TFT_CS_H;
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	200f      	movs	r0, #15
 800c5f0:	f001 feb6 	bl	800e360 <gpioPinWrite>
 800c5f4:	46b5      	mov	sp, r6
 800c5f6:	e001      	b.n	800c5fc <st7796FillRect+0x194>
  if ((w < 1) || (h < 1)) return;
 800c5f8:	bf00      	nop
  if ((x >= p_lcd_driver->_width) || (y >= p_lcd_driver->_height)) return;
 800c5fa:	46b5      	mov	sp, r6
}
 800c5fc:	3724      	adds	r7, #36	; 0x24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c604:	20001c38 	.word	0x20001c38
 800c608:	20001c34 	.word	0x20001c34

0800c60c <st7796SendBuffer>:

bool st7796SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <st7796SendBuffer+0x44>)
 800c61a:	2201      	movs	r2, #1
 800c61c:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 800c61e:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <st7796SendBuffer+0x48>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2110      	movs	r1, #16
 800c624:	4618      	mov	r0, r3
 800c626:	f002 fefb 	bl	800f420 <spiSetBitWidth>

  TFT_DC_D;
 800c62a:	2101      	movs	r1, #1
 800c62c:	2010      	movs	r0, #16
 800c62e:	f001 fe97 	bl	800e360 <gpioPinWrite>
  TFT_CS_L;
 800c632:	2100      	movs	r1, #0
 800c634:	200f      	movs	r0, #15
 800c636:	f001 fe93 	bl	800e360 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 800c63a:	2300      	movs	r3, #0
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	68f9      	ldr	r1, [r7, #12]
 800c640:	2000      	movs	r0, #0
 800c642:	f002 ffbf 	bl	800f5c4 <spiDmaTxTransfer>
  return true;
 800c646:	2301      	movs	r3, #1
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20001c40 	.word	0x20001c40
 800c654:	20001c34 	.word	0x20001c34

0800c658 <st7796SetCallBack>:

bool st7796SetCallBack(void (*p_func)(void))
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 800c660:	4a04      	ldr	r2, [pc, #16]	; (800c674 <st7796SetCallBack+0x1c>)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6013      	str	r3, [r2, #0]

  return true;
 800c666:	2301      	movs	r3, #1
}
 800c668:	4618      	mov	r0, r3
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	20001c3c 	.word	0x20001c3c

0800c678 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b088      	sub	sp, #32
 800c67c:	af00      	add	r7, sp, #0
  bool ret = true;
 800c67e:	2301      	movs	r3, #1
 800c680:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c682:	1d3b      	adds	r3, r7, #4
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	605a      	str	r2, [r3, #4]
 800c68a:	609a      	str	r2, [r3, #8]
 800c68c:	60da      	str	r2, [r3, #12]
 800c68e:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c690:	2300      	movs	r3, #0
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <buttonInit+0x8c>)
 800c696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c698:	4a1a      	ldr	r2, [pc, #104]	; (800c704 <buttonInit+0x8c>)
 800c69a:	f043 0310 	orr.w	r3, r3, #16
 800c69e:	6313      	str	r3, [r2, #48]	; 0x30
 800c6a0:	4b18      	ldr	r3, [pc, #96]	; (800c704 <buttonInit+0x8c>)
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a4:	f003 0310 	and.w	r3, r3, #16
 800c6a8:	603b      	str	r3, [r7, #0]
 800c6aa:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	e01a      	b.n	800c6ec <buttonInit+0x74>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800c6b6:	4a14      	ldr	r2, [pc, #80]	; (800c708 <buttonInit+0x90>)
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	011b      	lsls	r3, r3, #4
 800c6bc:	4413      	add	r3, r2
 800c6be:	3304      	adds	r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 800c6c4:	4a10      	ldr	r2, [pc, #64]	; (800c708 <buttonInit+0x90>)
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	011b      	lsls	r3, r3, #4
 800c6ca:	4413      	add	r3, r2
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 800c6d2:	4a0d      	ldr	r2, [pc, #52]	; (800c708 <buttonInit+0x90>)
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	4413      	add	r3, r2
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	1d3a      	adds	r2, r7, #4
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f7 fcef 	bl	80040c4 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	dde1      	ble.n	800c6b6 <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 800c6f2:	4906      	ldr	r1, [pc, #24]	; (800c70c <buttonInit+0x94>)
 800c6f4:	4806      	ldr	r0, [pc, #24]	; (800c710 <buttonInit+0x98>)
 800c6f6:	f001 f8fd 	bl	800d8f4 <cliAdd>
#endif

  return ret;
 800c6fa:	7efb      	ldrb	r3, [r7, #27]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	40023800 	.word	0x40023800
 800c708:	20000128 	.word	0x20000128
 800c70c:	0800ca71 	.word	0x0800ca71
 800c710:	080138c8 	.word	0x080138c8

0800c714 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]


  if (ch >= BUTTON_MAX_CH)
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	2b02      	cmp	r3, #2
 800c726:	d901      	bls.n	800c72c <buttonGetPressed+0x18>
  {
    return false;
 800c728:	2300      	movs	r3, #0
 800c72a:	e01c      	b.n	800c766 <buttonGetPressed+0x52>
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	4a10      	ldr	r2, [pc, #64]	; (800c770 <buttonGetPressed+0x5c>)
 800c730:	011b      	lsls	r3, r3, #4
 800c732:	4413      	add	r3, r2
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	490d      	ldr	r1, [pc, #52]	; (800c770 <buttonGetPressed+0x5c>)
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	440b      	add	r3, r1
 800c73e:	3304      	adds	r3, #4
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	4619      	mov	r1, r3
 800c746:	4610      	mov	r0, r2
 800c748:	f7f7 fe58 	bl	80043fc <HAL_GPIO_ReadPin>
 800c74c:	4603      	mov	r3, r0
 800c74e:	4619      	mov	r1, r3
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	4a07      	ldr	r2, [pc, #28]	; (800c770 <buttonGetPressed+0x5c>)
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	4413      	add	r3, r2
 800c758:	330c      	adds	r3, #12
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	4299      	cmp	r1, r3
 800c75e:	d101      	bne.n	800c764 <buttonGetPressed+0x50>
  {
    ret = true;
 800c760:	2301      	movs	r3, #1
 800c762:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c764:	7bfb      	ldrb	r3, [r7, #15]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000128 	.word	0x20000128

0800c774 <buttonObjCreate>:
  BUTTON_OBJ_REPEATED_START,
  BUTTON_OBJ_REPEATED,
};

void buttonObjCreate(button_obj_t *p_obj, uint8_t ch, uint32_t pressed_time, uint32_t repeat_start_time, uint32_t repeat_pressed_time)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	607a      	str	r2, [r7, #4]
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	460b      	mov	r3, r1
 800c782:	72fb      	strb	r3, [r7, #11]
  p_obj->ch = ch;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	7afa      	ldrb	r2, [r7, #11]
 800c788:	701a      	strb	r2, [r3, #0]
  p_obj->state = 0;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	705a      	strb	r2, [r3, #1]
  p_obj->pre_time = millis();
 800c790:	f7fe fe9f 	bl	800b4d2 <millis>
 800c794:	4602      	mov	r2, r0
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	611a      	str	r2, [r3, #16]
  p_obj->pressed_time = pressed_time;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	605a      	str	r2, [r3, #4]
  p_obj->repeat_start_time = repeat_start_time;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	609a      	str	r2, [r3, #8]
  p_obj->repeat_pressed_time = repeat_pressed_time;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	60da      	str	r2, [r3, #12]
  p_obj->event_flag = 0;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	751a      	strb	r2, [r3, #20]
  p_obj->state_flag = 0;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	755a      	strb	r2, [r3, #21]
  p_obj->click_count = 0;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	759a      	strb	r2, [r3, #22]
}
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <buttonObjUpdateEx>:

bool buttonObjUpdateEx(button_obj_t *p_obj, bool clear_event)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]


  if (clear_event == true)
 800c7d8:	78fb      	ldrb	r3, [r7, #3]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <buttonObjUpdateEx+0x1c>
  {
    buttonObjClearEventAll(p_obj);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f939 	bl	800ca56 <buttonObjClearEventAll>
  }

  switch(p_obj->state)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	785b      	ldrb	r3, [r3, #1]
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	f200 8115 	bhi.w	800ca18 <buttonObjUpdateEx+0x250>
 800c7ee:	a201      	add	r2, pc, #4	; (adr r2, 800c7f4 <buttonObjUpdateEx+0x2c>)
 800c7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f4:	0800c809 	.word	0x0800c809
 800c7f8:	0800c829 	.word	0x0800c829
 800c7fc:	0800c853 	.word	0x0800c853
 800c800:	0800c905 	.word	0x0800c905
 800c804:	0800c98b 	.word	0x0800c98b
  {
    case BUTTON_OBJ_WAIT_FOR_RELEASED:
      if (buttonGetPressed(p_obj->ch) == false)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff ff81 	bl	800c714 <buttonGetPressed>
 800c812:	4603      	mov	r3, r0
 800c814:	f083 0301 	eor.w	r3, r3, #1
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 80f3 	beq.w	800ca06 <buttonObjUpdateEx+0x23e>
      {
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c826:	e0ee      	b.n	800ca06 <buttonObjUpdateEx+0x23e>

    case BUTTON_OBJ_WAIT_FOR_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff ff71 	bl	800c714 <buttonGetPressed>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 80e8 	beq.w	800ca0a <buttonObjUpdateEx+0x242>
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2202      	movs	r2, #2
 800c83e:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 800c840:	f7fe fe47 	bl	800b4d2 <millis>
 800c844:	4602      	mov	r2, r0
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	611a      	str	r2, [r3, #16]
        p_obj->click_count = 0;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	759a      	strb	r2, [r3, #22]
      }
      break;
 800c850:	e0db      	b.n	800ca0a <buttonObjUpdateEx+0x242>

    case BUTTON_OBJ_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff ff5c 	bl	800c714 <buttonGetPressed>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d029      	beq.n	800c8b6 <buttonObjUpdateEx+0xee>
      {
        if (millis()-p_obj->pre_time >= p_obj->pressed_time)
 800c862:	f7fe fe36 	bl	800b4d2 <millis>
 800c866:	4602      	mov	r2, r0
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	1ad2      	subs	r2, r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	f0c0 80cb 	bcc.w	800ca0e <buttonObjUpdateEx+0x246>
        {
          ret = true;
 800c878:	2301      	movs	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED_START;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2203      	movs	r2, #3
 800c880:	705a      	strb	r2, [r3, #1]
          p_obj->pre_time = millis();
 800c882:	f7fe fe26 	bl	800b4d2 <millis>
 800c886:	4602      	mov	r2, r0
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	611a      	str	r2, [r3, #16]
          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
 800c890:	f043 0304 	orr.w	r3, r3, #4
 800c894:	b2da      	uxtb	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_PRESSED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	7d5b      	ldrb	r3, [r3, #21]
 800c89e:	f043 0301 	orr.w	r3, r3, #1
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7d9b      	ldrb	r3, [r3, #22]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	759a      	strb	r2, [r3, #22]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
        }
      }
      break;
 800c8b4:	e0ab      	b.n	800ca0e <buttonObjUpdateEx+0x246>
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	705a      	strb	r2, [r3, #1]
        if (p_obj->state_flag & BUTTON_STATE_PRESSED)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	7d5b      	ldrb	r3, [r3, #21]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 80a2 	beq.w	800ca0e <buttonObjUpdateEx+0x246>
          p_obj->event_flag |= BUTTON_EVT_RELEASED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	7d1b      	ldrb	r3, [r3, #20]
 800c8ce:	f043 0302 	orr.w	r3, r3, #2
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	751a      	strb	r2, [r3, #20]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d5b      	ldrb	r3, [r3, #21]
 800c8dc:	f043 0302 	orr.w	r3, r3, #2
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7d5b      	ldrb	r3, [r3, #21]
 800c8ea:	f023 0301 	bic.w	r3, r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7d5b      	ldrb	r3, [r3, #21]
 800c8f8:	f023 0304 	bic.w	r3, r3, #4
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	755a      	strb	r2, [r3, #21]
      break;
 800c902:	e084      	b.n	800ca0e <buttonObjUpdateEx+0x246>

    case BUTTON_OBJ_REPEATED_START:
      if (buttonGetPressed(p_obj->ch) == true)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff ff03 	bl	800c714 <buttonGetPressed>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d031      	beq.n	800c978 <buttonObjUpdateEx+0x1b0>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_start_time)
 800c914:	f7fe fddd 	bl	800b4d2 <millis>
 800c918:	4602      	mov	r2, r0
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	429a      	cmp	r2, r3
 800c926:	d374      	bcc.n	800ca12 <buttonObjUpdateEx+0x24a>
        {
          ret = true;
 800c928:	2301      	movs	r3, #1
 800c92a:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 800c92c:	f7fe fdd1 	bl	800b4d2 <millis>
 800c930:	4602      	mov	r2, r0
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	611a      	str	r2, [r3, #16]

          ret = true;
 800c936:	2301      	movs	r3, #1
 800c938:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2204      	movs	r2, #4
 800c93e:	705a      	strb	r2, [r3, #1]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7d1b      	ldrb	r3, [r3, #20]
 800c944:	f043 0304 	orr.w	r3, r3, #4
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7d1b      	ldrb	r3, [r3, #20]
 800c952:	f043 0308 	orr.w	r3, r3, #8
 800c956:	b2da      	uxtb	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7d5b      	ldrb	r3, [r3, #21]
 800c960:	f043 0304 	orr.w	r3, r3, #4
 800c964:	b2da      	uxtb	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7d9b      	ldrb	r3, [r3, #22]
 800c96e:	3301      	adds	r3, #1
 800c970:	b2da      	uxtb	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	759a      	strb	r2, [r3, #22]
      else
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();
      }
      break;
 800c976:	e04c      	b.n	800ca12 <buttonObjUpdateEx+0x24a>
        p_obj->state = BUTTON_OBJ_PRESSED;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 800c97e:	f7fe fda8 	bl	800b4d2 <millis>
 800c982:	4602      	mov	r2, r0
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	611a      	str	r2, [r3, #16]
      break;
 800c988:	e043      	b.n	800ca12 <buttonObjUpdateEx+0x24a>

    case BUTTON_OBJ_REPEATED:
      if (buttonGetPressed(p_obj->ch) == true)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7ff fec0 	bl	800c714 <buttonGetPressed>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d02c      	beq.n	800c9f4 <buttonObjUpdateEx+0x22c>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_pressed_time)
 800c99a:	f7fe fd9a 	bl	800b4d2 <millis>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	1ad2      	subs	r2, r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d333      	bcc.n	800ca16 <buttonObjUpdateEx+0x24e>
        {
          ret = true;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 800c9b2:	f7fe fd8e 	bl	800b4d2 <millis>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	611a      	str	r2, [r3, #16]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7d1b      	ldrb	r3, [r3, #20]
 800c9c0:	f043 0304 	orr.w	r3, r3, #4
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	7d1b      	ldrb	r3, [r3, #20]
 800c9ce:	f043 0308 	orr.w	r3, r3, #8
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7d5b      	ldrb	r3, [r3, #21]
 800c9dc:	f043 0304 	orr.w	r3, r3, #4
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7d9b      	ldrb	r3, [r3, #22]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	759a      	strb	r2, [r3, #22]
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();

      }
      break;
 800c9f2:	e010      	b.n	800ca16 <buttonObjUpdateEx+0x24e>
        p_obj->state = BUTTON_OBJ_PRESSED;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 800c9fa:	f7fe fd6a 	bl	800b4d2 <millis>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	611a      	str	r2, [r3, #16]
      break;
 800ca04:	e007      	b.n	800ca16 <buttonObjUpdateEx+0x24e>
      break;
 800ca06:	bf00      	nop
 800ca08:	e006      	b.n	800ca18 <buttonObjUpdateEx+0x250>
      break;
 800ca0a:	bf00      	nop
 800ca0c:	e004      	b.n	800ca18 <buttonObjUpdateEx+0x250>
      break;
 800ca0e:	bf00      	nop
 800ca10:	e002      	b.n	800ca18 <buttonObjUpdateEx+0x250>
      break;
 800ca12:	bf00      	nop
 800ca14:	e000      	b.n	800ca18 <buttonObjUpdateEx+0x250>
      break;
 800ca16:	bf00      	nop
  }

  return ret;
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop

0800ca24 <buttonObjUpdate>:
  p_obj->click_count = 0;
  return true;
}

bool buttonObjUpdate(button_obj_t *p_obj)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  return buttonObjUpdateEx(p_obj, false);
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff feca 	bl	800c7c8 <buttonObjUpdateEx>
 800ca34:	4603      	mov	r3, r0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <buttonObjGetEvent>:
{
  return buttonObjUpdateEx(p_obj, true);
}

uint8_t buttonObjGetEvent(button_obj_t *p_obj)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  return p_obj->event_flag;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	7d1b      	ldrb	r3, [r3, #20]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <buttonObjClearEventAll>:

void buttonObjClearEventAll(button_obj_t *p_obj)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b083      	sub	sp, #12
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  p_obj->event_flag = 0;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	751a      	strb	r2, [r3, #20]
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b09c      	sub	sp, #112	; 0x70
 800ca74:	af02      	add	r7, sp, #8
 800ca76:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  EncoderState encoder;
  uint32_t temp;

  if (args->argc == 1 && args->isStr(0, "show"))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d13f      	bne.n	800cb06 <cliButton+0x96>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	496d      	ldr	r1, [pc, #436]	; (800cc40 <cliButton+0x1d0>)
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	4798      	blx	r3
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d037      	beq.n	800cb06 <cliButton+0x96>
  {
  	temp = micros();
 800ca96:	f7fe fd23 	bl	800b4e0 <micros>
 800ca9a:	6638      	str	r0, [r7, #96]	; 0x60
    while(cliKeepLoop())
 800ca9c:	e02b      	b.n	800caf6 <cliButton+0x86>
    {
    	encoder = Encoder_ReceiveAnalyze();
 800ca9e:	f001 f893 	bl	800dbc8 <Encoder_ReceiveAnalyze>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    	if(micros()-temp >= 100000)
 800caa8:	f7fe fd1a 	bl	800b4e0 <micros>
 800caac:	4602      	mov	r2, r0
 800caae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	4a64      	ldr	r2, [pc, #400]	; (800cc44 <cliButton+0x1d4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d91e      	bls.n	800caf6 <cliButton+0x86>
    	{
    		temp = micros();
 800cab8:	f7fe fd12 	bl	800b4e0 <micros>
 800cabc:	6638      	str	r0, [r7, #96]	; 0x60
				for (int i=0; i<BUTTON_MAX_CH; i++)
 800cabe:	2300      	movs	r3, #0
 800cac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cac2:	e00c      	b.n	800cade <cliButton+0x6e>
				{
					cliPrintf("%d", buttonGetPressed(i));
 800cac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	4618      	mov	r0, r3
 800caca:	f7ff fe23 	bl	800c714 <buttonGetPressed>
 800cace:	4603      	mov	r3, r0
 800cad0:	4619      	mov	r1, r3
 800cad2:	485d      	ldr	r0, [pc, #372]	; (800cc48 <cliButton+0x1d8>)
 800cad4:	f000 fdfe 	bl	800d6d4 <cliPrintf>
				for (int i=0; i<BUTTON_MAX_CH; i++)
 800cad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cada:	3301      	adds	r3, #1
 800cadc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	ddef      	ble.n	800cac4 <cliButton+0x54>
				}
				cliPrintf(" Encoder : %d", encoder);
 800cae4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800cae8:	4619      	mov	r1, r3
 800caea:	4858      	ldr	r0, [pc, #352]	; (800cc4c <cliButton+0x1dc>)
 800caec:	f000 fdf2 	bl	800d6d4 <cliPrintf>
				cliPrintf("\r\n");
 800caf0:	4857      	ldr	r0, [pc, #348]	; (800cc50 <cliButton+0x1e0>)
 800caf2:	f000 fdef 	bl	800d6d4 <cliPrintf>
    while(cliKeepLoop())
 800caf6:	f000 fee7 	bl	800d8c8 <cliKeepLoop>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1ce      	bne.n	800ca9e <cliButton+0x2e>
    	}
      //delay(100);
    }

    ret = true;
 800cb00:	2301      	movs	r3, #1
 800cb02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }

#if HW_BUTTON_OBJ_USE == 1
  if (args->argc == 1 && args->isStr(0, "event"))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	881b      	ldrh	r3, [r3, #0]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	f040 8087 	bne.w	800cc1e <cliButton+0x1ae>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	494f      	ldr	r1, [pc, #316]	; (800cc54 <cliButton+0x1e4>)
 800cb16:	2000      	movs	r0, #0
 800cb18:	4798      	blx	r3
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d07e      	beq.n	800cc1e <cliButton+0x1ae>
  {
    button_obj_t button[BUTTON_MAX_CH];
    uint8_t button_event;

    for (int i=0; i<BUTTON_MAX_CH; i++)
 800cb20:	2300      	movs	r3, #0
 800cb22:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb24:	e013      	b.n	800cb4e <cliButton+0xde>
    {
      buttonObjCreate(&button[i], i, 50, 1000, 100);
 800cb26:	f107 0108 	add.w	r1, r7, #8
 800cb2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	18c8      	adds	r0, r1, r3
 800cb36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb38:	b2d9      	uxtb	r1, r3
 800cb3a:	2364      	movs	r3, #100	; 0x64
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb42:	2232      	movs	r2, #50	; 0x32
 800cb44:	f7ff fe16 	bl	800c774 <buttonObjCreate>
    for (int i=0; i<BUTTON_MAX_CH; i++)
 800cb48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	dde8      	ble.n	800cb26 <cliButton+0xb6>
    }

    while(cliKeepLoop())
 800cb54:	e05b      	b.n	800cc0e <cliButton+0x19e>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800cb56:	2300      	movs	r3, #0
 800cb58:	657b      	str	r3, [r7, #84]	; 0x54
 800cb5a:	e052      	b.n	800cc02 <cliButton+0x192>
      {
        buttonObjUpdate(&button[i]);
 800cb5c:	f107 0108 	add.w	r1, r7, #8
 800cb60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb62:	4613      	mov	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4413      	add	r3, r2
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	440b      	add	r3, r1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff ff59 	bl	800ca24 <buttonObjUpdate>

        button_event = buttonObjGetEvent(&button[i]);
 800cb72:	f107 0108 	add.w	r1, r7, #8
 800cb76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	440b      	add	r3, r1
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff ff5b 	bl	800ca3e <buttonObjGetEvent>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

        if (button_event > 0)
 800cb8e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d032      	beq.n	800cbfc <cliButton+0x18c>
        {
          if (button_event & BUTTON_EVT_PRESSED)
 800cb96:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <cliButton+0x13a>
            cliPrintf("button %d pressed\r\n", i);
 800cba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cba4:	482c      	ldr	r0, [pc, #176]	; (800cc58 <cliButton+0x1e8>)
 800cba6:	f000 fd95 	bl	800d6d4 <cliPrintf>
          if (button_event & BUTTON_EVT_CLICKED)
 800cbaa:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800cbae:	f003 0304 	and.w	r3, r3, #4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00d      	beq.n	800cbd2 <cliButton+0x162>
            cliPrintf("button %d clicked cnt : %d\r\n", i, button[i].click_count);
 800cbb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbb8:	4613      	mov	r3, r2
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	3368      	adds	r3, #104	; 0x68
 800cbc2:	443b      	add	r3, r7
 800cbc4:	3b4a      	subs	r3, #74	; 0x4a
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbcc:	4823      	ldr	r0, [pc, #140]	; (800cc5c <cliButton+0x1ec>)
 800cbce:	f000 fd81 	bl	800d6d4 <cliPrintf>
          if (button_event & BUTTON_EVT_RELEASED)
 800cbd2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d003      	beq.n	800cbe6 <cliButton+0x176>
            cliPrintf("button %d released\r\n", i);
 800cbde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbe0:	481f      	ldr	r0, [pc, #124]	; (800cc60 <cliButton+0x1f0>)
 800cbe2:	f000 fd77 	bl	800d6d4 <cliPrintf>

          buttonObjClearEventAll(&button[i]);
 800cbe6:	f107 0108 	add.w	r1, r7, #8
 800cbea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbec:	4613      	mov	r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	440b      	add	r3, r1
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff ff2d 	bl	800ca56 <buttonObjClearEventAll>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800cbfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbfe:	3301      	adds	r3, #1
 800cc00:	657b      	str	r3, [r7, #84]	; 0x54
 800cc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	dda9      	ble.n	800cb5c <cliButton+0xec>
        }
      }

      delay(5);
 800cc08:	2005      	movs	r0, #5
 800cc0a:	f7fe fc4f 	bl	800b4ac <delay>
    while(cliKeepLoop())
 800cc0e:	f000 fe5b 	bl	800d8c8 <cliKeepLoop>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d19e      	bne.n	800cb56 <cliButton+0xe6>
    }

    ret = true;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  #endif


  if (ret != true)
 800cc1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc22:	f083 0301 	eor.w	r3, r3, #1
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d005      	beq.n	800cc38 <cliButton+0x1c8>
  {
    cliPrintf("button show\r\n");
 800cc2c:	480d      	ldr	r0, [pc, #52]	; (800cc64 <cliButton+0x1f4>)
 800cc2e:	f000 fd51 	bl	800d6d4 <cliPrintf>
	#if HW_BUTTON_OBJ_USE == 1
	cliPrintf("button event\r\n");
 800cc32:	480d      	ldr	r0, [pc, #52]	; (800cc68 <cliButton+0x1f8>)
 800cc34:	f000 fd4e 	bl	800d6d4 <cliPrintf>
	#endif
  }
}
 800cc38:	bf00      	nop
 800cc3a:	3768      	adds	r7, #104	; 0x68
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	080138d0 	.word	0x080138d0
 800cc44:	0001869f 	.word	0x0001869f
 800cc48:	080138d8 	.word	0x080138d8
 800cc4c:	080138dc 	.word	0x080138dc
 800cc50:	080138ec 	.word	0x080138ec
 800cc54:	080138f0 	.word	0x080138f0
 800cc58:	080138f8 	.word	0x080138f8
 800cc5c:	0801390c 	.word	0x0801390c
 800cc60:	0801392c 	.word	0x0801392c
 800cc64:	08013944 	.word	0x08013944
 800cc68:	08013954 	.word	0x08013954

0800cc6c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800cc70:	4b1b      	ldr	r3, [pc, #108]	; (800cce0 <cliInit+0x74>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800cc76:	4b1a      	ldr	r3, [pc, #104]	; (800cce0 <cliInit+0x74>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800cc7c:	4b18      	ldr	r3, [pc, #96]	; (800cce0 <cliInit+0x74>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800cc82:	4b17      	ldr	r3, [pc, #92]	; (800cce0 <cliInit+0x74>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800cc8a:	4b15      	ldr	r3, [pc, #84]	; (800cce0 <cliInit+0x74>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800cc92:	4b13      	ldr	r3, [pc, #76]	; (800cce0 <cliInit+0x74>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800cc9a:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <cliInit+0x74>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800cca2:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <cliInit+0x74>)
 800cca4:	4a0f      	ldr	r2, [pc, #60]	; (800cce4 <cliInit+0x78>)
 800cca6:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800ccaa:	4b0d      	ldr	r3, [pc, #52]	; (800cce0 <cliInit+0x74>)
 800ccac:	4a0e      	ldr	r2, [pc, #56]	; (800cce8 <cliInit+0x7c>)
 800ccae:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <cliInit+0x74>)
 800ccb4:	4a0d      	ldr	r2, [pc, #52]	; (800ccec <cliInit+0x80>)
 800ccb6:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <cliInit+0x74>)
 800ccbc:	4a0c      	ldr	r2, [pc, #48]	; (800ccf0 <cliInit+0x84>)
 800ccbe:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800ccc2:	4807      	ldr	r0, [pc, #28]	; (800cce0 <cliInit+0x74>)
 800ccc4:	f000 fb5c 	bl	800d380 <cliLineClean>


  cliAdd("help", cliShowList);
 800ccc8:	490a      	ldr	r1, [pc, #40]	; (800ccf4 <cliInit+0x88>)
 800ccca:	480b      	ldr	r0, [pc, #44]	; (800ccf8 <cliInit+0x8c>)
 800cccc:	f000 fe12 	bl	800d8f4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800ccd0:	490a      	ldr	r1, [pc, #40]	; (800ccfc <cliInit+0x90>)
 800ccd2:	480b      	ldr	r0, [pc, #44]	; (800cd00 <cliInit+0x94>)
 800ccd4:	f000 fe0e 	bl	800d8f4 <cliAdd>

  return true;
 800ccd8:	2301      	movs	r3, #1
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20001c44 	.word	0x20001c44
 800cce4:	0800d785 	.word	0x0800d785
 800cce8:	0800d7d5 	.word	0x0800d7d5
 800ccec:	0800d82d 	.word	0x0800d82d
 800ccf0:	0800d875 	.word	0x0800d875
 800ccf4:	0800d989 	.word	0x0800d989
 800ccf8:	08013964 	.word	0x08013964
 800ccfc:	0800d9f9 	.word	0x0800d9f9
 800cd00:	0801396c 	.word	0x0801396c

0800cd04 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	6039      	str	r1, [r7, #0]
 800cd0e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800cd10:	4a0a      	ldr	r2, [pc, #40]	; (800cd3c <cliOpen+0x38>)
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800cd16:	4a09      	ldr	r2, [pc, #36]	; (800cd3c <cliOpen+0x38>)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800cd1c:	79fb      	ldrb	r3, [r7, #7]
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f003 f875 	bl	800fe10 <uartOpen>
 800cd26:	4603      	mov	r3, r0
 800cd28:	461a      	mov	r2, r3
 800cd2a:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <cliOpen+0x38>)
 800cd2c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <cliOpen+0x38>)
 800cd30:	7a1b      	ldrb	r3, [r3, #8]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20001c44 	.word	0x20001c44

0800cd40 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800cd48:	4b34      	ldr	r3, [pc, #208]	; (800ce1c <cliShowLog+0xdc>)
 800cd4a:	7a5b      	ldrb	r3, [r3, #9]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d061      	beq.n	800ce14 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	7a98      	ldrb	r0, [r3, #10]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4930      	ldr	r1, [pc, #192]	; (800ce20 <cliShowLog+0xe0>)
 800cd5e:	f003 fa03 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7a98      	ldrb	r0, [r3, #10]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	492d      	ldr	r1, [pc, #180]	; (800ce24 <cliShowLog+0xe4>)
 800cd70:	f003 f9fa 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7a98      	ldrb	r0, [r3, #10]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800cd7e:	461a      	mov	r2, r3
 800cd80:	4929      	ldr	r1, [pc, #164]	; (800ce28 <cliShowLog+0xe8>)
 800cd82:	f003 f9f1 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7a98      	ldrb	r0, [r3, #10]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800cd90:	461a      	mov	r2, r3
 800cd92:	4926      	ldr	r1, [pc, #152]	; (800ce2c <cliShowLog+0xec>)
 800cd94:	f003 f9e8 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7a98      	ldrb	r0, [r3, #10]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800cda2:	461a      	mov	r2, r3
 800cda4:	4922      	ldr	r1, [pc, #136]	; (800ce30 <cliShowLog+0xf0>)
 800cda6:	f003 f9df 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7a98      	ldrb	r0, [r3, #10]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	491f      	ldr	r1, [pc, #124]	; (800ce34 <cliShowLog+0xf4>)
 800cdb8:	f003 f9d6 	bl	8010168 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7a98      	ldrb	r0, [r3, #10]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	491b      	ldr	r1, [pc, #108]	; (800ce38 <cliShowLog+0xf8>)
 800cdca:	f003 f9cd 	bl	8010168 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e012      	b.n	800cdfa <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7a98      	ldrb	r0, [r3, #10]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4613      	mov	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	00da      	lsls	r2, r3, #3
 800cde2:	1ad2      	subs	r2, r2, r3
 800cde4:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	4413      	add	r3, r2
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4913      	ldr	r1, [pc, #76]	; (800ce3c <cliShowLog+0xfc>)
 800cdf0:	f003 f9ba 	bl	8010168 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800ce00:	461a      	mov	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	dbe5      	blt.n	800cdd4 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7a9b      	ldrb	r3, [r3, #10]
 800ce0c:	490c      	ldr	r1, [pc, #48]	; (800ce40 <cliShowLog+0x100>)
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f003 f9aa 	bl	8010168 <uartPrintf>
  }
}
 800ce14:	bf00      	nop
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20001c44 	.word	0x20001c44
 800ce20:	08013970 	.word	0x08013970
 800ce24:	08013980 	.word	0x08013980
 800ce28:	08013990 	.word	0x08013990
 800ce2c:	080139a0 	.word	0x080139a0
 800ce30:	080139b0 	.word	0x080139b0
 800ce34:	080139c0 	.word	0x080139c0
 800ce38:	080139d0 	.word	0x080139d0
 800ce3c:	080139e0 	.word	0x080139e0
 800ce40:	080139f0 	.word	0x080139f0

0800ce44 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	4906      	ldr	r1, [pc, #24]	; (800ce6c <cliShowPrompt+0x28>)
 800ce52:	4618      	mov	r0, r3
 800ce54:	f003 f988 	bl	8010168 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	4904      	ldr	r1, [pc, #16]	; (800ce70 <cliShowPrompt+0x2c>)
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f003 f982 	bl	8010168 <uartPrintf>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	080139f4 	.word	0x080139f4
 800ce70:	080139f8 	.word	0x080139f8

0800ce74 <cliMain>:

bool cliMain(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800ce78:	4b0e      	ldr	r3, [pc, #56]	; (800ceb4 <cliMain+0x40>)
 800ce7a:	7a1b      	ldrb	r3, [r3, #8]
 800ce7c:	f083 0301 	eor.w	r3, r3, #1
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <cliMain+0x16>
  {
    return false;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e012      	b.n	800ceb0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800ce8a:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <cliMain+0x40>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f003 f862 	bl	800ff58 <uartAvailable>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d009      	beq.n	800ceae <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800ce9a:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <cliMain+0x40>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f003 f896 	bl	800ffd0 <uartRead>
 800cea4:	4603      	mov	r3, r0
 800cea6:	4619      	mov	r1, r3
 800cea8:	4802      	ldr	r0, [pc, #8]	; (800ceb4 <cliMain+0x40>)
 800ceaa:	f000 f805 	bl	800ceb8 <cliUpdate>
  }

  return true;
 800ceae:	2301      	movs	r3, #1
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20001c44 	.word	0x20001c44

0800ceb8 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08c      	sub	sp, #48	; 0x30
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800ced0:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	7c1b      	ldrb	r3, [r3, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 816d 	bne.w	800d1b6 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 800cedc:	78fb      	ldrb	r3, [r7, #3]
 800cede:	2b7f      	cmp	r3, #127	; 0x7f
 800cee0:	d02a      	beq.n	800cf38 <cliUpdate+0x80>
 800cee2:	2b7f      	cmp	r3, #127	; 0x7f
 800cee4:	f300 80da 	bgt.w	800d09c <cliUpdate+0x1e4>
 800cee8:	2b1b      	cmp	r3, #27
 800ceea:	d021      	beq.n	800cf30 <cliUpdate+0x78>
 800ceec:	2b1b      	cmp	r3, #27
 800ceee:	f300 80d5 	bgt.w	800d09c <cliUpdate+0x1e4>
 800cef2:	2b08      	cmp	r3, #8
 800cef4:	d062      	beq.n	800cfbc <cliUpdate+0x104>
 800cef6:	2b0d      	cmp	r3, #13
 800cef8:	f040 80d0 	bne.w	800d09c <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:

      	if (line->count > 0)
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d005      	beq.n	800cf12 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fa54 	bl	800d3b4 <cliLineAdd>
          cliRunCmd(p_cli);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fb3f 	bl	800d590 <cliRunCmd>
        }

        line->count = 0;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff ff8b 	bl	800ce44 <cliShowPrompt>
        break;
 800cf2e:	e142      	b.n	800d1b6 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	741a      	strb	r2, [r3, #16]
        break;
 800cf36:	e13e      	b.n	800d1b6 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cf44:	429a      	cmp	r2, r3
 800cf46:	f080 8131 	bcs.w	800d1ac <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf5e:	e013      	b.n	800cf88 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf66:	461a      	mov	r2, r3
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	441a      	add	r2, r3
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf72:	4619      	mov	r1, r3
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	440b      	add	r3, r1
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	69f9      	ldr	r1, [r7, #28]
 800cf7c:	5c89      	ldrb	r1, [r1, r2]
 800cf7e:	69fa      	ldr	r2, [r7, #28]
 800cf80:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	3301      	adds	r3, #1
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf88:	7efb      	ldrb	r3, [r7, #27]
 800cf8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	dbe7      	blt.n	800cf60 <cliUpdate+0xa8>
          }

          line->count--;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cf96:	3b01      	subs	r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	2100      	movs	r1, #0
 800cfac:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	498d      	ldr	r1, [pc, #564]	; (800d1e8 <cliUpdate+0x330>)
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f003 f8d7 	bl	8010168 <uartPrintf>
        }
        break;
 800cfba:	e0f7      	b.n	800d1ac <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d055      	beq.n	800d072 <cliUpdate+0x1ba>
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d050      	beq.n	800d072 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d10e      	bne.n	800cffe <cliUpdate+0x146>
          {
            line->count--;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cff6:	461a      	mov	r2, r3
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	2100      	movs	r1, #0
 800cffc:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d231      	bcs.n	800d072 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800d01e:	2300      	movs	r3, #0
 800d020:	62bb      	str	r3, [r7, #40]	; 0x28
 800d022:	e013      	b.n	800d04c <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d02a:	461a      	mov	r2, r3
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	441a      	add	r2, r3
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d036:	4619      	mov	r1, r3
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	440b      	add	r3, r1
 800d03c:	3b01      	subs	r3, #1
 800d03e:	69f9      	ldr	r1, [r7, #28]
 800d040:	5c89      	ldrb	r1, [r1, r2]
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	3301      	adds	r3, #1
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d04c:	7ebb      	ldrb	r3, [r7, #26]
 800d04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d050:	429a      	cmp	r2, r3
 800d052:	dbe7      	blt.n	800d024 <cliUpdate+0x16c>
            }

            line->count--;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d05a:	3b01      	subs	r3, #1
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d06a:	461a      	mov	r2, r3
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	2100      	movs	r1, #0
 800d070:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 8099 	beq.w	800d1b0 <cliUpdate+0x2f8>
        {
          line->cursor--;
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d084:	3b01      	subs	r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	4956      	ldr	r1, [pc, #344]	; (800d1ec <cliUpdate+0x334>)
 800d094:	4618      	mov	r0, r3
 800d096:	f003 f867 	bl	8010168 <uartPrintf>
        }
        break;
 800d09a:	e089      	b.n	800d1b0 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	69fa      	ldr	r2, [r7, #28]
 800d0a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f280 8082 	bge.w	800d1b4 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d124      	bne.n	800d10a <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	1cf9      	adds	r1, r7, #3
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f002 ffef 	bl	80100ac <uartWrite>

            line->buf[line->cursor] = rx_data;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	78f9      	ldrb	r1, [r7, #3]
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	5499      	strb	r1, [r3, r2]
            line->count++;
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d102:	461a      	mov	r2, r3
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2100      	movs	r1, #0
 800d108:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d116:	429a      	cmp	r2, r3
 800d118:	d24c      	bcs.n	800d1b4 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800d12a:	2300      	movs	r3, #0
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24
 800d12e:	e013      	b.n	800d158 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d136:	461a      	mov	r2, r3
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	1e5a      	subs	r2, r3, #1
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d144:	4619      	mov	r1, r3
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	1acb      	subs	r3, r1, r3
 800d14a:	69f9      	ldr	r1, [r7, #28]
 800d14c:	5c89      	ldrb	r1, [r1, r2]
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	3301      	adds	r3, #1
 800d156:	627b      	str	r3, [r7, #36]	; 0x24
 800d158:	7e7b      	ldrb	r3, [r7, #25]
 800d15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d15c:	429a      	cmp	r2, r3
 800d15e:	dbe7      	blt.n	800d130 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d166:	461a      	mov	r2, r3
 800d168:	78f9      	ldrb	r1, [r7, #3]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d174:	3301      	adds	r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d184:	3301      	adds	r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d194:	461a      	mov	r2, r3
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	2100      	movs	r1, #0
 800d19a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	78fa      	ldrb	r2, [r7, #3]
 800d1a2:	4913      	ldr	r1, [pc, #76]	; (800d1f0 <cliUpdate+0x338>)
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f002 ffdf 	bl	8010168 <uartPrintf>
          }
        }
        break;
 800d1aa:	e003      	b.n	800d1b4 <cliUpdate+0x2fc>
        break;
 800d1ac:	bf00      	nop
 800d1ae:	e002      	b.n	800d1b6 <cliUpdate+0x2fe>
        break;
 800d1b0:	bf00      	nop
 800d1b2:	e000      	b.n	800d1b6 <cliUpdate+0x2fe>
        break;
 800d1b4:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7c1b      	ldrb	r3, [r3, #16]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	f200 80d2 	bhi.w	800d366 <cliUpdate+0x4ae>
 800d1c2:	a201      	add	r2, pc, #4	; (adr r2, 800d1c8 <cliUpdate+0x310>)
 800d1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c8:	0800d1d9 	.word	0x0800d1d9
 800d1cc:	0800d1e1 	.word	0x0800d1e1
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d35d 	.word	0x0800d35d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	741a      	strb	r2, [r3, #16]
      break;
 800d1de:	e0c2      	b.n	800d366 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2203      	movs	r2, #3
 800d1e4:	741a      	strb	r2, [r3, #16]
      break;
 800d1e6:	e0be      	b.n	800d366 <cliUpdate+0x4ae>
 800d1e8:	08013a00 	.word	0x08013a00
 800d1ec:	08013a08 	.word	0x08013a08
 800d1f0:	08013a10 	.word	0x08013a10

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	2b44      	cmp	r3, #68	; 0x44
 800d1fe:	d11a      	bne.n	800d236 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d206:	2b00      	cmp	r3, #0
 800d208:	d015      	beq.n	800d236 <cliUpdate+0x37e>
        {
          line->cursor--;
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d210:	3b01      	subs	r3, #1
 800d212:	b2da      	uxtb	r2, r3
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800d21a:	231b      	movs	r3, #27
 800d21c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800d21e:	235b      	movs	r3, #91	; 0x5b
 800d220:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800d222:	78fb      	ldrb	r3, [r7, #3]
 800d224:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	f107 010c 	add.w	r1, r7, #12
 800d22e:	2203      	movs	r2, #3
 800d230:	4618      	mov	r0, r3
 800d232:	f002 ff3b 	bl	80100ac <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800d236:	78fb      	ldrb	r3, [r7, #3]
 800d238:	2b43      	cmp	r3, #67	; 0x43
 800d23a:	d11d      	bne.n	800d278 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d215      	bcs.n	800d278 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800d25c:	231b      	movs	r3, #27
 800d25e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800d260:	235b      	movs	r3, #91	; 0x5b
 800d262:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	f107 010c 	add.w	r1, r7, #12
 800d270:	2203      	movs	r2, #3
 800d272:	4618      	mov	r0, r3
 800d274:	f002 ff1a 	bl	80100ac <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800d278:	78fb      	ldrb	r3, [r7, #3]
 800d27a:	2b41      	cmp	r3, #65	; 0x41
 800d27c:	d10c      	bne.n	800d298 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800d27e:	2101      	movs	r1, #1
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f8eb 	bl	800d45c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	781a      	ldrb	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f002 ff68 	bl	8010168 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800d298:	78fb      	ldrb	r3, [r7, #3]
 800d29a:	2b42      	cmp	r3, #66	; 0x42
 800d29c:	d10c      	bne.n	800d2b8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800d29e:	2100      	movs	r1, #0
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f8db 	bl	800d45c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	781a      	ldrb	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	f002 ff58 	bl	8010168 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800d2b8:	78fb      	ldrb	r3, [r7, #3]
 800d2ba:	2b31      	cmp	r3, #49	; 0x31
 800d2bc:	d10f      	bne.n	800d2de <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7818      	ldrb	r0, [r3, #0]
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	492b      	ldr	r1, [pc, #172]	; (800d378 <cliUpdate+0x4c0>)
 800d2cc:	f002 ff4c 	bl	8010168 <uartPrintf>
        line->cursor = 0;
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2204      	movs	r2, #4
 800d2dc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800d2de:	78fb      	ldrb	r3, [r7, #3]
 800d2e0:	2b34      	cmp	r3, #52	; 0x34
 800d2e2:	d13f      	bne.n	800d364 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d210      	bcs.n	800d316 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d302:	b29b      	uxth	r3, r3
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	8afa      	ldrh	r2, [r7, #22]
 800d30e:	491b      	ldr	r1, [pc, #108]	; (800d37c <cliUpdate+0x4c4>)
 800d310:	4618      	mov	r0, r3
 800d312:	f002 ff29 	bl	8010168 <uartPrintf>
        }
        if (line->cursor > line->count)
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d322:	429a      	cmp	r2, r3
 800d324:	d910      	bls.n	800d348 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d334:	b29b      	uxth	r3, r3
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	8afa      	ldrh	r2, [r7, #22]
 800d340:	490d      	ldr	r1, [pc, #52]	; (800d378 <cliUpdate+0x4c0>)
 800d342:	4618      	mov	r0, r3
 800d344:	f002 ff10 	bl	8010168 <uartPrintf>
        }
        line->cursor = line->count;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2204      	movs	r2, #4
 800d358:	741a      	strb	r2, [r3, #16]
      }
      break;
 800d35a:	e003      	b.n	800d364 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	741a      	strb	r2, [r3, #16]
      break;
 800d362:	e000      	b.n	800d366 <cliUpdate+0x4ae>
      break;
 800d364:	bf00      	nop
  }



  cliShowLog(p_cli);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fcea 	bl	800cd40 <cliShowLog>

  return ret;
 800d36c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d370:	4618      	mov	r0, r3
 800d372:	3730      	adds	r7, #48	; 0x30
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	08013a1c 	.word	0x08013a1c
 800d37c:	08013a24 	.word	0x08013a24

0800d380 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	221f      	movs	r2, #31
 800d39c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6879      	ldr	r1, [r7, #4]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	00da      	lsls	r2, r3, #3
 800d3ce:	1ad2      	subs	r2, r2, r3
 800d3d0:	188b      	adds	r3, r1, r2
 800d3d2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800d3dc:	4694      	mov	ip, r2
 800d3de:	f104 0e20 	add.w	lr, r4, #32
 800d3e2:	4665      	mov	r5, ip
 800d3e4:	4626      	mov	r6, r4
 800d3e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d3e8:	6028      	str	r0, [r5, #0]
 800d3ea:	6069      	str	r1, [r5, #4]
 800d3ec:	60aa      	str	r2, [r5, #8]
 800d3ee:	60eb      	str	r3, [r5, #12]
 800d3f0:	3410      	adds	r4, #16
 800d3f2:	f10c 0c10 	add.w	ip, ip, #16
 800d3f6:	4574      	cmp	r4, lr
 800d3f8:	d1f3      	bne.n	800d3e2 <cliLineAdd+0x2e>
 800d3fa:	4663      	mov	r3, ip
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	8811      	ldrh	r1, [r2, #0]
 800d400:	7892      	ldrb	r2, [r2, #2]
 800d402:	8019      	strh	r1, [r3, #0]
 800d404:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d807      	bhi.n	800d420 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800d416:	3301      	adds	r3, #1
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800d426:	b25a      	sxtb	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800d434:	3301      	adds	r3, #1
 800d436:	425a      	negs	r2, r3
 800d438:	f003 0303 	and.w	r3, r3, #3
 800d43c:	f002 0203 	and.w	r2, r2, #3
 800d440:	bf58      	it	pl
 800d442:	4253      	negpl	r3, r2
 800d444:	b2da      	uxtb	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d45c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800d45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 8086 	beq.w	800d580 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d008      	beq.n	800d490 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	7818      	ldrb	r0, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800d488:	461a      	mov	r2, r3
 800d48a:	493f      	ldr	r1, [pc, #252]	; (800d588 <cliLineChange+0x12c>)
 800d48c:	f002 fe6c 	bl	8010168 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800d496:	2b00      	cmp	r3, #0
 800d498:	d008      	beq.n	800d4ac <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	7818      	ldrb	r0, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	4939      	ldr	r1, [pc, #228]	; (800d58c <cliLineChange+0x130>)
 800d4a8:	f002 fe5e 	bl	8010168 <uartPrintf>
  }


  if (key_up == true)
 800d4ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d125      	bne.n	800d500 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d006      	beq.n	800d4cc <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800d4c4:	b25a      	sxtb	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800d4da:	4413      	add	r3, r2
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800d4e4:	fb93 f1f2 	sdiv	r1, r3, r2
 800d4e8:	fb01 f202 	mul.w	r2, r1, r2
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	b25a      	sxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800d4fc:	73fb      	strb	r3, [r7, #15]
 800d4fe:	e013      	b.n	800d528 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800d506:	3301      	adds	r3, #1
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800d50e:	fb93 f1f2 	sdiv	r1, r3, r2
 800d512:	fb01 f202 	mul.w	r2, r1, r2
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	b25a      	sxtb	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800d526:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800d528:	7bfa      	ldrb	r2, [r7, #15]
 800d52a:	6879      	ldr	r1, [r7, #4]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	4613      	mov	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	00da      	lsls	r2, r3, #3
 800d536:	1ad2      	subs	r2, r2, r3
 800d538:	1883      	adds	r3, r0, r2
 800d53a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800d53e:	461c      	mov	r4, r3
 800d540:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800d544:	f104 0c20 	add.w	ip, r4, #32
 800d548:	4635      	mov	r5, r6
 800d54a:	4623      	mov	r3, r4
 800d54c:	6818      	ldr	r0, [r3, #0]
 800d54e:	6859      	ldr	r1, [r3, #4]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d556:	3410      	adds	r4, #16
 800d558:	3610      	adds	r6, #16
 800d55a:	4564      	cmp	r4, ip
 800d55c:	d1f4      	bne.n	800d548 <cliLineChange+0xec>
 800d55e:	4633      	mov	r3, r6
 800d560:	4622      	mov	r2, r4
 800d562:	8811      	ldrh	r1, [r2, #0]
 800d564:	7892      	ldrb	r2, [r2, #2]
 800d566:	8019      	strh	r1, [r3, #0]
 800d568:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800d57e:	e000      	b.n	800d582 <cliLineChange+0x126>
    return;
 800d580:	bf00      	nop
}
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d588:	08013a1c 	.word	0x08013a1c
 800d58c:	08013a2c 	.word	0x08013a2c

0800d590 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800d598:	2300      	movs	r3, #0
 800d59a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f851 	bl	800d644 <cliParseArgs>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d046      	beq.n	800d636 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800d5a8:	4825      	ldr	r0, [pc, #148]	; (800d640 <cliRunCmd+0xb0>)
 800d5aa:	f000 f893 	bl	800d6d4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f8b1 	bl	800d71c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e033      	b.n	800d628 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f7f2 fdf8 	bl	80001d0 <strcmp>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d11d      	bne.n	800d622 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4613      	mov	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	4413      	add	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	440b      	add	r3, r1
 800d610:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800d61c:	4610      	mov	r0, r2
 800d61e:	4798      	blx	r3
        break;
 800d620:	e009      	b.n	800d636 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3301      	adds	r3, #1
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800d62e:	461a      	mov	r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4293      	cmp	r3, r2
 800d634:	dbc4      	blt.n	800d5c0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800d636:	7afb      	ldrb	r3, [r7, #11]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	08013a34 	.word	0x08013a34

0800d644 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800d64c:	2300      	movs	r3, #0
 800d64e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800d662:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d66a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800d66c:	8afb      	ldrh	r3, [r7, #22]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800d678:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <cliParseArgs+0x8c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f107 0208 	add.w	r2, r7, #8
 800d680:	4619      	mov	r1, r3
 800d682:	6938      	ldr	r0, [r7, #16]
 800d684:	f004 f8c0 	bl	8011808 <strtok_r>
 800d688:	61b8      	str	r0, [r7, #24]
 800d68a:	e010      	b.n	800d6ae <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800d68c:	8afb      	ldrh	r3, [r7, #22]
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	82fa      	strh	r2, [r7, #22]
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	69ba      	ldr	r2, [r7, #24]
 800d69a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800d69c:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <cliParseArgs+0x8c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f107 0208 	add.w	r2, r7, #8
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f004 f8ae 	bl	8011808 <strtok_r>
 800d6ac:	61b8      	str	r0, [r7, #24]
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1eb      	bne.n	800d68c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8afa      	ldrh	r2, [r7, #22]
 800d6b8:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800d6bc:	8afb      	ldrh	r3, [r7, #22]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <cliParseArgs+0x82>
  {
    ret = true;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800d6c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3720      	adds	r7, #32
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20000158 	.word	0x20000158

0800d6d4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800d6d4:	b40f      	push	{r0, r1, r2, r3}
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800d6dc:	f107 031c 	add.w	r3, r7, #28
 800d6e0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800d6e2:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <cliPrintf+0x44>)
 800d6e4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f103 0011 	add.w	r0, r3, #17
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	69ba      	ldr	r2, [r7, #24]
 800d6f0:	21ff      	movs	r1, #255	; 0xff
 800d6f2:	f003 ffa3 	bl	801163c <vsniprintf>
 800d6f6:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	7818      	ldrb	r0, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3311      	adds	r3, #17
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	4619      	mov	r1, r3
 800d704:	f002 fcd2 	bl	80100ac <uartWrite>
}
 800d708:	bf00      	nop
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d712:	b004      	add	sp, #16
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20001c44 	.word	0x20001c44

0800d71c <cliToUpper>:

void cliToUpper(char *str)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800d724:	2300      	movs	r3, #0
 800d726:	81fb      	strh	r3, [r7, #14]
 800d728:	e018      	b.n	800d75c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800d72a:	89fb      	ldrh	r3, [r7, #14]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	4413      	add	r3, r2
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800d734:	7b7b      	ldrb	r3, [r7, #13]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d014      	beq.n	800d764 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800d73a:	7b7b      	ldrb	r3, [r7, #13]
 800d73c:	2b60      	cmp	r3, #96	; 0x60
 800d73e:	d905      	bls.n	800d74c <cliToUpper+0x30>
 800d740:	7b7b      	ldrb	r3, [r7, #13]
 800d742:	2b7a      	cmp	r3, #122	; 0x7a
 800d744:	d802      	bhi.n	800d74c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800d746:	7b7b      	ldrb	r3, [r7, #13]
 800d748:	3b20      	subs	r3, #32
 800d74a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800d74c:	89fb      	ldrh	r3, [r7, #14]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	4413      	add	r3, r2
 800d752:	7b7a      	ldrb	r2, [r7, #13]
 800d754:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800d756:	89fb      	ldrh	r3, [r7, #14]
 800d758:	3301      	adds	r3, #1
 800d75a:	81fb      	strh	r3, [r7, #14]
 800d75c:	89fb      	ldrh	r3, [r7, #14]
 800d75e:	2b0f      	cmp	r3, #15
 800d760:	d9e3      	bls.n	800d72a <cliToUpper+0xe>
 800d762:	e000      	b.n	800d766 <cliToUpper+0x4a>
      break;
 800d764:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800d766:	89fb      	ldrh	r3, [r7, #14]
 800d768:	2b10      	cmp	r3, #16
 800d76a:	d105      	bne.n	800d778 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800d76c:	89fb      	ldrh	r3, [r7, #14]
 800d76e:	3b01      	subs	r3, #1
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4413      	add	r3, r2
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
  }
}
 800d778:	bf00      	nop
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <cliArgsGetData+0x4c>)
 800d794:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	b29a      	uxth	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d301      	bcc.n	800d7a8 <cliArgsGetData+0x24>
  {
    return 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e00e      	b.n	800d7c6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f003 fe04 	bl	80113c8 <strtoul>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	60fb      	str	r3, [r7, #12]

  return ret;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20001c44 	.word	0x20001c44

0800d7d4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	4603      	mov	r3, r0
 800d7dc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800d7de:	f04f 0300 	mov.w	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800d7e4:	4b10      	ldr	r3, [pc, #64]	; (800d828 <cliArgsGetFloat+0x54>)
 800d7e6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800d7e8:	79fb      	ldrb	r3, [r7, #7]
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d302      	bcc.n	800d7fc <cliArgsGetFloat+0x28>
  {
    return 0;
 800d7f6:	f04f 0300 	mov.w	r3, #0
 800d7fa:	e00d      	b.n	800d818 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2100      	movs	r1, #0
 800d80c:	4618      	mov	r0, r3
 800d80e:	f003 fd03 	bl	8011218 <strtof>
 800d812:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800d816:	68fb      	ldr	r3, [r7, #12]
}
 800d818:	ee07 3a90 	vmov	s15, r3
 800d81c:	eeb0 0a67 	vmov.f32	s0, s15
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20001c44 	.word	0x20001c44

0800d82c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800d83a:	4b0d      	ldr	r3, [pc, #52]	; (800d870 <cliArgsGetStr+0x44>)
 800d83c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800d83e:	79fb      	ldrb	r3, [r7, #7]
 800d840:	b29a      	uxth	r2, r3
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800d848:	429a      	cmp	r2, r3
 800d84a:	d301      	bcc.n	800d850 <cliArgsGetStr+0x24>
  {
    return 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	e008      	b.n	800d862 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	60fb      	str	r3, [r7, #12]

  return ret;
 800d860:	68fb      	ldr	r3, [r7, #12]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	20001c44 	.word	0x20001c44

0800d874 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	6039      	str	r1, [r7, #0]
 800d87e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800d884:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <cliArgsIsStr+0x50>)
 800d886:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800d892:	429a      	cmp	r2, r3
 800d894:	d301      	bcc.n	800d89a <cliArgsIsStr+0x26>
  {
    return 0;
 800d896:	2300      	movs	r3, #0
 800d898:	e010      	b.n	800d8bc <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4413      	add	r3, r2
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	6838      	ldr	r0, [r7, #0]
 800d8ac:	f7f2 fc90 	bl	80001d0 <strcmp>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <cliArgsIsStr+0x46>
  {
    ret = true;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	20001c44 	.word	0x20001c44

0800d8c8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800d8ce:	4b08      	ldr	r3, [pc, #32]	; (800d8f0 <cliKeepLoop+0x28>)
 800d8d0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f002 fb3e 	bl	800ff58 <uartAvailable>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <cliKeepLoop+0x1e>
  {
    return true;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e000      	b.n	800d8e8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800d8e6:	2300      	movs	r3, #0
  }
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	20001c44 	.word	0x20001c44

0800d8f4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800d8fe:	2301      	movs	r3, #1
 800d900:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800d902:	4b20      	ldr	r3, [pc, #128]	; (800d984 <cliAdd+0x90>)
 800d904:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800d90c:	2b0f      	cmp	r3, #15
 800d90e:	d901      	bls.n	800d914 <cliAdd+0x20>
  {
    return false;
 800d910:	2300      	movs	r3, #0
 800d912:	e032      	b.n	800d97a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800d91a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800d91c:	89fa      	ldrh	r2, [r7, #14]
 800d91e:	4613      	mov	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	4413      	add	r3, r2
 800d92e:	3304      	adds	r3, #4
 800d930:	6879      	ldr	r1, [r7, #4]
 800d932:	4618      	mov	r0, r3
 800d934:	f003 ffdf 	bl	80118f6 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800d938:	89fa      	ldrh	r2, [r7, #14]
 800d93a:	6939      	ldr	r1, [r7, #16]
 800d93c:	4613      	mov	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	4413      	add	r3, r2
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	440b      	add	r3, r1
 800d946:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800d94e:	89fa      	ldrh	r2, [r7, #14]
 800d950:	4613      	mov	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	4413      	add	r3, r2
 800d960:	3304      	adds	r3, #4
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff feda 	bl	800d71c <cliToUpper>

  p_cli->cmd_count++;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800d96e:	3301      	adds	r3, #1
 800d970:	b29a      	uxth	r2, r3
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20001c44 	.word	0x20001c44

0800d988 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800d990:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <cliShowList+0x60>)
 800d992:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800d994:	4815      	ldr	r0, [pc, #84]	; (800d9ec <cliShowList+0x64>)
 800d996:	f7ff fe9d 	bl	800d6d4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800d99a:	4815      	ldr	r0, [pc, #84]	; (800d9f0 <cliShowList+0x68>)
 800d99c:	f7ff fe9a 	bl	800d6d4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e012      	b.n	800d9cc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff fe8a 	bl	800d6d4 <cliPrintf>
    cliPrintf("\r\n");
 800d9c0:	480a      	ldr	r0, [pc, #40]	; (800d9ec <cliShowList+0x64>)
 800d9c2:	f7ff fe87 	bl	800d6d4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	dbe5      	blt.n	800d9a6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800d9da:	4806      	ldr	r0, [pc, #24]	; (800d9f4 <cliShowList+0x6c>)
 800d9dc:	f7ff fe7a 	bl	800d6d4 <cliPrintf>
}
 800d9e0:	bf00      	nop
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20001c44 	.word	0x20001c44
 800d9ec:	08013a34 	.word	0x08013a34
 800d9f0:	08013a38 	.word	0x08013a38
 800d9f4:	08013a58 	.word	0x08013a58

0800d9f8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	; 0x30
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800da00:	2310      	movs	r3, #16
 800da02:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	881b      	ldrh	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800da18:	4840      	ldr	r0, [pc, #256]	; (800db1c <cliMemoryDump+0x124>)
 800da1a:	f7ff fe5b 	bl	800d6d4 <cliPrintf>
 800da1e:	e07a      	b.n	800db16 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2b01      	cmp	r3, #1
 800da24:	dd09      	ble.n	800da3a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	3304      	adds	r3, #4
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2200      	movs	r2, #0
 800da2e:	2100      	movs	r1, #0
 800da30:	4618      	mov	r0, r3
 800da32:	f003 fcc9 	bl	80113c8 <strtoul>
 800da36:	4603      	mov	r3, r0
 800da38:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	4618      	mov	r0, r3
 800da44:	f003 fcc0 	bl	80113c8 <strtoul>
 800da48:	4603      	mov	r3, r0
 800da4a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800da50:	4833      	ldr	r0, [pc, #204]	; (800db20 <cliMemoryDump+0x128>)
 800da52:	f7ff fe3f 	bl	800d6d4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800da56:	2300      	movs	r3, #0
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da5a:	e058      	b.n	800db0e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	f003 0303 	and.w	r3, r3, #3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d104      	bne.n	800da70 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	4619      	mov	r1, r3
 800da6a:	482e      	ldr	r0, [pc, #184]	; (800db24 <cliMemoryDump+0x12c>)
 800da6c:	f7ff fe32 	bl	800d6d4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4619      	mov	r1, r3
 800da76:	482c      	ldr	r0, [pc, #176]	; (800db28 <cliMemoryDump+0x130>)
 800da78:	f7ff fe2c 	bl	800d6d4 <cliPrintf>

    if ((idx%4) == 3)
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	425a      	negs	r2, r3
 800da80:	f003 0303 	and.w	r3, r3, #3
 800da84:	f002 0203 	and.w	r2, r2, #3
 800da88:	bf58      	it	pl
 800da8a:	4253      	negpl	r3, r2
 800da8c:	2b03      	cmp	r3, #3
 800da8e:	d138      	bne.n	800db02 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800da90:	4826      	ldr	r0, [pc, #152]	; (800db2c <cliMemoryDump+0x134>)
 800da92:	f7ff fe1f 	bl	800d6d4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800da96:	2300      	movs	r3, #0
 800da98:	623b      	str	r3, [r7, #32]
 800da9a:	e02c      	b.n	800daf6 <cliMemoryDump+0xfe>
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800daa0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
 800daa6:	e01d      	b.n	800dae4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800daa8:	f107 020c 	add.w	r2, r7, #12
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	4413      	add	r3, r2
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b1f      	cmp	r3, #31
 800dab4:	d910      	bls.n	800dad8 <cliMemoryDump+0xe0>
 800dab6:	f107 020c 	add.w	r2, r7, #12
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	4413      	add	r3, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b7e      	cmp	r3, #126	; 0x7e
 800dac2:	d809      	bhi.n	800dad8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800dac4:	f107 020c 	add.w	r2, r7, #12
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	4413      	add	r3, r2
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	4619      	mov	r1, r3
 800dad0:	4817      	ldr	r0, [pc, #92]	; (800db30 <cliMemoryDump+0x138>)
 800dad2:	f7ff fdff 	bl	800d6d4 <cliPrintf>
 800dad6:	e002      	b.n	800dade <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800dad8:	4816      	ldr	r0, [pc, #88]	; (800db34 <cliMemoryDump+0x13c>)
 800dada:	f7ff fdfb 	bl	800d6d4 <cliPrintf>
        for (i=0;i<4;i++)
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	3301      	adds	r3, #1
 800dae2:	61fb      	str	r3, [r7, #28]
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	ddde      	ble.n	800daa8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	3304      	adds	r3, #4
 800daee:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	3301      	adds	r3, #1
 800daf4:	623b      	str	r3, [r7, #32]
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	2b03      	cmp	r3, #3
 800dafa:	ddcf      	ble.n	800da9c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800dafc:	480e      	ldr	r0, [pc, #56]	; (800db38 <cliMemoryDump+0x140>)
 800dafe:	f7ff fde9 	bl	800d6d4 <cliPrintf>
    }
    addr++;
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	3304      	adds	r3, #4
 800db06:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	3301      	adds	r3, #1
 800db0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db12:	429a      	cmp	r2, r3
 800db14:	dba2      	blt.n	800da5c <cliMemoryDump+0x64>
  }
}
 800db16:	3730      	adds	r7, #48	; 0x30
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	08013a78 	.word	0x08013a78
 800db20:	08013a8c 	.word	0x08013a8c
 800db24:	08013a94 	.word	0x08013a94
 800db28:	08013aa0 	.word	0x08013aa0
 800db2c:	08013aa8 	.word	0x08013aa8
 800db30:	08013aac 	.word	0x08013aac
 800db34:	08013ab0 	.word	0x08013ab0
 800db38:	08013ab4 	.word	0x08013ab4

0800db3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800db42:	2300      	movs	r3, #0
 800db44:	607b      	str	r3, [r7, #4]
 800db46:	4b1f      	ldr	r3, [pc, #124]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db4a:	4a1e      	ldr	r2, [pc, #120]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db50:	6313      	str	r3, [r2, #48]	; 0x30
 800db52:	4b1c      	ldr	r3, [pc, #112]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db5a:	607b      	str	r3, [r7, #4]
 800db5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800db5e:	2300      	movs	r3, #0
 800db60:	603b      	str	r3, [r7, #0]
 800db62:	4b18      	ldr	r3, [pc, #96]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db66:	4a17      	ldr	r2, [pc, #92]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800db6c:	6313      	str	r3, [r2, #48]	; 0x30
 800db6e:	4b15      	ldr	r3, [pc, #84]	; (800dbc4 <MX_DMA_Init+0x88>)
 800db70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800db7a:	2200      	movs	r2, #0
 800db7c:	2100      	movs	r1, #0
 800db7e:	200c      	movs	r0, #12
 800db80:	f7f5 fb8f 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800db84:	200c      	movs	r0, #12
 800db86:	f7f5 fba8 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800db8a:	2200      	movs	r2, #0
 800db8c:	2100      	movs	r1, #0
 800db8e:	200e      	movs	r0, #14
 800db90:	f7f5 fb87 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800db94:	200e      	movs	r0, #14
 800db96:	f7f5 fba0 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800db9a:	2200      	movs	r2, #0
 800db9c:	2100      	movs	r1, #0
 800db9e:	2038      	movs	r0, #56	; 0x38
 800dba0:	f7f5 fb7f 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800dba4:	2038      	movs	r0, #56	; 0x38
 800dba6:	f7f5 fb98 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2100      	movs	r1, #0
 800dbae:	203b      	movs	r0, #59	; 0x3b
 800dbb0:	f7f5 fb77 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800dbb4:	203b      	movs	r0, #59	; 0x3b
 800dbb6:	f7f5 fb90 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 800dbba:	bf00      	nop
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	40023800 	.word	0x40023800

0800dbc8 <Encoder_ReceiveAnalyze>:
  return state;
}


// Analyze encoder value and return state
EncoderState Encoder_ReceiveAnalyze() {
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08a      	sub	sp, #40	; 0x28
 800dbcc:	af00      	add	r7, sp, #0
  const millis_t now = millis();
 800dbce:	f7fd fc80 	bl	800b4d2 <millis>
 800dbd2:	61f8      	str	r0, [r7, #28]
  static uint8_t lastEncoderBits;
  uint8_t newbutton = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  static signed char temp_diff = 0;

  EncoderState temp_diffState = ENCODER_DIFF_NO;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if (buttonGetPressed(BTN_EN1)) newbutton |= EN_A;
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	f7fe fd97 	bl	800c714 <buttonGetPressed>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <Encoder_ReceiveAnalyze+0x30>
 800dbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbf0:	f043 0301 	orr.w	r3, r3, #1
 800dbf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (buttonGetPressed(BTN_EN2)) newbutton |= EN_B;
 800dbf8:	2001      	movs	r0, #1
 800dbfa:	f7fe fd8b 	bl	800c714 <buttonGetPressed>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d005      	beq.n	800dc10 <Encoder_ReceiveAnalyze+0x48>
 800dc04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc08:	f043 0302 	orr.w	r3, r3, #2
 800dc0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (buttonGetPressed(BTN_ENC)) {
 800dc10:	2002      	movs	r0, #2
 800dc12:	f7fe fd7f 	bl	800c714 <buttonGetPressed>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00f      	beq.n	800dc3c <Encoder_ReceiveAnalyze+0x74>
    static millis_t next_click_update_ms;
    if (ELAPSED(now, next_click_update_ms)) {
 800dc1c:	4b94      	ldr	r3, [pc, #592]	; (800de70 <Encoder_ReceiveAnalyze+0x2a8>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	db07      	blt.n	800dc38 <Encoder_ReceiveAnalyze+0x70>
      next_click_update_ms = millis() + 300;
 800dc28:	f7fd fc53 	bl	800b4d2 <millis>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dc32:	4a8f      	ldr	r2, [pc, #572]	; (800de70 <Encoder_ReceiveAnalyze+0x2a8>)
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e001      	b.n	800dc3c <Encoder_ReceiveAnalyze+0x74>
//      if (!ui.backlight) ui.refresh_brightness();
//      const bool was_waiting = wait_for_user;
//      wait_for_user = false;
//      return was_waiting ? ENCODER_DIFF_NO : ENCODER_DIFF_ENTER;
    }
    else return ENCODER_DIFF_NO;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e115      	b.n	800de68 <Encoder_ReceiveAnalyze+0x2a0>
  }
  if (newbutton != lastEncoderBits) {
 800dc3c:	4b8d      	ldr	r3, [pc, #564]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc44:	429a      	cmp	r2, r3
 800dc46:	f000 808c 	beq.w	800dd62 <Encoder_ReceiveAnalyze+0x19a>
    switch (newbutton) {
 800dc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	f200 8083 	bhi.w	800dd5a <Encoder_ReceiveAnalyze+0x192>
 800dc54:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <Encoder_ReceiveAnalyze+0x94>)
 800dc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5a:	bf00      	nop
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dd15 	.word	0x0800dd15
 800dc64:	0800dca5 	.word	0x0800dca5
 800dc68:	0800dcdd 	.word	0x0800dcdd
      case ENCODER_PHASE_0:
             if (lastEncoderBits == ENCODER_PHASE_3) temp_diff++;
 800dc6c:	4b81      	ldr	r3, [pc, #516]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d109      	bne.n	800dc88 <Encoder_ReceiveAnalyze+0xc0>
 800dc74:	4b80      	ldr	r3, [pc, #512]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dc76:	f993 3000 	ldrsb.w	r3, [r3]
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	b25a      	sxtb	r2, r3
 800dc82:	4b7d      	ldr	r3, [pc, #500]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dc84:	701a      	strb	r2, [r3, #0]
        else if (lastEncoderBits == ENCODER_PHASE_1) temp_diff--;
        break;
 800dc86:	e061      	b.n	800dd4c <Encoder_ReceiveAnalyze+0x184>
        else if (lastEncoderBits == ENCODER_PHASE_1) temp_diff--;
 800dc88:	4b7a      	ldr	r3, [pc, #488]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d15d      	bne.n	800dd4c <Encoder_ReceiveAnalyze+0x184>
 800dc90:	4b79      	ldr	r3, [pc, #484]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dc92:	f993 3000 	ldrsb.w	r3, [r3]
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	b25a      	sxtb	r2, r3
 800dc9e:	4b76      	ldr	r3, [pc, #472]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dca0:	701a      	strb	r2, [r3, #0]
        break;
 800dca2:	e053      	b.n	800dd4c <Encoder_ReceiveAnalyze+0x184>
      case ENCODER_PHASE_1:
             if (lastEncoderBits == ENCODER_PHASE_0) temp_diff++;
 800dca4:	4b73      	ldr	r3, [pc, #460]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d109      	bne.n	800dcc0 <Encoder_ReceiveAnalyze+0xf8>
 800dcac:	4b72      	ldr	r3, [pc, #456]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dcae:	f993 3000 	ldrsb.w	r3, [r3]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	b25a      	sxtb	r2, r3
 800dcba:	4b6f      	ldr	r3, [pc, #444]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dcbc:	701a      	strb	r2, [r3, #0]
        else if (lastEncoderBits == ENCODER_PHASE_2) temp_diff--;
        break;
 800dcbe:	e047      	b.n	800dd50 <Encoder_ReceiveAnalyze+0x188>
        else if (lastEncoderBits == ENCODER_PHASE_2) temp_diff--;
 800dcc0:	4b6c      	ldr	r3, [pc, #432]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d143      	bne.n	800dd50 <Encoder_ReceiveAnalyze+0x188>
 800dcc8:	4b6b      	ldr	r3, [pc, #428]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dcca:	f993 3000 	ldrsb.w	r3, [r3]
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	b25a      	sxtb	r2, r3
 800dcd6:	4b68      	ldr	r3, [pc, #416]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dcd8:	701a      	strb	r2, [r3, #0]
        break;
 800dcda:	e039      	b.n	800dd50 <Encoder_ReceiveAnalyze+0x188>
      case ENCODER_PHASE_2:
             if (lastEncoderBits == ENCODER_PHASE_1) temp_diff++;
 800dcdc:	4b65      	ldr	r3, [pc, #404]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d109      	bne.n	800dcf8 <Encoder_ReceiveAnalyze+0x130>
 800dce4:	4b64      	ldr	r3, [pc, #400]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dce6:	f993 3000 	ldrsb.w	r3, [r3]
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	3301      	adds	r3, #1
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	b25a      	sxtb	r2, r3
 800dcf2:	4b61      	ldr	r3, [pc, #388]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dcf4:	701a      	strb	r2, [r3, #0]
        else if (lastEncoderBits == ENCODER_PHASE_3) temp_diff--;
        break;
 800dcf6:	e02d      	b.n	800dd54 <Encoder_ReceiveAnalyze+0x18c>
        else if (lastEncoderBits == ENCODER_PHASE_3) temp_diff--;
 800dcf8:	4b5e      	ldr	r3, [pc, #376]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d129      	bne.n	800dd54 <Encoder_ReceiveAnalyze+0x18c>
 800dd00:	4b5d      	ldr	r3, [pc, #372]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd02:	f993 3000 	ldrsb.w	r3, [r3]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	b25a      	sxtb	r2, r3
 800dd0e:	4b5a      	ldr	r3, [pc, #360]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd10:	701a      	strb	r2, [r3, #0]
        break;
 800dd12:	e01f      	b.n	800dd54 <Encoder_ReceiveAnalyze+0x18c>
      case ENCODER_PHASE_3:
             if (lastEncoderBits == ENCODER_PHASE_2) temp_diff++;
 800dd14:	4b57      	ldr	r3, [pc, #348]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b03      	cmp	r3, #3
 800dd1a:	d109      	bne.n	800dd30 <Encoder_ReceiveAnalyze+0x168>
 800dd1c:	4b56      	ldr	r3, [pc, #344]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd1e:	f993 3000 	ldrsb.w	r3, [r3]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	3301      	adds	r3, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	b25a      	sxtb	r2, r3
 800dd2a:	4b53      	ldr	r3, [pc, #332]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd2c:	701a      	strb	r2, [r3, #0]
        else if (lastEncoderBits == ENCODER_PHASE_0) temp_diff--;
        break;
 800dd2e:	e013      	b.n	800dd58 <Encoder_ReceiveAnalyze+0x190>
        else if (lastEncoderBits == ENCODER_PHASE_0) temp_diff--;
 800dd30:	4b50      	ldr	r3, [pc, #320]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10f      	bne.n	800dd58 <Encoder_ReceiveAnalyze+0x190>
 800dd38:	4b4f      	ldr	r3, [pc, #316]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd3a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	3b01      	subs	r3, #1
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	b25a      	sxtb	r2, r3
 800dd46:	4b4c      	ldr	r3, [pc, #304]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd48:	701a      	strb	r2, [r3, #0]
        break;
 800dd4a:	e005      	b.n	800dd58 <Encoder_ReceiveAnalyze+0x190>
        break;
 800dd4c:	bf00      	nop
 800dd4e:	e004      	b.n	800dd5a <Encoder_ReceiveAnalyze+0x192>
        break;
 800dd50:	bf00      	nop
 800dd52:	e002      	b.n	800dd5a <Encoder_ReceiveAnalyze+0x192>
        break;
 800dd54:	bf00      	nop
 800dd56:	e000      	b.n	800dd5a <Encoder_ReceiveAnalyze+0x192>
        break;
 800dd58:	bf00      	nop
    }
    lastEncoderBits = newbutton;
 800dd5a:	4a46      	ldr	r2, [pc, #280]	; (800de74 <Encoder_ReceiveAnalyze+0x2ac>)
 800dd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd60:	7013      	strb	r3, [r2, #0]
  }

  if (ABS(temp_diff) >= ENCODER_PULSES_PER_STEP) {
 800dd62:	4b45      	ldr	r3, [pc, #276]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	76fb      	strb	r3, [r7, #27]
 800dd68:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bfb8      	it	lt
 800dd70:	425b      	neglt	r3, r3
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	dd75      	ble.n	800de64 <Encoder_ReceiveAnalyze+0x29c>
    if (temp_diff > 0) temp_diffState = TERN(REVERSE_ENCODER_DIRECTION, ENCODER_DIFF_CCW, ENCODER_DIFF_CW);
 800dd78:	4b3f      	ldr	r3, [pc, #252]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dd7a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	dd03      	ble.n	800dd8a <Encoder_ReceiveAnalyze+0x1c2>
 800dd82:	2301      	movs	r3, #1
 800dd84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd88:	e002      	b.n	800dd90 <Encoder_ReceiveAnalyze+0x1c8>
    else temp_diffState = TERN(REVERSE_ENCODER_DIRECTION, ENCODER_DIFF_CW, ENCODER_DIFF_CCW);
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

      millis_t ms = millis();
 800dd90:	f7fd fb9f 	bl	800b4d2 <millis>
 800dd94:	6178      	str	r0, [r7, #20]
      int32_t encoderMultiplier = 1;
 800dd96:	2301      	movs	r3, #1
 800dd98:	623b      	str	r3, [r7, #32]

      // if must encoder rati multiplier
      if (EncoderRate.enabled) {
 800dd9a:	4b38      	ldr	r3, [pc, #224]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d046      	beq.n	800de30 <Encoder_ReceiveAnalyze+0x268>
        const float abs_diff = ABS(temp_diff),
 800dda2:	4b35      	ldr	r3, [pc, #212]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	74fb      	strb	r3, [r7, #19]
 800dda8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	bfb8      	it	lt
 800ddb0:	425b      	neglt	r3, r3
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	ee07 3a90 	vmov	s15, r3
 800ddb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddbc:	edc7 7a03 	vstr	s15, [r7, #12]
                    encoderMovementSteps = abs_diff / (ENCODER_PULSES_PER_STEP);
 800ddc0:	ed97 7a03 	vldr	s14, [r7, #12]
 800ddc4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ddc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ddcc:	edc7 7a02 	vstr	s15, [r7, #8]
        if (EncoderRate.lastEncoderTime) {
 800ddd0:	4b2a      	ldr	r3, [pc, #168]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d028      	beq.n	800de2a <Encoder_ReceiveAnalyze+0x262>
          // Note that the rate is always calculated between two passes through the
          // loop and that the abs of the temp_diff value is tracked.
          const float encoderStepRate = encoderMovementSteps / (float)(ms - EncoderRate.lastEncoderTime) * 1000;
 800ddd8:	4b28      	ldr	r3, [pc, #160]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	697a      	ldr	r2, [r7, #20]
 800ddde:	1ad3      	subs	r3, r2, r3
 800dde0:	ee07 3a90 	vmov	s15, r3
 800dde4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dde8:	edd7 6a02 	vldr	s13, [r7, #8]
 800ddec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddf0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800de80 <Encoder_ReceiveAnalyze+0x2b8>
 800ddf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddf8:	edc7 7a01 	vstr	s15, [r7, #4]
               if (encoderStepRate >= ENCODER_100X_STEPS_PER_SEC) encoderMultiplier = 100;
 800ddfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800de00:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800de84 <Encoder_ReceiveAnalyze+0x2bc>
 800de04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0c:	db02      	blt.n	800de14 <Encoder_ReceiveAnalyze+0x24c>
 800de0e:	2364      	movs	r3, #100	; 0x64
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	e00a      	b.n	800de2a <Encoder_ReceiveAnalyze+0x262>
          else if (encoderStepRate >= ENCODER_10X_STEPS_PER_SEC)  encoderMultiplier = 10;
 800de14:	edd7 7a01 	vldr	s15, [r7, #4]
 800de18:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800de1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	db01      	blt.n	800de2a <Encoder_ReceiveAnalyze+0x262>
 800de26:	230a      	movs	r3, #10
 800de28:	623b      	str	r3, [r7, #32]
          #if ENCODER_5X_STEPS_PER_SEC
            else if (encoderStepRate >= ENCODER_5X_STEPS_PER_SEC) encoderMultiplier = 5;
          #endif
        }
        EncoderRate.lastEncoderTime = ms;
 800de2a:	4a14      	ldr	r2, [pc, #80]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	6093      	str	r3, [r2, #8]
      }

    // EncoderRate.encoderMoveValue += (temp_diff * encoderMultiplier) / (ENCODER_PULSES_PER_STEP);
    EncoderRate.encoderMoveValue = (temp_diff * encoderMultiplier) / (ENCODER_PULSES_PER_STEP);
 800de30:	4b11      	ldr	r3, [pc, #68]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800de32:	f993 3000 	ldrsb.w	r3, [r3]
 800de36:	461a      	mov	r2, r3
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	fb02 f303 	mul.w	r3, r2, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da00      	bge.n	800de44 <Encoder_ReceiveAnalyze+0x27c>
 800de42:	3303      	adds	r3, #3
 800de44:	109b      	asrs	r3, r3, #2
 800de46:	461a      	mov	r2, r3
 800de48:	4b0c      	ldr	r3, [pc, #48]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800de4a:	605a      	str	r2, [r3, #4]
    if (EncoderRate.encoderMoveValue < 0) EncoderRate.encoderMoveValue = -EncoderRate.encoderMoveValue;
 800de4c:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	da04      	bge.n	800de5e <Encoder_ReceiveAnalyze+0x296>
 800de54:	4b09      	ldr	r3, [pc, #36]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	425b      	negs	r3, r3
 800de5a:	4a08      	ldr	r2, [pc, #32]	; (800de7c <Encoder_ReceiveAnalyze+0x2b4>)
 800de5c:	6053      	str	r3, [r2, #4]

    temp_diff = 0;
 800de5e:	4b06      	ldr	r3, [pc, #24]	; (800de78 <Encoder_ReceiveAnalyze+0x2b0>)
 800de60:	2200      	movs	r2, #0
 800de62:	701a      	strb	r2, [r3, #0]
  }
  return temp_diffState;
 800de64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3728      	adds	r7, #40	; 0x28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	20001ff4 	.word	0x20001ff4
 800de74:	20001ff8 	.word	0x20001ff8
 800de78:	20001ff9 	.word	0x20001ff9
 800de7c:	20001fe8 	.word	0x20001fe8
 800de80:	447a0000 	.word	0x447a0000
 800de84:	42a00000 	.word	0x42a00000

0800de88 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 800de8c:	4903      	ldr	r1, [pc, #12]	; (800de9c <flashInit+0x14>)
 800de8e:	4804      	ldr	r0, [pc, #16]	; (800dea0 <flashInit+0x18>)
 800de90:	f7ff fd30 	bl	800d8f4 <cliAdd>
#endif

  return true;
 800de94:	2301      	movs	r3, #1
}
 800de96:	4618      	mov	r0, r3
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	0800df71 	.word	0x0800df71
 800dea0:	08013ac4 	.word	0x08013ac4

0800dea4 <flashErase>:

HAL_StatusTypeDef flashErase(int16_t sector_num, unsigned int FLASH_VOLTAGE_RANGE)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08a      	sub	sp, #40	; 0x28
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	6039      	str	r1, [r7, #0]
 800deae:	80fb      	strh	r3, [r7, #6]
  bool ret = false;
 800deb0:	2300      	movs	r3, #0
 800deb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;
  uint32_t sector_count = 1;
 800deb6:	2301      	movs	r3, #1
 800deb8:	623b      	str	r3, [r7, #32]


  if (sector_count > 0)
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d01c      	beq.n	800defa <flashErase+0x56>
  {

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800dec0:	2300      	movs	r3, #0
 800dec2:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 800dec4:	2301      	movs	r3, #1
 800dec6:	613b      	str	r3, [r7, #16]
    init.Sector      = sector_num;
 800dec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800decc:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 800ded6:	f107 0208 	add.w	r2, r7, #8
 800deda:	f107 030c 	add.w	r3, r7, #12
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7f5 ffcd 	bl	8003e80 <HAL_FLASHEx_Erase>
 800dee6:	4603      	mov	r3, r0
 800dee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status == HAL_OK)
 800deec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <flashErase+0x56>
    {
      ret = true;
 800def4:	2301      	movs	r3, #1
 800def6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }

  }

  return status;
 800defa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800defe:	4618      	mov	r0, r3
 800df00:	3728      	adds	r7, #40	; 0x28
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800df06:	b5b0      	push	{r4, r5, r7, lr}
 800df08:	b088      	sub	sp, #32
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	60b9      	str	r1, [r7, #8]
 800df10:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800df12:	2301      	movs	r3, #1
 800df14:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 800df16:	f7f5 fe51 	bl	8003bbc <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 800df1a:	2300      	movs	r3, #0
 800df1c:	61bb      	str	r3, [r7, #24]
 800df1e:	e01b      	b.n	800df58 <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	4413      	add	r3, r2
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 800df2a:	69ba      	ldr	r2, [r7, #24]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	18d1      	adds	r1, r2, r3
 800df30:	8afb      	ldrh	r3, [r7, #22]
 800df32:	2200      	movs	r2, #0
 800df34:	461c      	mov	r4, r3
 800df36:	4615      	mov	r5, r2
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	2000      	movs	r0, #0
 800df3e:	f7f5 fde9 	bl	8003b14 <HAL_FLASH_Program>
 800df42:	4603      	mov	r3, r0
 800df44:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 800df46:	7d7b      	ldrb	r3, [r7, #21]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <flashWrite+0x4c>
    {
      ret = false;
 800df4c:	2300      	movs	r3, #0
 800df4e:	77fb      	strb	r3, [r7, #31]
      break;
 800df50:	e006      	b.n	800df60 <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	3301      	adds	r3, #1
 800df56:	61bb      	str	r3, [r7, #24]
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d8df      	bhi.n	800df20 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 800df60:	f7f5 fe4e 	bl	8003c00 <HAL_FLASH_Lock>

  return ret;
 800df64:	7ffb      	ldrb	r3, [r7, #31]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3720      	adds	r7, #32
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df70 <cliFlash>:
  return ret;
}

#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08c      	sub	sp, #48	; 0x30
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800df78:	2300      	movs	r3, #0
 800df7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d121      	bne.n	800dfca <cliFlash+0x5a>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	495d      	ldr	r1, [pc, #372]	; (800e100 <cliFlash+0x190>)
 800df8c:	2000      	movs	r0, #0
 800df8e:	4798      	blx	r3
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d019      	beq.n	800dfca <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800df96:	2300      	movs	r3, #0
 800df98:	62bb      	str	r3, [r7, #40]	; 0x28
 800df9a:	e010      	b.n	800dfbe <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 800df9c:	4a59      	ldr	r2, [pc, #356]	; (800e104 <cliFlash+0x194>)
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dfa4:	4a57      	ldr	r2, [pc, #348]	; (800e104 <cliFlash+0x194>)
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	4413      	add	r3, r2
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	0a9b      	lsrs	r3, r3, #10
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	4855      	ldr	r0, [pc, #340]	; (800e108 <cliFlash+0x198>)
 800dfb4:	f7ff fb8e 	bl	800d6d4 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	3301      	adds	r3, #1
 800dfbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	2b0b      	cmp	r3, #11
 800dfc2:	ddeb      	ble.n	800df9c <cliFlash+0x2c>
    }

    ret = true;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d12b      	bne.n	800e02a <cliFlash+0xba>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	494d      	ldr	r1, [pc, #308]	; (800e10c <cliFlash+0x19c>)
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4798      	blx	r3
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d023      	beq.n	800e02a <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	2001      	movs	r0, #1
 800dfe8:	4798      	blx	r3
 800dfea:	4603      	mov	r3, r0
 800dfec:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	2002      	movs	r0, #2
 800dff4:	4798      	blx	r3
 800dff6:	4603      	mov	r3, r0
 800dff8:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 800dffa:	2300      	movs	r3, #0
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
 800dffe:	e00d      	b.n	800e01c <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 800e000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	18d1      	adds	r1, r2, r3
 800e006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	4413      	add	r3, r2
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	483f      	ldr	r0, [pc, #252]	; (800e110 <cliFlash+0x1a0>)
 800e012:	f7ff fb5f 	bl	800d6d4 <cliPrintf>
    for (int i=0; i<length; i++)
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	3301      	adds	r3, #1
 800e01a:	627b      	str	r3, [r7, #36]	; 0x24
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	69fa      	ldr	r2, [r7, #28]
 800e020:	429a      	cmp	r2, r3
 800e022:	d8ed      	bhi.n	800e000 <cliFlash+0x90>
    }

    ret = true;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d123      	bne.n	800e07a <cliFlash+0x10a>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	4937      	ldr	r1, [pc, #220]	; (800e114 <cliFlash+0x1a4>)
 800e038:	2000      	movs	r0, #0
 800e03a:	4798      	blx	r3
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d01b      	beq.n	800e07a <cliFlash+0x10a>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	2001      	movs	r0, #1
 800e048:	4798      	blx	r3
 800e04a:	4603      	mov	r3, r0
 800e04c:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	2002      	movs	r0, #2
 800e054:	4798      	blx	r3
 800e056:	4603      	mov	r3, r0
 800e058:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	b21b      	sxth	r3, r3
 800e05e:	6979      	ldr	r1, [r7, #20]
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff ff1f 	bl	800dea4 <flashErase>
 800e066:	4603      	mov	r3, r0
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d103      	bne.n	800e074 <cliFlash+0x104>
    {
      cliPrintf("Erase OK\r\n");
 800e06c:	482a      	ldr	r0, [pc, #168]	; (800e118 <cliFlash+0x1a8>)
 800e06e:	f7ff fb31 	bl	800d6d4 <cliPrintf>
 800e072:	e002      	b.n	800e07a <cliFlash+0x10a>
    }
    else
    {
      cliPrintf("Erase Fail\r\n");
 800e074:	4829      	ldr	r0, [pc, #164]	; (800e11c <cliFlash+0x1ac>)
 800e076:	f7ff fb2d 	bl	800d6d4 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d127      	bne.n	800e0d2 <cliFlash+0x162>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	4926      	ldr	r1, [pc, #152]	; (800e120 <cliFlash+0x1b0>)
 800e088:	2000      	movs	r0, #0
 800e08a:	4798      	blx	r3
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d01f      	beq.n	800e0d2 <cliFlash+0x162>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	2001      	movs	r0, #1
 800e098:	4798      	blx	r3
 800e09a:	4603      	mov	r3, r0
 800e09c:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	2002      	movs	r0, #2
 800e0a4:	4798      	blx	r3
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 800e0aa:	f107 030c 	add.w	r3, r7, #12
 800e0ae:	2204      	movs	r2, #4
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	6938      	ldr	r0, [r7, #16]
 800e0b4:	f7ff ff27 	bl	800df06 <flashWrite>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d003      	beq.n	800e0c6 <cliFlash+0x156>
    {
      cliPrintf("Write OK\r\n");
 800e0be:	4819      	ldr	r0, [pc, #100]	; (800e124 <cliFlash+0x1b4>)
 800e0c0:	f7ff fb08 	bl	800d6d4 <cliPrintf>
 800e0c4:	e002      	b.n	800e0cc <cliFlash+0x15c>
    }
    else
    {
      cliPrintf("Write Fail\r\n");
 800e0c6:	4818      	ldr	r0, [pc, #96]	; (800e128 <cliFlash+0x1b8>)
 800e0c8:	f7ff fb04 	bl	800d6d4 <cliPrintf>
    }

    ret = true;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 800e0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0d6:	f083 0301 	eor.w	r3, r3, #1
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <cliFlash+0x188>
  {
    cliPrintf("flash info\r\n");
 800e0e0:	4812      	ldr	r0, [pc, #72]	; (800e12c <cliFlash+0x1bc>)
 800e0e2:	f7ff faf7 	bl	800d6d4 <cliPrintf>
    cliPrintf("flash read  addr length\r\n");
 800e0e6:	4812      	ldr	r0, [pc, #72]	; (800e130 <cliFlash+0x1c0>)
 800e0e8:	f7ff faf4 	bl	800d6d4 <cliPrintf>
    cliPrintf("flash erase addr length\r\n");
 800e0ec:	4811      	ldr	r0, [pc, #68]	; (800e134 <cliFlash+0x1c4>)
 800e0ee:	f7ff faf1 	bl	800d6d4 <cliPrintf>
    cliPrintf("flash write addr data\r\n");
 800e0f2:	4811      	ldr	r0, [pc, #68]	; (800e138 <cliFlash+0x1c8>)
 800e0f4:	f7ff faee 	bl	800d6d4 <cliPrintf>
  }
}
 800e0f8:	bf00      	nop
 800e0fa:	3730      	adds	r7, #48	; 0x30
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	08013acc 	.word	0x08013acc
 800e104:	2000015c 	.word	0x2000015c
 800e108:	08013ad4 	.word	0x08013ad4
 800e10c:	08013ae4 	.word	0x08013ae4
 800e110:	08013aec 	.word	0x08013aec
 800e114:	08013afc 	.word	0x08013afc
 800e118:	08013b04 	.word	0x08013b04
 800e11c:	08013b10 	.word	0x08013b10
 800e120:	08013b20 	.word	0x08013b20
 800e124:	08013b28 	.word	0x08013b28
 800e128:	08013b34 	.word	0x08013b34
 800e12c:	08013b44 	.word	0x08013b44
 800e130:	08013b54 	.word	0x08013b54
 800e134:	08013b70 	.word	0x08013b70
 800e138:	08013b8c 	.word	0x08013b8c

0800e13c <gpioInit>:
#ifdef _USE_HW_CLI
static void cliGpio(cli_args_t *args);
#endif

bool gpioInit(void)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af00      	add	r7, sp, #0
  bool ret = true;
 800e142:	2301      	movs	r3, #1
 800e144:	76fb      	strb	r3, [r7, #27]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e146:	2300      	movs	r3, #0
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	4b40      	ldr	r3, [pc, #256]	; (800e24c <gpioInit+0x110>)
 800e14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14e:	4a3f      	ldr	r2, [pc, #252]	; (800e24c <gpioInit+0x110>)
 800e150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e154:	6313      	str	r3, [r2, #48]	; 0x30
 800e156:	4b3d      	ldr	r3, [pc, #244]	; (800e24c <gpioInit+0x110>)
 800e158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15e:	617b      	str	r3, [r7, #20]
 800e160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e162:	2300      	movs	r3, #0
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	4b39      	ldr	r3, [pc, #228]	; (800e24c <gpioInit+0x110>)
 800e168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16a:	4a38      	ldr	r2, [pc, #224]	; (800e24c <gpioInit+0x110>)
 800e16c:	f043 0301 	orr.w	r3, r3, #1
 800e170:	6313      	str	r3, [r2, #48]	; 0x30
 800e172:	4b36      	ldr	r3, [pc, #216]	; (800e24c <gpioInit+0x110>)
 800e174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e176:	f003 0301 	and.w	r3, r3, #1
 800e17a:	613b      	str	r3, [r7, #16]
 800e17c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e17e:	2300      	movs	r3, #0
 800e180:	60fb      	str	r3, [r7, #12]
 800e182:	4b32      	ldr	r3, [pc, #200]	; (800e24c <gpioInit+0x110>)
 800e184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e186:	4a31      	ldr	r2, [pc, #196]	; (800e24c <gpioInit+0x110>)
 800e188:	f043 0304 	orr.w	r3, r3, #4
 800e18c:	6313      	str	r3, [r2, #48]	; 0x30
 800e18e:	4b2f      	ldr	r3, [pc, #188]	; (800e24c <gpioInit+0x110>)
 800e190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e192:	f003 0304 	and.w	r3, r3, #4
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e19a:	2300      	movs	r3, #0
 800e19c:	60bb      	str	r3, [r7, #8]
 800e19e:	4b2b      	ldr	r3, [pc, #172]	; (800e24c <gpioInit+0x110>)
 800e1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a2:	4a2a      	ldr	r2, [pc, #168]	; (800e24c <gpioInit+0x110>)
 800e1a4:	f043 0302 	orr.w	r3, r3, #2
 800e1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800e1aa:	4b28      	ldr	r3, [pc, #160]	; (800e24c <gpioInit+0x110>)
 800e1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ae:	f003 0302 	and.w	r3, r3, #2
 800e1b2:	60bb      	str	r3, [r7, #8]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	607b      	str	r3, [r7, #4]
 800e1ba:	4b24      	ldr	r3, [pc, #144]	; (800e24c <gpioInit+0x110>)
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	4a23      	ldr	r2, [pc, #140]	; (800e24c <gpioInit+0x110>)
 800e1c0:	f043 0310 	orr.w	r3, r3, #16
 800e1c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1c6:	4b21      	ldr	r3, [pc, #132]	; (800e24c <gpioInit+0x110>)
 800e1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ca:	f003 0310 	and.w	r3, r3, #16
 800e1ce:	607b      	str	r3, [r7, #4]
 800e1d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	4b1d      	ldr	r3, [pc, #116]	; (800e24c <gpioInit+0x110>)
 800e1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1da:	4a1c      	ldr	r2, [pc, #112]	; (800e24c <gpioInit+0x110>)
 800e1dc:	f043 0308 	orr.w	r3, r3, #8
 800e1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1e2:	4b1a      	ldr	r3, [pc, #104]	; (800e24c <gpioInit+0x110>)
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	f003 0308 	and.w	r3, r3, #8
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);


  for (int i=0; i<GPIO_MAX_CH; i++)
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
 800e1f2:	e01e      	b.n	800e232 <gpioInit+0xf6>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	b2d8      	uxtb	r0, r3
 800e1f8:	4915      	ldr	r1, [pc, #84]	; (800e250 <gpioInit+0x114>)
 800e1fa:	69fa      	ldr	r2, [r7, #28]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	440b      	add	r3, r1
 800e206:	3308      	adds	r3, #8
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	4619      	mov	r1, r3
 800e20c:	f000 f826 	bl	800e25c <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	b2d8      	uxtb	r0, r3
 800e214:	490e      	ldr	r1, [pc, #56]	; (800e250 <gpioInit+0x114>)
 800e216:	69fa      	ldr	r2, [r7, #28]
 800e218:	4613      	mov	r3, r2
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	330b      	adds	r3, #11
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	4619      	mov	r1, r3
 800e228:	f000 f89a 	bl	800e360 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	3301      	adds	r3, #1
 800e230:	61fb      	str	r3, [r7, #28]
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	2b14      	cmp	r3, #20
 800e236:	dddd      	ble.n	800e1f4 <gpioInit+0xb8>
  /* EXTI interrupt init*/
  //HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(EXTI4_IRQn);

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 800e238:	4906      	ldr	r1, [pc, #24]	; (800e254 <gpioInit+0x118>)
 800e23a:	4807      	ldr	r0, [pc, #28]	; (800e258 <gpioInit+0x11c>)
 800e23c:	f7ff fb5a 	bl	800d8f4 <cliAdd>
#endif

  return ret;
 800e240:	7efb      	ldrb	r3, [r7, #27]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3720      	adds	r7, #32
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	40023800 	.word	0x40023800
 800e250:	08021524 	.word	0x08021524
 800e254:	0800e475 	.word	0x0800e475
 800e258:	08013ba4 	.word	0x08013ba4

0800e25c <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	4603      	mov	r3, r0
 800e264:	460a      	mov	r2, r1
 800e266:	71fb      	strb	r3, [r7, #7]
 800e268:	4613      	mov	r3, r2
 800e26a:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 800e26c:	2301      	movs	r3, #1
 800e26e:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e270:	f107 0308 	add.w	r3, r7, #8
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	609a      	str	r2, [r3, #8]
 800e27c:	60da      	str	r2, [r3, #12]
 800e27e:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 800e280:	79fb      	ldrb	r3, [r7, #7]
 800e282:	2b14      	cmp	r3, #20
 800e284:	d901      	bls.n	800e28a <gpioPinMode+0x2e>
  {
    return false;
 800e286:	2300      	movs	r3, #0
 800e288:	e064      	b.n	800e354 <gpioPinMode+0xf8>
  }

  switch(mode)
 800e28a:	79bb      	ldrb	r3, [r7, #6]
 800e28c:	2b07      	cmp	r3, #7
 800e28e:	d848      	bhi.n	800e322 <gpioPinMode+0xc6>
 800e290:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <gpioPinMode+0x3c>)
 800e292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e296:	bf00      	nop
 800e298:	0800e2b9 	.word	0x0800e2b9
 800e29c:	0800e2c3 	.word	0x0800e2c3
 800e2a0:	0800e2d1 	.word	0x0800e2d1
 800e2a4:	0800e2db 	.word	0x0800e2db
 800e2a8:	0800e2eb 	.word	0x0800e2eb
 800e2ac:	0800e2f9 	.word	0x0800e2f9
 800e2b0:	0800e307 	.word	0x0800e307
 800e2b4:	0800e311 	.word	0x0800e311
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	613b      	str	r3, [r7, #16]
      break;
 800e2c0:	e02f      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2ca:	2303      	movs	r3, #3
 800e2cc:	617b      	str	r3, [r7, #20]
      break;
 800e2ce:	e028      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	613b      	str	r3, [r7, #16]
      break;
 800e2d8:	e023      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_INPUT_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e2da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e2de:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	617b      	str	r3, [r7, #20]
      break;
 800e2e8:	e01b      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	617b      	str	r3, [r7, #20]
      break;
 800e2f6:	e014      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e300:	2303      	movs	r3, #3
 800e302:	617b      	str	r3, [r7, #20]
      break;
 800e304:	e00d      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e306:	2301      	movs	r3, #1
 800e308:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e30a:	2302      	movs	r3, #2
 800e30c:	613b      	str	r3, [r7, #16]
      break;
 800e30e:	e008      	b.n	800e322 <gpioPinMode+0xc6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e310:	2302      	movs	r3, #2
 800e312:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e314:	2300      	movs	r3, #0
 800e316:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e318:	2300      	movs	r3, #0
 800e31a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e31c:	2302      	movs	r3, #2
 800e31e:	61bb      	str	r3, [r7, #24]
      break;
 800e320:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 800e322:	79fa      	ldrb	r2, [r7, #7]
 800e324:	490d      	ldr	r1, [pc, #52]	; (800e35c <gpioPinMode+0x100>)
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	440b      	add	r3, r1
 800e330:	3304      	adds	r3, #4
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800e336:	79fa      	ldrb	r2, [r7, #7]
 800e338:	4908      	ldr	r1, [pc, #32]	; (800e35c <gpioPinMode+0x100>)
 800e33a:	4613      	mov	r3, r2
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	4413      	add	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	440b      	add	r3, r1
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f107 0208 	add.w	r2, r7, #8
 800e34a:	4611      	mov	r1, r2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f5 feb9 	bl	80040c4 <HAL_GPIO_Init>

  return ret;
 800e352:	7ffb      	ldrb	r3, [r7, #31]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	08021524 	.word	0x08021524

0800e360 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 800e360:	b590      	push	{r4, r7, lr}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	4603      	mov	r3, r0
 800e368:	460a      	mov	r2, r1
 800e36a:	71fb      	strb	r3, [r7, #7]
 800e36c:	4613      	mov	r3, r2
 800e36e:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	2b14      	cmp	r3, #20
 800e374:	d840      	bhi.n	800e3f8 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 800e376:	79bb      	ldrb	r3, [r7, #6]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d01e      	beq.n	800e3ba <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 800e37c:	79fa      	ldrb	r2, [r7, #7]
 800e37e:	4920      	ldr	r1, [pc, #128]	; (800e400 <gpioPinWrite+0xa0>)
 800e380:	4613      	mov	r3, r2
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	440b      	add	r3, r1
 800e38a:	6818      	ldr	r0, [r3, #0]
 800e38c:	79fa      	ldrb	r2, [r7, #7]
 800e38e:	491c      	ldr	r1, [pc, #112]	; (800e400 <gpioPinWrite+0xa0>)
 800e390:	4613      	mov	r3, r2
 800e392:	005b      	lsls	r3, r3, #1
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	440b      	add	r3, r1
 800e39a:	3304      	adds	r3, #4
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	b299      	uxth	r1, r3
 800e3a0:	79fa      	ldrb	r2, [r7, #7]
 800e3a2:	4c17      	ldr	r4, [pc, #92]	; (800e400 <gpioPinWrite+0xa0>)
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	4413      	add	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4423      	add	r3, r4
 800e3ae:	3309      	adds	r3, #9
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f7f6 f83a 	bl	800442c <HAL_GPIO_WritePin>
 800e3b8:	e01f      	b.n	800e3fa <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800e3ba:	79fa      	ldrb	r2, [r7, #7]
 800e3bc:	4910      	ldr	r1, [pc, #64]	; (800e400 <gpioPinWrite+0xa0>)
 800e3be:	4613      	mov	r3, r2
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	440b      	add	r3, r1
 800e3c8:	6818      	ldr	r0, [r3, #0]
 800e3ca:	79fa      	ldrb	r2, [r7, #7]
 800e3cc:	490c      	ldr	r1, [pc, #48]	; (800e400 <gpioPinWrite+0xa0>)
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	4413      	add	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	440b      	add	r3, r1
 800e3d8:	3304      	adds	r3, #4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	b299      	uxth	r1, r3
 800e3de:	79fa      	ldrb	r2, [r7, #7]
 800e3e0:	4c07      	ldr	r4, [pc, #28]	; (800e400 <gpioPinWrite+0xa0>)
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	4413      	add	r3, r2
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	4423      	add	r3, r4
 800e3ec:	330a      	adds	r3, #10
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	f7f6 f81b 	bl	800442c <HAL_GPIO_WritePin>
 800e3f6:	e000      	b.n	800e3fa <gpioPinWrite+0x9a>
    return;
 800e3f8:	bf00      	nop
  }
}
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}
 800e400:	08021524 	.word	0x08021524

0800e404 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	4603      	mov	r3, r0
 800e40c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	2b14      	cmp	r3, #20
 800e416:	d901      	bls.n	800e41c <gpioPinRead+0x18>
  {
    return false;
 800e418:	2300      	movs	r3, #0
 800e41a:	e024      	b.n	800e466 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 800e41c:	79fa      	ldrb	r2, [r7, #7]
 800e41e:	4914      	ldr	r1, [pc, #80]	; (800e470 <gpioPinRead+0x6c>)
 800e420:	4613      	mov	r3, r2
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	440b      	add	r3, r1
 800e42a:	6818      	ldr	r0, [r3, #0]
 800e42c:	79fa      	ldrb	r2, [r7, #7]
 800e42e:	4910      	ldr	r1, [pc, #64]	; (800e470 <gpioPinRead+0x6c>)
 800e430:	4613      	mov	r3, r2
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	440b      	add	r3, r1
 800e43a:	3304      	adds	r3, #4
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4619      	mov	r1, r3
 800e442:	f7f5 ffdb 	bl	80043fc <HAL_GPIO_ReadPin>
 800e446:	4603      	mov	r3, r0
 800e448:	4618      	mov	r0, r3
 800e44a:	79fa      	ldrb	r2, [r7, #7]
 800e44c:	4908      	ldr	r1, [pc, #32]	; (800e470 <gpioPinRead+0x6c>)
 800e44e:	4613      	mov	r3, r2
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	4413      	add	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	440b      	add	r3, r1
 800e458:	3309      	adds	r3, #9
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	4298      	cmp	r0, r3
 800e45e:	d101      	bne.n	800e464 <gpioPinRead+0x60>
  {
    ret = true;
 800e460:	2301      	movs	r3, #1
 800e462:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	08021524 	.word	0x08021524

0800e474 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 800e474:	b590      	push	{r4, r7, lr}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800e47c:	2300      	movs	r3, #0
 800e47e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d128      	bne.n	800e4da <cliGpio+0x66>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	4947      	ldr	r1, [pc, #284]	; (800e5ac <cliGpio+0x138>)
 800e48e:	2000      	movs	r0, #0
 800e490:	4798      	blx	r3
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d020      	beq.n	800e4da <cliGpio+0x66>
  {
    while(cliKeepLoop())
 800e498:	e018      	b.n	800e4cc <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 800e49a:	2300      	movs	r3, #0
 800e49c:	613b      	str	r3, [r7, #16]
 800e49e:	e00c      	b.n	800e4ba <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff ffad 	bl	800e404 <gpioPinRead>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4840      	ldr	r0, [pc, #256]	; (800e5b0 <cliGpio+0x13c>)
 800e4b0:	f7ff f910 	bl	800d6d4 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	613b      	str	r3, [r7, #16]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2b14      	cmp	r3, #20
 800e4be:	ddef      	ble.n	800e4a0 <cliGpio+0x2c>
      }
      cliPrintf("\r\n");
 800e4c0:	483c      	ldr	r0, [pc, #240]	; (800e5b4 <cliGpio+0x140>)
 800e4c2:	f7ff f907 	bl	800d6d4 <cliPrintf>
      delay(100);
 800e4c6:	2064      	movs	r0, #100	; 0x64
 800e4c8:	f7fc fff0 	bl	800b4ac <delay>
    while(cliKeepLoop())
 800e4cc:	f7ff f9fc 	bl	800d8c8 <cliKeepLoop>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1e1      	bne.n	800e49a <cliGpio+0x26>
    }
    ret = true;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	881b      	ldrh	r3, [r3, #0]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d123      	bne.n	800e52a <cliGpio+0xb6>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	4934      	ldr	r1, [pc, #208]	; (800e5b8 <cliGpio+0x144>)
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	4798      	blx	r3
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d01b      	beq.n	800e52a <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	2001      	movs	r0, #1
 800e4f8:	4798      	blx	r3
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800e4fe:	e00d      	b.n	800e51c <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\r\n", ch, gpioPinRead(ch));
 800e500:	7bfc      	ldrb	r4, [r7, #15]
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	4618      	mov	r0, r3
 800e506:	f7ff ff7d 	bl	800e404 <gpioPinRead>
 800e50a:	4603      	mov	r3, r0
 800e50c:	461a      	mov	r2, r3
 800e50e:	4621      	mov	r1, r4
 800e510:	482a      	ldr	r0, [pc, #168]	; (800e5bc <cliGpio+0x148>)
 800e512:	f7ff f8df 	bl	800d6d4 <cliPrintf>
      delay(100);
 800e516:	2064      	movs	r0, #100	; 0x64
 800e518:	f7fc ffc8 	bl	800b4ac <delay>
    while(cliKeepLoop())
 800e51c:	f7ff f9d4 	bl	800d8c8 <cliKeepLoop>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1ec      	bne.n	800e500 <cliGpio+0x8c>
    }

    ret = true;
 800e526:	2301      	movs	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d126      	bne.n	800e580 <cliGpio+0x10c>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	4922      	ldr	r1, [pc, #136]	; (800e5c0 <cliGpio+0x14c>)
 800e538:	2000      	movs	r0, #0
 800e53a:	4798      	blx	r3
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d01e      	beq.n	800e580 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	2001      	movs	r0, #1
 800e548:	4798      	blx	r3
 800e54a:	4603      	mov	r3, r0
 800e54c:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	2002      	movs	r0, #2
 800e554:	4798      	blx	r3
 800e556:	4603      	mov	r3, r0
 800e558:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 800e55a:	7b7b      	ldrb	r3, [r7, #13]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bf14      	ite	ne
 800e560:	2301      	movne	r3, #1
 800e562:	2300      	moveq	r3, #0
 800e564:	b2da      	uxtb	r2, r3
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	4611      	mov	r1, r2
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7ff fef8 	bl	800e360 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\r\n", ch, data);
 800e570:	7bbb      	ldrb	r3, [r7, #14]
 800e572:	7b7a      	ldrb	r2, [r7, #13]
 800e574:	4619      	mov	r1, r3
 800e576:	4813      	ldr	r0, [pc, #76]	; (800e5c4 <cliGpio+0x150>)
 800e578:	f7ff f8ac 	bl	800d6d4 <cliPrintf>
    ret = true;
 800e57c:	2301      	movs	r3, #1
 800e57e:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	f083 0301 	eor.w	r3, r3, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00a      	beq.n	800e5a2 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\r\n");
 800e58c:	480e      	ldr	r0, [pc, #56]	; (800e5c8 <cliGpio+0x154>)
 800e58e:	f7ff f8a1 	bl	800d6d4 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\r\n", GPIO_MAX_CH-1);
 800e592:	2114      	movs	r1, #20
 800e594:	480d      	ldr	r0, [pc, #52]	; (800e5cc <cliGpio+0x158>)
 800e596:	f7ff f89d 	bl	800d6d4 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\r\n", GPIO_MAX_CH-1);
 800e59a:	2114      	movs	r1, #20
 800e59c:	480c      	ldr	r0, [pc, #48]	; (800e5d0 <cliGpio+0x15c>)
 800e59e:	f7ff f899 	bl	800d6d4 <cliPrintf>
  }
}
 800e5a2:	bf00      	nop
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd90      	pop	{r4, r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	08013bac 	.word	0x08013bac
 800e5b0:	08013bb4 	.word	0x08013bb4
 800e5b4:	08013bb8 	.word	0x08013bb8
 800e5b8:	08013bbc 	.word	0x08013bbc
 800e5bc:	08013bc4 	.word	0x08013bc4
 800e5c0:	08013bd8 	.word	0x08013bd8
 800e5c4:	08013be0 	.word	0x08013be0
 800e5c8:	08013bf8 	.word	0x08013bf8
 800e5cc:	08013c04 	.word	0x08013c04
 800e5d0:	08013c1c 	.word	0x08013c1c

0800e5d4 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	da01      	bge.n	800e5ec <constrain+0x18>
        return low;
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	e006      	b.n	800e5fa <constrain+0x26>
    else if (amt > high)
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	dd01      	ble.n	800e5f8 <constrain+0x24>
        return high;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	e000      	b.n	800e5fa <constrain+0x26>
    else
        return amt;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 800e60c:	f7fc ff61 	bl	800b4d2 <millis>
 800e610:	4602      	mov	r2, r0
 800e612:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <TransferDoneISR+0x40>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	4a0c      	ldr	r2, [pc, #48]	; (800e64c <TransferDoneISR+0x44>)
 800e61a:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 800e61c:	f7fc ff59 	bl	800b4d2 <millis>
 800e620:	4603      	mov	r3, r0
 800e622:	4a09      	ldr	r2, [pc, #36]	; (800e648 <TransferDoneISR+0x40>)
 800e624:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 800e626:	4b09      	ldr	r3, [pc, #36]	; (800e64c <TransferDoneISR+0x44>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d007      	beq.n	800e63e <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 800e62e:	4b07      	ldr	r3, [pc, #28]	; (800e64c <TransferDoneISR+0x44>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e636:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63a:	4a05      	ldr	r2, [pc, #20]	; (800e650 <TransferDoneISR+0x48>)
 800e63c:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <TransferDoneISR+0x4c>)
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
}
 800e644:	bf00      	nop
 800e646:	bd80      	pop	{r7, pc}
 800e648:	20002024 	.word	0x20002024
 800e64c:	20002028 	.word	0x20002028
 800e650:	2000202c 	.word	0x2000202c
 800e654:	20002022 	.word	0x20002022

0800e658 <lcdInit>:

bool lcdInit(void)
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af02      	add	r7, sp, #8

	backlight_value = 100;
 800e65e:	4b2b      	ldr	r3, [pc, #172]	; (800e70c <lcdInit+0xb4>)
 800e660:	2264      	movs	r2, #100	; 0x64
 800e662:	701a      	strb	r2, [r3, #0]

	TFT_RST_H;
 800e664:	2101      	movs	r1, #1
 800e666:	2011      	movs	r0, #17
 800e668:	f7ff fe7a 	bl	800e360 <gpioPinWrite>
	delay(5);
 800e66c:	2005      	movs	r0, #5
 800e66e:	f7fc ff1d 	bl	800b4ac <delay>
	TFT_RST_L;
 800e672:	2100      	movs	r1, #0
 800e674:	2011      	movs	r0, #17
 800e676:	f7ff fe73 	bl	800e360 <gpioPinWrite>
	delay(20);
 800e67a:	2014      	movs	r0, #20
 800e67c:	f7fc ff16 	bl	800b4ac <delay>
	TFT_RST_H;
 800e680:	2101      	movs	r1, #1
 800e682:	2011      	movs	r0, #17
 800e684:	f7ff fe6c 	bl	800e360 <gpioPinWrite>

	st7796InitDriver(&lcd);
 800e688:	4821      	ldr	r0, [pc, #132]	; (800e710 <lcdInit+0xb8>)
 800e68a:	f7fd fc63 	bl	800bf54 <st7796InitDriver>
	is_init = st7796Init();
 800e68e:	f7fd fc55 	bl	800bf3c <st7796Init>
 800e692:	4603      	mov	r3, r0
 800e694:	461a      	mov	r2, r3
 800e696:	4b1f      	ldr	r3, [pc, #124]	; (800e714 <lcdInit+0xbc>)
 800e698:	701a      	strb	r2, [r3, #0]

	lcd.setCallBack(TransferDoneISR);
 800e69a:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <lcdInit+0xb8>)
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	481e      	ldr	r0, [pc, #120]	; (800e718 <lcdInit+0xc0>)
 800e6a0:	4798      	blx	r3


	memset(frame_buffer, 0x00, sizeof(frame_buffer));
 800e6a2:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	481c      	ldr	r0, [pc, #112]	; (800e71c <lcdInit+0xc4>)
 800e6aa:	f003 f86b 	bl	8011784 <memset>
	p_draw_frame_buf = frame_buffer[frame_index];
 800e6ae:	4b1c      	ldr	r3, [pc, #112]	; (800e720 <lcdInit+0xc8>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	1a9b      	subs	r3, r3, r2
 800e6ba:	019b      	lsls	r3, r3, #6
 800e6bc:	4a17      	ldr	r2, [pc, #92]	; (800e71c <lcdInit+0xc4>)
 800e6be:	4413      	add	r3, r2
 800e6c0:	4a18      	ldr	r2, [pc, #96]	; (800e724 <lcdInit+0xcc>)
 800e6c2:	6013      	str	r3, [r2, #0]

	lcd.fillRect(0, 0, lcd._width, lcd._height, TFT_BLACK);
 800e6c4:	4b12      	ldr	r3, [pc, #72]	; (800e710 <lcdInit+0xb8>)
 800e6c6:	69dc      	ldr	r4, [r3, #28]
 800e6c8:	4b11      	ldr	r3, [pc, #68]	; (800e710 <lcdInit+0xb8>)
 800e6ca:	8c1b      	ldrh	r3, [r3, #32]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <lcdInit+0xb8>)
 800e6d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	2100      	movs	r1, #0
 800e6dc:	2000      	movs	r0, #0
 800e6de:	47a0      	blx	r4
//	drawBitmap(0, 0, (const uint8_t *)background, 320, 240, TFT_RED);

//	lcdDrawFillRect(0, 0, lcd._width, lcd._height, TFT_RED);
//	lcdUpdateDraw();

	lcdSetBackLight(100);
 800e6e0:	2064      	movs	r0, #100	; 0x64
 800e6e2:	f000 f825 	bl	800e730 <lcdSetBackLight>

	if (is_init != true)
 800e6e6:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <lcdInit+0xbc>)
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	f083 0301 	eor.w	r3, r3, #1
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d001      	beq.n	800e6f8 <lcdInit+0xa0>
	{
		return false;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	e004      	b.n	800e702 <lcdInit+0xaa>
	}

	#ifdef _USE_HW_CLI
		cliAdd("lcd", cliLcd);
 800e6f8:	490b      	ldr	r1, [pc, #44]	; (800e728 <lcdInit+0xd0>)
 800e6fa:	480c      	ldr	r0, [pc, #48]	; (800e72c <lcdInit+0xd4>)
 800e6fc:	f7ff f8fa 	bl	800d8f4 <cliAdd>
	#endif

	return true;
 800e700:	2301      	movs	r3, #1
}
 800e702:	4618      	mov	r0, r3
 800e704:	3704      	adds	r7, #4
 800e706:	46bd      	mov	sp, r7
 800e708:	bd90      	pop	{r4, r7, pc}
 800e70a:	bf00      	nop
 800e70c:	200001bc 	.word	0x200001bc
 800e710:	20001ffc 	.word	0x20001ffc
 800e714:	20002020 	.word	0x20002020
 800e718:	0800e609 	.word	0x0800e609
 800e71c:	20002040 	.word	0x20002040
 800e720:	20002021 	.word	0x20002021
 800e724:	20002030 	.word	0x20002030
 800e728:	0800ef75 	.word	0x0800ef75
 800e72c:	08021620 	.word	0x08021620

0800e730 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2264      	movs	r2, #100	; 0x64
 800e73e:	2100      	movs	r1, #0
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff ff47 	bl	800e5d4 <constrain>
 800e746:	4603      	mov	r3, r0
 800e748:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <lcdSetBackLight+0x4c>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	79fa      	ldrb	r2, [r7, #7]
 800e750:	429a      	cmp	r2, r3
 800e752:	d002      	beq.n	800e75a <lcdSetBackLight+0x2a>
  {
    backlight_value = value;
 800e754:	4a09      	ldr	r2, [pc, #36]	; (800e77c <lcdSetBackLight+0x4c>)
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 800e75a:	4b08      	ldr	r3, [pc, #32]	; (800e77c <lcdSetBackLight+0x4c>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d004      	beq.n	800e76c <lcdSetBackLight+0x3c>
  {
	  TFT_BKL_H;
 800e762:	2101      	movs	r1, #1
 800e764:	2012      	movs	r0, #18
 800e766:	f7ff fdfb 	bl	800e360 <gpioPinWrite>
  }
  else
  {
	  TFT_BKL_L;
  }
}
 800e76a:	e003      	b.n	800e774 <lcdSetBackLight+0x44>
	  TFT_BKL_L;
 800e76c:	2100      	movs	r1, #0
 800e76e:	2012      	movs	r0, #18
 800e770:	f7ff fdf6 	bl	800e360 <gpioPinWrite>
}
 800e774:	bf00      	nop
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	200001bc 	.word	0x200001bc

0800e780 <lcdClearBuffer>:
  WriteMultiple(rgb_code, (uint32_t)lcd._width * (uint32_t)lcd._height);

}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 800e780:	b538      	push	{r3, r4, r5, lr}
  uint16_t *p_buf = lcdGetFrameBuffer();

  for (int i=0; i<lcd._width * lcd._height; i++)
 800e782:	4c0c      	ldr	r4, [pc, #48]	; (800e7b4 <lcdClearBuffer+0x34>)
{
 800e784:	4605      	mov	r5, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 800e786:	f000 f8b3 	bl	800e8f0 <lcdGetFrameBuffer>
  for (int i=0; i<lcd._width * lcd._height; i++)
 800e78a:	8c23      	ldrh	r3, [r4, #32]
 800e78c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800e78e:	fb02 f303 	mul.w	r3, r2, r3
 800e792:	b16b      	cbz	r3, 800e7b0 <lcdClearBuffer+0x30>
 800e794:	4601      	mov	r1, r0
 800e796:	3902      	subs	r1, #2
  {
    p_buf[i] = rgb_code;
 800e798:	b2a8      	uxth	r0, r5
  for (int i=0; i<lcd._width * lcd._height; i++)
 800e79a:	2200      	movs	r2, #0
    p_buf[i] = rgb_code;
 800e79c:	f821 0f02 	strh.w	r0, [r1, #2]!
  for (int i=0; i<lcd._width * lcd._height; i++)
 800e7a0:	8c23      	ldrh	r3, [r4, #32]
 800e7a2:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
 800e7a6:	3201      	adds	r2, #1
 800e7a8:	fb0c f303 	mul.w	r3, ip, r3
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	dcf5      	bgt.n	800e79c <lcdClearBuffer+0x1c>
  }
}
 800e7b0:	bd38      	pop	{r3, r4, r5, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20001ffc 	.word	0x20001ffc

0800e7b8 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	af00      	add	r7, sp, #0
  return fps_count;
 800e7bc:	4b03      	ldr	r3, [pc, #12]	; (800e7cc <lcdGetFps+0x14>)
 800e7be:	681b      	ldr	r3, [r3, #0]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	2000202c 	.word	0x2000202c

0800e7d0 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	af00      	add	r7, sp, #0
  return fps_time;
 800e7d4:	4b03      	ldr	r3, [pc, #12]	; (800e7e4 <lcdGetFpsTime+0x14>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20002028 	.word	0x20002028

0800e7e8 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 800e7ec:	4b08      	ldr	r3, [pc, #32]	; (800e810 <lcdDrawAvailable+0x28>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	bf14      	ite	ne
 800e7f4:	2301      	movne	r3, #1
 800e7f6:	2300      	moveq	r3, #0
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	f083 0301 	eor.w	r3, r3, #1
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	f003 0301 	and.w	r3, r3, #1
 800e804:	b2db      	uxtb	r3, r3
}
 800e806:	4618      	mov	r0, r3
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	20002022 	.word	0x20002022

0800e814 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 800e814:	b598      	push	{r3, r4, r7, lr}
 800e816:	af00      	add	r7, sp, #0
  if (is_init != true)
 800e818:	4b1a      	ldr	r3, [pc, #104]	; (800e884 <lcdRequestDraw+0x70>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	f083 0301 	eor.w	r3, r3, #1
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <lcdRequestDraw+0x16>
  {
    return false;
 800e826:	2300      	movs	r3, #0
 800e828:	e02a      	b.n	800e880 <lcdRequestDraw+0x6c>
  }
  if (lcd_request_draw == true)
 800e82a:	4b17      	ldr	r3, [pc, #92]	; (800e888 <lcdRequestDraw+0x74>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <lcdRequestDraw+0x22>
  {
    return false;
 800e832:	2300      	movs	r3, #0
 800e834:	e024      	b.n	800e880 <lcdRequestDraw+0x6c>
  }

  lcd.setWindow(0, 0, lcd._width-1, lcd._height-1);
 800e836:	4b15      	ldr	r3, [pc, #84]	; (800e88c <lcdRequestDraw+0x78>)
 800e838:	689c      	ldr	r4, [r3, #8]
 800e83a:	4b14      	ldr	r3, [pc, #80]	; (800e88c <lcdRequestDraw+0x78>)
 800e83c:	8c1b      	ldrh	r3, [r3, #32]
 800e83e:	1e5a      	subs	r2, r3, #1
 800e840:	4b12      	ldr	r3, [pc, #72]	; (800e88c <lcdRequestDraw+0x78>)
 800e842:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e844:	3b01      	subs	r3, #1
 800e846:	2100      	movs	r1, #0
 800e848:	2000      	movs	r0, #0
 800e84a:	47a0      	blx	r4

  lcd_request_draw = true;
 800e84c:	4b0e      	ldr	r3, [pc, #56]	; (800e888 <lcdRequestDraw+0x74>)
 800e84e:	2201      	movs	r2, #1
 800e850:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], lcd._width * lcd._height, 0);
 800e852:	4b0e      	ldr	r3, [pc, #56]	; (800e88c <lcdRequestDraw+0x78>)
 800e854:	699c      	ldr	r4, [r3, #24]
 800e856:	4b0e      	ldr	r3, [pc, #56]	; (800e890 <lcdRequestDraw+0x7c>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	461a      	mov	r2, r3
 800e85c:	4613      	mov	r3, r2
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	1a9b      	subs	r3, r3, r2
 800e862:	019b      	lsls	r3, r3, #6
 800e864:	4a0b      	ldr	r2, [pc, #44]	; (800e894 <lcdRequestDraw+0x80>)
 800e866:	4413      	add	r3, r2
 800e868:	4a08      	ldr	r2, [pc, #32]	; (800e88c <lcdRequestDraw+0x78>)
 800e86a:	8c12      	ldrh	r2, [r2, #32]
 800e86c:	4611      	mov	r1, r2
 800e86e:	4a07      	ldr	r2, [pc, #28]	; (800e88c <lcdRequestDraw+0x78>)
 800e870:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800e872:	fb01 f202 	mul.w	r2, r1, r2
 800e876:	4611      	mov	r1, r2
 800e878:	2200      	movs	r2, #0
 800e87a:	4618      	mov	r0, r3
 800e87c:	47a0      	blx	r4

  return true;
 800e87e:	2301      	movs	r3, #1
}
 800e880:	4618      	mov	r0, r3
 800e882:	bd98      	pop	{r3, r4, r7, pc}
 800e884:	20002020 	.word	0x20002020
 800e888:	20002022 	.word	0x20002022
 800e88c:	20001ffc 	.word	0x20001ffc
 800e890:	20002021 	.word	0x20002021
 800e894:	20002040 	.word	0x20002040

0800e898 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800e89e:	4b13      	ldr	r3, [pc, #76]	; (800e8ec <lcdUpdateDraw+0x54>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	f083 0301 	eor.w	r3, r3, #1
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d118      	bne.n	800e8de <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 800e8ac:	f7ff ffb2 	bl	800e814 <lcdRequestDraw>

  pre_time = millis();
 800e8b0:	f7fc fe0f 	bl	800b4d2 <millis>
 800e8b4:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 800e8b6:	e009      	b.n	800e8cc <lcdUpdateDraw+0x34>
  {
    delay(1);
 800e8b8:	2001      	movs	r0, #1
 800e8ba:	f7fc fdf7 	bl	800b4ac <delay>
    if (millis()-pre_time >= 100)
 800e8be:	f7fc fe08 	bl	800b4d2 <millis>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	2b63      	cmp	r3, #99	; 0x63
 800e8ca:	d80a      	bhi.n	800e8e2 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 800e8cc:	f7ff ff8c 	bl	800e7e8 <lcdDrawAvailable>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	f083 0301 	eor.w	r3, r3, #1
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1ed      	bne.n	800e8b8 <lcdUpdateDraw+0x20>
 800e8dc:	e002      	b.n	800e8e4 <lcdUpdateDraw+0x4c>
    return;
 800e8de:	bf00      	nop
 800e8e0:	e000      	b.n	800e8e4 <lcdUpdateDraw+0x4c>
    {
      break;
 800e8e2:	bf00      	nop
    }
  }
}
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20002020 	.word	0x20002020

0800e8f0 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 800e8f4:	4b03      	ldr	r3, [pc, #12]	; (800e904 <lcdGetFrameBuffer+0x14>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	20002030 	.word	0x20002030

0800e908 <lcdDrawLine>:
  return lcd._height;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800e908:	b590      	push	{r4, r7, lr}
 800e90a:	b089      	sub	sp, #36	; 0x24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4604      	mov	r4, r0
 800e910:	4608      	mov	r0, r1
 800e912:	4611      	mov	r1, r2
 800e914:	461a      	mov	r2, r3
 800e916:	4623      	mov	r3, r4
 800e918:	80fb      	strh	r3, [r7, #6]
 800e91a:	4603      	mov	r3, r0
 800e91c:	80bb      	strh	r3, [r7, #4]
 800e91e:	460b      	mov	r3, r1
 800e920:	807b      	strh	r3, [r7, #2]
 800e922:	4613      	mov	r3, r2
 800e924:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800e926:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e92a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e934:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e938:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e93c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e940:	1acb      	subs	r3, r1, r3
 800e942:	2b00      	cmp	r3, #0
 800e944:	bfb8      	it	lt
 800e946:	425b      	neglt	r3, r3
 800e948:	429a      	cmp	r2, r3
 800e94a:	bfcc      	ite	gt
 800e94c:	2301      	movgt	r3, #1
 800e94e:	2300      	movle	r3, #0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 800e954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	da01      	bge.n	800e960 <lcdDrawLine+0x58>
 800e95c:	2300      	movs	r3, #0
 800e95e:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 800e960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	da01      	bge.n	800e96c <lcdDrawLine+0x64>
 800e968:	2300      	movs	r3, #0
 800e96a:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 800e96c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e970:	2b00      	cmp	r3, #0
 800e972:	da01      	bge.n	800e978 <lcdDrawLine+0x70>
 800e974:	2300      	movs	r3, #0
 800e976:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 800e978:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	da01      	bge.n	800e984 <lcdDrawLine+0x7c>
 800e980:	2300      	movs	r3, #0
 800e982:	803b      	strh	r3, [r7, #0]


  if (steep)
 800e984:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00b      	beq.n	800e9a4 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	833b      	strh	r3, [r7, #24]
 800e990:	88bb      	ldrh	r3, [r7, #4]
 800e992:	80fb      	strh	r3, [r7, #6]
 800e994:	8b3b      	ldrh	r3, [r7, #24]
 800e996:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 800e998:	887b      	ldrh	r3, [r7, #2]
 800e99a:	82fb      	strh	r3, [r7, #22]
 800e99c:	883b      	ldrh	r3, [r7, #0]
 800e99e:	807b      	strh	r3, [r7, #2]
 800e9a0:	8afb      	ldrh	r3, [r7, #22]
 800e9a2:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 800e9a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e9a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	dd0b      	ble.n	800e9c8 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 800e9b0:	88fb      	ldrh	r3, [r7, #6]
 800e9b2:	82bb      	strh	r3, [r7, #20]
 800e9b4:	887b      	ldrh	r3, [r7, #2]
 800e9b6:	80fb      	strh	r3, [r7, #6]
 800e9b8:	8abb      	ldrh	r3, [r7, #20]
 800e9ba:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 800e9bc:	88bb      	ldrh	r3, [r7, #4]
 800e9be:	827b      	strh	r3, [r7, #18]
 800e9c0:	883b      	ldrh	r3, [r7, #0]
 800e9c2:	80bb      	strh	r3, [r7, #4]
 800e9c4:	8a7b      	ldrh	r3, [r7, #18]
 800e9c6:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800e9c8:	887a      	ldrh	r2, [r7, #2]
 800e9ca:	88fb      	ldrh	r3, [r7, #6]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800e9d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e9d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bfb8      	it	lt
 800e9e0:	425b      	neglt	r3, r3
 800e9e2:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 800e9e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e9e8:	0fda      	lsrs	r2, r3, #31
 800e9ea:	4413      	add	r3, r2
 800e9ec:	105b      	asrs	r3, r3, #1
 800e9ee:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 800e9f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	da02      	bge.n	800ea02 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	83bb      	strh	r3, [r7, #28]
 800ea00:	e031      	b.n	800ea66 <lcdDrawLine+0x15e>
  } else {
    ystep = -1;
 800ea02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea06:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 800ea08:	e02d      	b.n	800ea66 <lcdDrawLine+0x15e>
  {
    if (steep)
 800ea0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d008      	beq.n	800ea24 <lcdDrawLine+0x11c>
    {
      //lcdDrawPixel(y0, x0, color);
      drawPixel(y0, x0, color);
 800ea12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ea16:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800ea1a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f000 f883 	bl	800eb28 <drawPixel>
 800ea22:	e007      	b.n	800ea34 <lcdDrawLine+0x12c>
    } else
    {
      //lcdDrawPixel(x0, y0, color);
      drawPixel(y0, x0, color);
 800ea24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ea28:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800ea2c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f000 f87a 	bl	800eb28 <drawPixel>
    }
    err -= dy;
 800ea34:	8bfa      	ldrh	r2, [r7, #30]
 800ea36:	89fb      	ldrh	r3, [r7, #14]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 800ea3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	da09      	bge.n	800ea5a <lcdDrawLine+0x152>
    {
      y0 += ystep;
 800ea46:	88ba      	ldrh	r2, [r7, #4]
 800ea48:	8bbb      	ldrh	r3, [r7, #28]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800ea50:	8bfa      	ldrh	r2, [r7, #30]
 800ea52:	8a3b      	ldrh	r3, [r7, #16]
 800ea54:	4413      	add	r3, r2
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 800ea5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	3301      	adds	r3, #1
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	80fb      	strh	r3, [r7, #6]
 800ea66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	ddcb      	ble.n	800ea0a <lcdDrawLine+0x102>
    }
  }
}
 800ea72:	bf00      	nop
 800ea74:	bf00      	nop
 800ea76:	3724      	adds	r7, #36	; 0x24
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd90      	pop	{r4, r7, pc}

0800ea7c <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800ea7c:	b590      	push	{r4, r7, lr}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af02      	add	r7, sp, #8
 800ea82:	4604      	mov	r4, r0
 800ea84:	4608      	mov	r0, r1
 800ea86:	4611      	mov	r1, r2
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4623      	mov	r3, r4
 800ea8c:	80fb      	strh	r3, [r7, #6]
 800ea8e:	4603      	mov	r3, r0
 800ea90:	80bb      	strh	r3, [r7, #4]
 800ea92:	460b      	mov	r3, r1
 800ea94:	807b      	strh	r3, [r7, #2]
 800ea96:	4613      	mov	r3, r2
 800ea98:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 800ea9a:	88ba      	ldrh	r2, [r7, #4]
 800ea9c:	887b      	ldrh	r3, [r7, #2]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	b21c      	sxth	r4, r3
 800eaa8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eaac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800eab0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800eab4:	883b      	ldrh	r3, [r7, #0]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	4623      	mov	r3, r4
 800eaba:	f7ff ff25 	bl	800e908 <lcdDrawLine>
}
 800eabe:	bf00      	nop
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd90      	pop	{r4, r7, pc}
 800eac6:	bf00      	nop

0800eac8 <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	4604      	mov	r4, r0
 800ead0:	4608      	mov	r0, r1
 800ead2:	4611      	mov	r1, r2
 800ead4:	461a      	mov	r2, r3
 800ead6:	4623      	mov	r3, r4
 800ead8:	80fb      	strh	r3, [r7, #6]
 800eada:	4603      	mov	r3, r0
 800eadc:	80bb      	strh	r3, [r7, #4]
 800eade:	460b      	mov	r3, r1
 800eae0:	807b      	strh	r3, [r7, #2]
 800eae2:	4613      	mov	r3, r2
 800eae4:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 800eae6:	88fb      	ldrh	r3, [r7, #6]
 800eae8:	81fb      	strh	r3, [r7, #14]
 800eaea:	e00e      	b.n	800eb0a <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 800eaec:	8c3b      	ldrh	r3, [r7, #32]
 800eaee:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eaf2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800eaf6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800eafa:	f7ff ffbf 	bl	800ea7c <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 800eafe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	3301      	adds	r3, #1
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	81fb      	strh	r3, [r7, #14]
 800eb0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eb0e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800eb12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb16:	440b      	add	r3, r1
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	dbe7      	blt.n	800eaec <lcdDrawFillRect+0x24>
  }
}
 800eb1c:	bf00      	nop
 800eb1e:	bf00      	nop
 800eb20:	3714      	adds	r7, #20
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd90      	pop	{r4, r7, pc}
 800eb26:	bf00      	nop

0800eb28 <drawPixel>:
  }
  TFT_CS_H;
}

void drawPixel(int32_t x, int32_t y, uint32_t color)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
  TFT_CS_L;
 800eb34:	2100      	movs	r1, #0
 800eb36:	200f      	movs	r0, #15
 800eb38:	f7ff fc12 	bl	800e360 <gpioPinWrite>

  writecommand(TFT_CASET);
 800eb3c:	202a      	movs	r0, #42	; 0x2a
 800eb3e:	f7fd fa95 	bl	800c06c <writecommand>
  writedata((x >> 8) & 0xFF);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	121b      	asrs	r3, r3, #8
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fd faa9 	bl	800c0a0 <writedata>
  writedata(x & 0xFF);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fd faa4 	bl	800c0a0 <writedata>

  writecommand(TFT_PASET);
 800eb58:	202b      	movs	r0, #43	; 0x2b
 800eb5a:	f7fd fa87 	bl	800c06c <writecommand>
  writedata((y >> 8) & 0xFF);
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	121b      	asrs	r3, r3, #8
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fd fa9b 	bl	800c0a0 <writedata>
  writedata(y & 0xFF);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fd fa96 	bl	800c0a0 <writedata>

  writecommand(TFT_RAMWR); // write to RAM
 800eb74:	202c      	movs	r0, #44	; 0x2c
 800eb76:	f7fd fa79 	bl	800c06c <writecommand>

  spiSetBitWidth(_DEF_SPI1, 16);
 800eb7a:	2110      	movs	r1, #16
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f000 fc4f 	bl	800f420 <spiSetBitWidth>

	TFT_DC_D;        // Play safe, but should already be in data mode
 800eb82:	2101      	movs	r1, #1
 800eb84:	2010      	movs	r0, #16
 800eb86:	f7ff fbeb 	bl	800e360 <gpioPinWrite>
	TFT_CS_L;
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	200f      	movs	r0, #15
 800eb8e:	f7ff fbe7 	bl	800e360 <gpioPinWrite>
	spiTransfer16(_DEF_SPI1, color);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4619      	mov	r1, r3
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f000 fc9b 	bl	800f4d4 <spiTransfer16>
  TFT_CS_H;
 800eb9e:	2101      	movs	r1, #1
 800eba0:	200f      	movs	r0, #15
 800eba2:	f7ff fbdd 	bl	800e360 <gpioPinWrite>
	spiSetBitWidth(_DEF_SPI1, 8);
 800eba6:	2108      	movs	r1, #8
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f000 fc39 	bl	800f420 <spiSetBitWidth>

}
 800ebae:	bf00      	nop
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop

0800ebb8 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, lcd._width, lcd._height, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 800ebb8:	b408      	push	{r3}
 800ebba:	b590      	push	{r4, r7, lr}
 800ebbc:	b0d8      	sub	sp, #352	; 0x160
 800ebbe:	af02      	add	r7, sp, #8
 800ebc0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ebc4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ebc8:	6018      	str	r0, [r3, #0]
 800ebca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ebce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ebd2:	6019      	str	r1, [r3, #0]
 800ebd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ebd8:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 800ebdc:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 800ebde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ebe2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 800ebe6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ebea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 800ebf4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800ebf8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ebfc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800ec00:	21ff      	movs	r1, #255	; 0xff
 800ec02:	f002 fd1b 	bl	801163c <vsniprintf>
 800ec06:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 800ec0a:	4b82      	ldr	r3, [pc, #520]	; (800ee14 <lcdPrintf+0x25c>)
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	4b81      	ldr	r3, [pc, #516]	; (800ee18 <lcdPrintf+0x260>)
 800ec12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d074      	beq.n	800ed06 <lcdPrintf+0x14e>
  {
    for( i=0; i<len; i+=Size_Char )
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ec22:	e069      	b.n	800ecf8 <lcdPrintf+0x140>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 800ec24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ec28:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800ec2c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ec30:	4413      	add	r3, r2
 800ec32:	781a      	ldrb	r2, [r3, #0]
 800ec34:	4b77      	ldr	r3, [pc, #476]	; (800ee14 <lcdPrintf+0x25c>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4b77      	ldr	r3, [pc, #476]	; (800ee18 <lcdPrintf+0x260>)
 800ec3c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800ec40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ec44:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800ec48:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ec4c:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 800ec50:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ec54:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	4623      	mov	r3, r4
 800ec5e:	6809      	ldr	r1, [r1, #0]
 800ec60:	6800      	ldr	r0, [r0, #0]
 800ec62:	f000 f92f 	bl	800eec4 <disEngFont>

      Size_Char = 1;
 800ec66:	2301      	movs	r3, #1
 800ec68:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 800ec6c:	4b69      	ldr	r3, [pc, #420]	; (800ee14 <lcdPrintf+0x25c>)
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	461a      	mov	r2, r3
 800ec72:	4b69      	ldr	r3, [pc, #420]	; (800ee18 <lcdPrintf+0x260>)
 800ec74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 800ec7e:	4b65      	ldr	r3, [pc, #404]	; (800ee14 <lcdPrintf+0x25c>)
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	461a      	mov	r2, r3
 800ec84:	4b64      	ldr	r3, [pc, #400]	; (800ee18 <lcdPrintf+0x260>)
 800ec86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8a:	785b      	ldrb	r3, [r3, #1]
 800ec8c:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 800ec90:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800ec94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ec98:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ec9c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800eca0:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800eca4:	6809      	ldr	r1, [r1, #0]
 800eca6:	440a      	add	r2, r1
 800eca8:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > lcd._width)
 800ecaa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800ecae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ecb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4413      	add	r3, r2
 800ecba:	4a58      	ldr	r2, [pc, #352]	; (800ee1c <lcdPrintf+0x264>)
 800ecbc:	8c12      	ldrh	r2, [r2, #32]
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	dd13      	ble.n	800ecea <lcdPrintf+0x132>
      {
        x  = x_Pre;
 800ecc2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ecc6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ecca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ecce:	601a      	str	r2, [r3, #0]
        y += font_height;
 800ecd0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800ecd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ecd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ecdc:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800ece0:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 800ece4:	6809      	ldr	r1, [r1, #0]
 800ece6:	440a      	add	r2, r1
 800ece8:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 800ecea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ecee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ecf8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ecfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed00:	429a      	cmp	r2, r3
 800ed02:	db8f      	blt.n	800ec24 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 800ed04:	e07d      	b.n	800ee02 <lcdPrintf+0x24a>
    for( i=0; i<len; i+=Size_Char )
 800ed06:	2300      	movs	r3, #0
 800ed08:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ed0c:	e071      	b.n	800edf2 <lcdPrintf+0x23a>
      hanFontLoad( &print_buffer[i], &FontBuf );
 800ed0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ed12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ed16:	4413      	add	r3, r2
 800ed18:	f107 0214 	add.w	r2, r7, #20
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fc fe1a 	bl	800b958 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 800ed24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ed28:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	f107 0214 	add.w	r2, r7, #20
 800ed32:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800ed36:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 800ed3a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800ed3e:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 800ed42:	6809      	ldr	r1, [r1, #0]
 800ed44:	6800      	ldr	r0, [r0, #0]
 800ed46:	f000 f86b 	bl	800ee20 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 800ed4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ed4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ed52:	885b      	ldrh	r3, [r3, #2]
 800ed54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 800ed58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	dd0e      	ble.n	800ed7e <lcdPrintf+0x1c6>
        font_width = 16;
 800ed60:	2310      	movs	r3, #16
 800ed62:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 800ed66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ed6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ed6e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ed72:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800ed76:	6812      	ldr	r2, [r2, #0]
 800ed78:	3210      	adds	r2, #16
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	e00d      	b.n	800ed9a <lcdPrintf+0x1e2>
        font_width = 8;
 800ed7e:	2308      	movs	r3, #8
 800ed80:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 800ed84:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ed88:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ed8c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ed90:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800ed94:	6812      	ldr	r2, [r2, #0]
 800ed96:	3208      	adds	r2, #8
 800ed98:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > lcd._width)
 800ed9a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800ed9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800eda2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4413      	add	r3, r2
 800edaa:	4a1c      	ldr	r2, [pc, #112]	; (800ee1c <lcdPrintf+0x264>)
 800edac:	8c12      	ldrh	r2, [r2, #32]
 800edae:	4293      	cmp	r3, r2
 800edb0:	dd11      	ble.n	800edd6 <lcdPrintf+0x21e>
        x  = x_Pre;
 800edb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800edb6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800edba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800edbe:	601a      	str	r2, [r3, #0]
        y += 16;
 800edc0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800edc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800edc8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800edcc:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800edd0:	6812      	ldr	r2, [r2, #0]
 800edd2:	3210      	adds	r2, #16
 800edd4:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800edd6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800edda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800edde:	889b      	ldrh	r3, [r3, #4]
 800ede0:	2b04      	cmp	r3, #4
 800ede2:	d00d      	beq.n	800ee00 <lcdPrintf+0x248>
    for( i=0; i<len; i+=Size_Char )
 800ede4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ede8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800edec:	4413      	add	r3, r2
 800edee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800edf2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800edf6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800edfa:	429a      	cmp	r2, r3
 800edfc:	db87      	blt.n	800ed0e <lcdPrintf+0x156>
}
 800edfe:	e000      	b.n	800ee02 <lcdPrintf+0x24a>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800ee00:	bf00      	nop
}
 800ee02:	bf00      	nop
 800ee04:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ee0e:	b001      	add	sp, #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	200001bd 	.word	0x200001bd
 800ee18:	200001c0 	.word	0x200001c0
 800ee1c:	20001ffc 	.word	0x20001ffc

0800ee20 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	885b      	ldrh	r3, [r3, #2]
 800ee32:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 800ee34:	8b3b      	ldrh	r3, [r7, #24]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d901      	bls.n	800ee3e <disHanFont+0x1e>
  {
    FontSize = 2;
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800ee3e:	2300      	movs	r3, #0
 800ee40:	83fb      	strh	r3, [r7, #30]
 800ee42:	e036      	b.n	800eeb2 <disHanFont+0x92>
  {
    index_x = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 800ee48:	2300      	movs	r3, #0
 800ee4a:	83bb      	strh	r3, [r7, #28]
 800ee4c:	e02a      	b.n	800eea4 <disHanFont+0x84>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 800ee4e:	8bfb      	ldrh	r3, [r7, #30]
 800ee50:	8b3a      	ldrh	r2, [r7, #24]
 800ee52:	fb03 f202 	mul.w	r2, r3, r2
 800ee56:	8bbb      	ldrh	r3, [r7, #28]
 800ee58:	4413      	add	r3, r2
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	799b      	ldrb	r3, [r3, #6]
 800ee60:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 800ee62:	2300      	movs	r3, #0
 800ee64:	837b      	strh	r3, [r7, #26]
 800ee66:	e017      	b.n	800ee98 <disHanFont+0x78>
      {
        if( (font_data<<Loop) & (0x80))
 800ee68:	7d7a      	ldrb	r2, [r7, #21]
 800ee6a:	8b7b      	ldrh	r3, [r7, #26]
 800ee6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d009      	beq.n	800ee8c <disHanFont+0x6c>
        {
        	drawPixel(x + index_x, y + i, textcolor);
 800ee78:	8afa      	ldrh	r2, [r7, #22]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	18d0      	adds	r0, r2, r3
 800ee7e:	8bfa      	ldrh	r2, [r7, #30]
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	4413      	add	r3, r2
 800ee84:	887a      	ldrh	r2, [r7, #2]
 800ee86:	4619      	mov	r1, r3
 800ee88:	f7ff fe4e 	bl	800eb28 <drawPixel>
        }
        index_x++;
 800ee8c:	8afb      	ldrh	r3, [r7, #22]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 800ee92:	8b7b      	ldrh	r3, [r7, #26]
 800ee94:	3301      	adds	r3, #1
 800ee96:	837b      	strh	r3, [r7, #26]
 800ee98:	8b7b      	ldrh	r3, [r7, #26]
 800ee9a:	2b07      	cmp	r3, #7
 800ee9c:	d9e4      	bls.n	800ee68 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 800ee9e:	8bbb      	ldrh	r3, [r7, #28]
 800eea0:	3301      	adds	r3, #1
 800eea2:	83bb      	strh	r3, [r7, #28]
 800eea4:	8bba      	ldrh	r2, [r7, #28]
 800eea6:	8b3b      	ldrh	r3, [r7, #24]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d3d0      	bcc.n	800ee4e <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800eeac:	8bfb      	ldrh	r3, [r7, #30]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	83fb      	strh	r3, [r7, #30]
 800eeb2:	8bfb      	ldrh	r3, [r7, #30]
 800eeb4:	2b0f      	cmp	r3, #15
 800eeb6:	d9c5      	bls.n	800ee44 <disHanFont+0x24>
      }
    }
  }
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	3720      	adds	r7, #32
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop

0800eec4 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	603b      	str	r3, [r7, #0]
 800eed0:	4613      	mov	r3, r2
 800eed2:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 800eed4:	2300      	movs	r3, #0
 800eed6:	61fb      	str	r3, [r7, #28]
 800eed8:	e031      	b.n	800ef3e <disEngFont+0x7a>
  {
    b = font->data[(ch - 32) * font->height + i];
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	3b20      	subs	r3, #32
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	7849      	ldrb	r1, [r1, #1]
 800eee6:	fb01 f303 	mul.w	r3, r1, r3
 800eeea:	4619      	mov	r1, r3
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	440b      	add	r3, r1
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	4413      	add	r3, r2
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 800eef8:	2300      	movs	r3, #0
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	e016      	b.n	800ef2c <disEngFont+0x68>
    {
      if ((b << j) & 0x8000)
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	fa02 f303 	lsl.w	r3, r2, r3
 800ef06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00b      	beq.n	800ef26 <disEngFont+0x62>
      {
      	drawPixel(x + j, (y + i), textcolor);
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	4413      	add	r3, r2
 800ef14:	4618      	mov	r0, r3
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef20:	461a      	mov	r2, r3
 800ef22:	f7ff fe01 	bl	800eb28 <drawPixel>
    for (j = 0; j < font->width; j++)
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	61bb      	str	r3, [r7, #24]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d3e2      	bcc.n	800eefe <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	61fb      	str	r3, [r7, #28]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	785b      	ldrb	r3, [r3, #1]
 800ef42:	461a      	mov	r2, r3
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d3c7      	bcc.n	800eeda <disEngFont+0x16>
      }
    }
  }
}
 800ef4a:	bf00      	nop
 800ef4c:	bf00      	nop
 800ef4e:	3720      	adds	r7, #32
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 800ef5e:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <lcdSetFont+0x1c>)
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	7013      	strb	r3, [r2, #0]
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	200001bd 	.word	0x200001bd

0800ef74 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d163      	bne.n	800f050 <cliLcd+0xdc>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	494e      	ldr	r1, [pc, #312]	; (800f0c8 <cliLcd+0x154>)
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4798      	blx	r3
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d05b      	beq.n	800f050 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 800ef98:	2003      	movs	r0, #3
 800ef9a:	f7ff ffdb 	bl	800ef54 <lcdSetFont>

    while(cliKeepLoop())
 800ef9e:	e04b      	b.n	800f038 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 800efa0:	f7ff fc22 	bl	800e7e8 <lcdDrawAvailable>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d046      	beq.n	800f038 <cliLcd+0xc4>
      {
        lcdClearBuffer(TFT_BLACK);
 800efaa:	2000      	movs	r0, #0
 800efac:	f7ff fbe8 	bl	800e780 <lcdClearBuffer>

        lcdPrintf(25,16*0, TFT_GREEN, "[LCD 테스트]");
 800efb0:	4b46      	ldr	r3, [pc, #280]	; (800f0cc <cliLcd+0x158>)
 800efb2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800efb6:	2100      	movs	r1, #0
 800efb8:	2019      	movs	r0, #25
 800efba:	f7ff fdfd 	bl	800ebb8 <lcdPrintf>

        lcdPrintf(0,16*1, TFT_WHITE, "%d fps", lcdGetFps());
 800efbe:	f7ff fbfb 	bl	800e7b8 <lcdGetFps>
 800efc2:	4603      	mov	r3, r0
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	4b42      	ldr	r3, [pc, #264]	; (800f0d0 <cliLcd+0x15c>)
 800efc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efcc:	2110      	movs	r1, #16
 800efce:	2000      	movs	r0, #0
 800efd0:	f7ff fdf2 	bl	800ebb8 <lcdPrintf>
        lcdPrintf(0,16*2, TFT_WHITE, "%d ms" , lcdGetFpsTime());
 800efd4:	f7ff fbfc 	bl	800e7d0 <lcdGetFpsTime>
 800efd8:	4603      	mov	r3, r0
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	4b3d      	ldr	r3, [pc, #244]	; (800f0d4 <cliLcd+0x160>)
 800efde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe2:	2120      	movs	r1, #32
 800efe4:	2000      	movs	r0, #0
 800efe6:	f7ff fde7 	bl	800ebb8 <lcdPrintf>
        lcdPrintf(0,16*3, TFT_WHITE, "%d ms" , millis());
 800efea:	f7fc fa72 	bl	800b4d2 <millis>
 800efee:	4603      	mov	r3, r0
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4b38      	ldr	r3, [pc, #224]	; (800f0d4 <cliLcd+0x160>)
 800eff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eff8:	2130      	movs	r1, #48	; 0x30
 800effa:	2000      	movs	r0, #0
 800effc:	f7ff fddc 	bl	800ebb8 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, TFT_RED);
 800f000:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f004:	9300      	str	r3, [sp, #0]
 800f006:	230a      	movs	r3, #10
 800f008:	220a      	movs	r2, #10
 800f00a:	2146      	movs	r1, #70	; 0x46
 800f00c:	2000      	movs	r0, #0
 800f00e:	f7ff fd5b 	bl	800eac8 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, TFT_GREEN);
 800f012:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	230a      	movs	r3, #10
 800f01a:	220a      	movs	r2, #10
 800f01c:	2146      	movs	r1, #70	; 0x46
 800f01e:	200a      	movs	r0, #10
 800f020:	f7ff fd52 	bl	800eac8 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, TFT_BLUE);
 800f024:	231f      	movs	r3, #31
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	230a      	movs	r3, #10
 800f02a:	220a      	movs	r2, #10
 800f02c:	2146      	movs	r1, #70	; 0x46
 800f02e:	2014      	movs	r0, #20
 800f030:	f7ff fd4a 	bl	800eac8 <lcdDrawFillRect>

        lcdRequestDraw();
 800f034:	f7ff fbee 	bl	800e814 <lcdRequestDraw>
    while(cliKeepLoop())
 800f038:	f7fe fc46 	bl	800d8c8 <cliKeepLoop>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1ae      	bne.n	800efa0 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(TFT_BLACK);
 800f042:	2000      	movs	r0, #0
 800f044:	f7ff fb9c 	bl	800e780 <lcdClearBuffer>
    lcdUpdateDraw();
 800f048:	f7ff fc26 	bl	800e898 <lcdUpdateDraw>

    ret = true;
 800f04c:	2301      	movs	r3, #1
 800f04e:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d126      	bne.n	800f0a6 <cliLcd+0x132>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	491e      	ldr	r1, [pc, #120]	; (800f0d8 <cliLcd+0x164>)
 800f05e:	2000      	movs	r0, #0
 800f060:	4798      	blx	r3
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01e      	beq.n	800f0a6 <cliLcd+0x132>
  {
	  lcdClearBuffer(TFT_BLACK);
 800f068:	2000      	movs	r0, #0
 800f06a:	f7ff fb89 	bl	800e780 <lcdClearBuffer>
	  lcdUpdateDraw();
 800f06e:	f7ff fc13 	bl	800e898 <lcdUpdateDraw>
	  while(cliKeepLoop())
 800f072:	e00c      	b.n	800f08e <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 800f074:	f001 f9ae 	bl	80103d4 <get_blink>
 800f078:	4603      	mov	r3, r0
 800f07a:	461a      	mov	r2, r3
 800f07c:	4b17      	ldr	r3, [pc, #92]	; (800f0dc <cliLcd+0x168>)
 800f07e:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 800f080:	4b16      	ldr	r3, [pc, #88]	; (800f0dc <cliLcd+0x168>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	461a      	mov	r2, r3
 800f086:	2100      	movs	r1, #0
 800f088:	2000      	movs	r0, #0
 800f08a:	f001 f95f 	bl	801034c <draw_fan_status>
	  while(cliKeepLoop())
 800f08e:	f7fe fc1b 	bl	800d8c8 <cliKeepLoop>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1ed      	bne.n	800f074 <cliLcd+0x100>
	  }
	  lcdClearBuffer(TFT_BLACK);
 800f098:	2000      	movs	r0, #0
 800f09a:	f7ff fb71 	bl	800e780 <lcdClearBuffer>
	  lcdUpdateDraw();
 800f09e:	f7ff fbfb 	bl	800e898 <lcdUpdateDraw>

	  ret = true;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	f083 0301 	eor.w	r3, r3, #1
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d005      	beq.n	800f0be <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 800f0b2:	480b      	ldr	r0, [pc, #44]	; (800f0e0 <cliLcd+0x16c>)
 800f0b4:	f7fe fb0e 	bl	800d6d4 <cliPrintf>
    cliPrintf("lcd image\n");
 800f0b8:	480a      	ldr	r0, [pc, #40]	; (800f0e4 <cliLcd+0x170>)
 800f0ba:	f7fe fb0b 	bl	800d6d4 <cliPrintf>
  }
}
 800f0be:	bf00      	nop
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	08021624 	.word	0x08021624
 800f0cc:	0802162c 	.word	0x0802162c
 800f0d0:	0802163c 	.word	0x0802163c
 800f0d4:	08021644 	.word	0x08021644
 800f0d8:	0802164c 	.word	0x0802164c
 800f0dc:	200027c0 	.word	0x200027c0
 800f0e0:	08021654 	.word	0x08021654
 800f0e4:	08021660 	.word	0x08021660

0800f0e8 <spiInit>:


static void cliSPI(cli_args_t *args);

bool spiInit(void)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
  bool ret = true;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	70fb      	strb	r3, [r7, #3]

  for (int i=0; i<SPI_MAX_CH; i++)
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	607b      	str	r3, [r7, #4]
 800f0f6:	e051      	b.n	800f19c <spiInit+0xb4>
  {
  	spi_tbl[i].is_open = false;
 800f0f8:	4930      	ldr	r1, [pc, #192]	; (800f1bc <spiInit+0xd4>)
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4413      	add	r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	440b      	add	r3, r1
 800f106:	2200      	movs	r2, #0
 800f108:	701a      	strb	r2, [r3, #0]
  	spi_tbl[i].is_tx_done = true;
 800f10a:	492c      	ldr	r1, [pc, #176]	; (800f1bc <spiInit+0xd4>)
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	4613      	mov	r3, r2
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	4413      	add	r3, r2
 800f114:	00db      	lsls	r3, r3, #3
 800f116:	440b      	add	r3, r1
 800f118:	3301      	adds	r3, #1
 800f11a:	2201      	movs	r2, #1
 800f11c:	701a      	strb	r2, [r3, #0]
  	spi_tbl[i].is_rx_done = true;
 800f11e:	4927      	ldr	r1, [pc, #156]	; (800f1bc <spiInit+0xd4>)
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	4613      	mov	r3, r2
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	4413      	add	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	440b      	add	r3, r1
 800f12c:	3302      	adds	r3, #2
 800f12e:	2201      	movs	r2, #1
 800f130:	701a      	strb	r2, [r3, #0]
  	spi_tbl[i].is_error = false;
 800f132:	4922      	ldr	r1, [pc, #136]	; (800f1bc <spiInit+0xd4>)
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	4613      	mov	r3, r2
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	4413      	add	r3, r2
 800f13c:	00db      	lsls	r3, r3, #3
 800f13e:	440b      	add	r3, r1
 800f140:	3303      	adds	r3, #3
 800f142:	2200      	movs	r2, #0
 800f144:	701a      	strb	r2, [r3, #0]
  	spi_tbl[i].func_tx = NULL;
 800f146:	491d      	ldr	r1, [pc, #116]	; (800f1bc <spiInit+0xd4>)
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	4613      	mov	r3, r2
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	4413      	add	r3, r2
 800f150:	00db      	lsls	r3, r3, #3
 800f152:	440b      	add	r3, r1
 800f154:	3304      	adds	r3, #4
 800f156:	2200      	movs	r2, #0
 800f158:	601a      	str	r2, [r3, #0]
  	spi_tbl[i].func_rx = NULL;
 800f15a:	4918      	ldr	r1, [pc, #96]	; (800f1bc <spiInit+0xd4>)
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	4613      	mov	r3, r2
 800f160:	005b      	lsls	r3, r3, #1
 800f162:	4413      	add	r3, r2
 800f164:	00db      	lsls	r3, r3, #3
 800f166:	440b      	add	r3, r1
 800f168:	3308      	adds	r3, #8
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]
  	spi_tbl[i].h_dma_rx = NULL;
 800f16e:	4913      	ldr	r1, [pc, #76]	; (800f1bc <spiInit+0xd4>)
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	4613      	mov	r3, r2
 800f174:	005b      	lsls	r3, r3, #1
 800f176:	4413      	add	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	440b      	add	r3, r1
 800f17c:	3314      	adds	r3, #20
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
  	spi_tbl[i].h_dma_tx = NULL;
 800f182:	490e      	ldr	r1, [pc, #56]	; (800f1bc <spiInit+0xd4>)
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	4613      	mov	r3, r2
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	4413      	add	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	440b      	add	r3, r1
 800f190:	3310      	adds	r3, #16
 800f192:	2200      	movs	r2, #0
 800f194:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3301      	adds	r3, #1
 800f19a:	607b      	str	r3, [r7, #4]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	ddaa      	ble.n	800f0f8 <spiInit+0x10>
  }
  spiBegin(tb_TFT);
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	f000 f810 	bl	800f1c8 <spiBegin>
  //spiBegin(tb_Toutch);
  cliAdd("spi", cliSPI);
 800f1a8:	4905      	ldr	r1, [pc, #20]	; (800f1c0 <spiInit+0xd8>)
 800f1aa:	4806      	ldr	r0, [pc, #24]	; (800f1c4 <spiInit+0xdc>)
 800f1ac:	f7fe fba2 	bl	800d8f4 <cliAdd>
  return ret;
 800f1b0:	78fb      	ldrb	r3, [r7, #3]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	200027c4 	.word	0x200027c4
 800f1c0:	0800f92d 	.word	0x0800f92d
 800f1c4:	08013c38 	.word	0x08013c38

0800f1c8 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 800f1d6:	79fa      	ldrb	r2, [r7, #7]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	4413      	add	r3, r2
 800f1de:	00db      	lsls	r3, r3, #3
 800f1e0:	4a23      	ldr	r2, [pc, #140]	; (800f270 <spiBegin+0xa8>)
 800f1e2:	4413      	add	r3, r2
 800f1e4:	60bb      	str	r3, [r7, #8]

  switch(ch)
 800f1e6:	79fb      	ldrb	r3, [r7, #7]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <spiBegin+0x28>
 800f1ec:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 800f1ee:	e03a      	b.n	800f266 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	4a20      	ldr	r2, [pc, #128]	; (800f274 <spiBegin+0xac>)
 800f1f4:	60da      	str	r2, [r3, #12]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	4a1f      	ldr	r2, [pc, #124]	; (800f278 <spiBegin+0xb0>)
 800f1fa:	611a      	str	r2, [r3, #16]
      p_spi->h_dma_rx = &hdma_spi1_rx;
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	4a1f      	ldr	r2, [pc, #124]	; (800f27c <spiBegin+0xb4>)
 800f200:	615a      	str	r2, [r3, #20]
      hspi1.Instance = SPI1;
 800f202:	4b1c      	ldr	r3, [pc, #112]	; (800f274 <spiBegin+0xac>)
 800f204:	4a1e      	ldr	r2, [pc, #120]	; (800f280 <spiBegin+0xb8>)
 800f206:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 800f208:	4b1a      	ldr	r3, [pc, #104]	; (800f274 <spiBegin+0xac>)
 800f20a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f20e:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800f210:	4b18      	ldr	r3, [pc, #96]	; (800f274 <spiBegin+0xac>)
 800f212:	2200      	movs	r2, #0
 800f214:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800f216:	4b17      	ldr	r3, [pc, #92]	; (800f274 <spiBegin+0xac>)
 800f218:	2200      	movs	r2, #0
 800f21a:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f21c:	4b15      	ldr	r3, [pc, #84]	; (800f274 <spiBegin+0xac>)
 800f21e:	2200      	movs	r2, #0
 800f220:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f222:	4b14      	ldr	r3, [pc, #80]	; (800f274 <spiBegin+0xac>)
 800f224:	2200      	movs	r2, #0
 800f226:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 800f228:	4b12      	ldr	r3, [pc, #72]	; (800f274 <spiBegin+0xac>)
 800f22a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f22e:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800f230:	4b10      	ldr	r3, [pc, #64]	; (800f274 <spiBegin+0xac>)
 800f232:	2210      	movs	r2, #16
 800f234:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f236:	4b0f      	ldr	r3, [pc, #60]	; (800f274 <spiBegin+0xac>)
 800f238:	2200      	movs	r2, #0
 800f23a:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800f23c:	4b0d      	ldr	r3, [pc, #52]	; (800f274 <spiBegin+0xac>)
 800f23e:	2200      	movs	r2, #0
 800f240:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f242:	4b0c      	ldr	r3, [pc, #48]	; (800f274 <spiBegin+0xac>)
 800f244:	2200      	movs	r2, #0
 800f246:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 800f248:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <spiBegin+0xac>)
 800f24a:	220a      	movs	r2, #10
 800f24c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 800f24e:	4809      	ldr	r0, [pc, #36]	; (800f274 <spiBegin+0xac>)
 800f250:	f7f7 f81a 	bl	8006288 <HAL_SPI_Init>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d104      	bne.n	800f264 <spiBegin+0x9c>
      	p_spi->is_open = true;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2201      	movs	r2, #1
 800f25e:	701a      	strb	r2, [r3, #0]
        ret = true;
 800f260:	2301      	movs	r3, #1
 800f262:	73fb      	strb	r3, [r7, #15]
      break;
 800f264:	bf00      	nop

  }

  return ret;
 800f266:	7bfb      	ldrb	r3, [r7, #15]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	200027c4 	.word	0x200027c4
 800f274:	200027dc 	.word	0x200027dc
 800f278:	20002894 	.word	0x20002894
 800f27c:	20002834 	.word	0x20002834
 800f280:	40013000 	.word	0x40013000

0800f284 <spiSetDataMode>:
{
  return spi_tbl[ch].is_open;
}

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	460a      	mov	r2, r1
 800f28e:	71fb      	strb	r3, [r7, #7]
 800f290:	4613      	mov	r3, r2
 800f292:	71bb      	strb	r3, [r7, #6]
	spi_t *p_spi = &spi_tbl[ch];
 800f294:	79fa      	ldrb	r2, [r7, #7]
 800f296:	4613      	mov	r3, r2
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	4413      	add	r3, r2
 800f29c:	00db      	lsls	r3, r3, #3
 800f29e:	4a2a      	ldr	r2, [pc, #168]	; (800f348 <spiSetDataMode+0xc4>)
 800f2a0:	4413      	add	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	f083 0301 	eor.w	r3, r3, #1
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d146      	bne.n	800f340 <spiSetDataMode+0xbc>


  switch( dataMode )
 800f2b2:	79bb      	ldrb	r3, [r7, #6]
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d844      	bhi.n	800f342 <spiSetDataMode+0xbe>
 800f2b8:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <spiSetDataMode+0x3c>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2d1 	.word	0x0800f2d1
 800f2c4:	0800f2ed 	.word	0x0800f2ed
 800f2c8:	0800f309 	.word	0x0800f309
 800f2cc:	0800f325 	.word	0x0800f325
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7f6 ffcf 	bl	8006288 <HAL_SPI_Init>
      break;
 800f2ea:	e02a      	b.n	800f342 <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	4618      	mov	r0, r3
 800f302:	f7f6 ffc1 	bl	8006288 <HAL_SPI_Init>
      break;
 800f306:	e01c      	b.n	800f342 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	2202      	movs	r2, #2
 800f30e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f6 ffb3 	bl	8006288 <HAL_SPI_Init>
      break;
 800f322:	e00e      	b.n	800f342 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	2202      	movs	r2, #2
 800f32a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	2201      	movs	r2, #1
 800f332:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f6 ffa5 	bl	8006288 <HAL_SPI_Init>
      break;
 800f33e:	e000      	b.n	800f342 <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 800f340:	bf00      	nop
  }
}
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	200027c4 	.word	0x200027c4

0800f34c <SPI_Set_Speed_hz>:
  HAL_SPI_Init(p_spi->h_spi);
  return true;
}

bool SPI_Set_Speed_hz(uint8_t ch, uint32_t speed)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	71fb      	strb	r3, [r7, #7]
	spi_t *p_spi = &spi_tbl[ch];
 800f358:	79fa      	ldrb	r2, [r7, #7]
 800f35a:	4613      	mov	r3, r2
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	4413      	add	r3, r2
 800f360:	00db      	lsls	r3, r3, #3
 800f362:	4a2e      	ldr	r2, [pc, #184]	; (800f41c <SPI_Set_Speed_hz+0xd0>)
 800f364:	4413      	add	r3, r2
 800f366:	60fb      	str	r3, [r7, #12]
  uint32_t spi_freq = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	60bb      	str	r3, [r7, #8]

  spi_freq = HAL_RCC_GetPCLK2Freq();
 800f36c:	f7f6 ff78 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 800f370:	60b8      	str	r0, [r7, #8]
  /* For SUBGHZSPI,  'SPI_BAUDRATEPRESCALER_*' == 'SUBGHZSPI_BAUDRATEPRESCALER_*' */
  if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV2_MHZ)) {
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	085b      	lsrs	r3, r3, #1
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d304      	bcc.n	800f386 <SPI_Set_Speed_hz+0x3a>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	61da      	str	r2, [r3, #28]
 800f384:	e03f      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV4_MHZ)) {
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	089b      	lsrs	r3, r3, #2
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d304      	bcc.n	800f39a <SPI_Set_Speed_hz+0x4e>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	2208      	movs	r2, #8
 800f396:	61da      	str	r2, [r3, #28]
 800f398:	e035      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV8_MHZ)) {
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	08db      	lsrs	r3, r3, #3
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d304      	bcc.n	800f3ae <SPI_Set_Speed_hz+0x62>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	2210      	movs	r2, #16
 800f3aa:	61da      	str	r2, [r3, #28]
 800f3ac:	e02b      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV16_MHZ)) {
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	091b      	lsrs	r3, r3, #4
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d304      	bcc.n	800f3c2 <SPI_Set_Speed_hz+0x76>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	2218      	movs	r2, #24
 800f3be:	61da      	str	r2, [r3, #28]
 800f3c0:	e021      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV32_MHZ)) {
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	095b      	lsrs	r3, r3, #5
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d304      	bcc.n	800f3d6 <SPI_Set_Speed_hz+0x8a>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	2220      	movs	r2, #32
 800f3d2:	61da      	str	r2, [r3, #28]
 800f3d4:	e017      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV64_MHZ)) {
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	099b      	lsrs	r3, r3, #6
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d304      	bcc.n	800f3ea <SPI_Set_Speed_hz+0x9e>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	2228      	movs	r2, #40	; 0x28
 800f3e6:	61da      	str	r2, [r3, #28]
 800f3e8:	e00d      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else if (speed >= (spi_freq / SPI_SPEED_CLOCK_DIV128_MHZ)) {
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	09db      	lsrs	r3, r3, #7
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d304      	bcc.n	800f3fe <SPI_Set_Speed_hz+0xb2>
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	2230      	movs	r2, #48	; 0x30
 800f3fa:	61da      	str	r2, [r3, #28]
 800f3fc:	e003      	b.n	800f406 <SPI_Set_Speed_hz+0xba>
  } else {
    /*
     * As it is not possible to go below (spi_freq / SPI_SPEED_CLOCK_DIV256_MHZ).
     * Set prescaler at max value so get the lowest frequency possible.
     */
	  p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	2238      	movs	r2, #56	; 0x38
 800f404:	61da      	str	r2, [r3, #28]
  }
  HAL_SPI_Init(p_spi->h_spi);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7f6 ff3c 	bl	8006288 <HAL_SPI_Init>
  return true;
 800f410:	2301      	movs	r3, #1
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	200027c4 	.word	0x200027c4

0800f420 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	460a      	mov	r2, r1
 800f42a:	71fb      	strb	r3, [r7, #7]
 800f42c:	4613      	mov	r3, r2
 800f42e:	71bb      	strb	r3, [r7, #6]
	spi_t *p_spi = &spi_tbl[ch];
 800f430:	79fa      	ldrb	r2, [r7, #7]
 800f432:	4613      	mov	r3, r2
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	4413      	add	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	4a10      	ldr	r2, [pc, #64]	; (800f47c <spiSetBitWidth+0x5c>)
 800f43c:	4413      	add	r3, r2
 800f43e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f083 0301 	eor.w	r3, r3, #1
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d111      	bne.n	800f472 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	2200      	movs	r2, #0
 800f454:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 800f456:	79bb      	ldrb	r3, [r7, #6]
 800f458:	2b10      	cmp	r3, #16
 800f45a:	d104      	bne.n	800f466 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f464:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f6 ff0c 	bl	8006288 <HAL_SPI_Init>
 800f470:	e000      	b.n	800f474 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 800f472:	bf00      	nop
}
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	200027c4 	.word	0x200027c4

0800f480 <spiTransfer8>:

  return ret;
}

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af02      	add	r7, sp, #8
 800f486:	4603      	mov	r3, r0
 800f488:	460a      	mov	r2, r1
 800f48a:	71fb      	strb	r3, [r7, #7]
 800f48c:	4613      	mov	r3, r2
 800f48e:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t *p_spi = &spi_tbl[ch];
 800f490:	79fa      	ldrb	r2, [r7, #7]
 800f492:	4613      	mov	r3, r2
 800f494:	005b      	lsls	r3, r3, #1
 800f496:	4413      	add	r3, r2
 800f498:	00db      	lsls	r3, r3, #3
 800f49a:	4a0d      	ldr	r2, [pc, #52]	; (800f4d0 <spiTransfer8+0x50>)
 800f49c:	4413      	add	r3, r2
 800f49e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return 0;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	f083 0301 	eor.w	r3, r3, #1
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <spiTransfer8+0x32>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	e00a      	b.n	800f4c8 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, sizeof(uint8_t), 10);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	68d8      	ldr	r0, [r3, #12]
 800f4b6:	f107 020b 	add.w	r2, r7, #11
 800f4ba:	1db9      	adds	r1, r7, #6
 800f4bc:	230a      	movs	r3, #10
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	f7f7 f9b7 	bl	8006834 <HAL_SPI_TransmitReceive>

  return ret;
 800f4c6:	7afb      	ldrb	r3, [r7, #11]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	200027c4 	.word	0x200027c4

0800f4d4 <spiTransfer16>:

uint16_t spiTransfer16(uint8_t ch, uint16_t data)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b088      	sub	sp, #32
 800f4d8:	af02      	add	r7, sp, #8
 800f4da:	4603      	mov	r3, r0
 800f4dc:	460a      	mov	r2, r1
 800f4de:	71fb      	strb	r3, [r7, #7]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	80bb      	strh	r3, [r7, #4]
  uint8_t tBuf[2];
  uint8_t rBuf[2];
  uint16_t ret;
  spi_t *p_spi = &spi_tbl[ch];
 800f4e4:	79fa      	ldrb	r2, [r7, #7]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	4a20      	ldr	r2, [pc, #128]	; (800f570 <spiTransfer16+0x9c>)
 800f4f0:	4413      	add	r3, r2
 800f4f2:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return 0;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	f083 0301 	eor.w	r3, r3, #1
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <spiTransfer16+0x32>
 800f502:	2300      	movs	r3, #0
 800f504:	e030      	b.n	800f568 <spiTransfer16+0x94>

  if (p_spi->h_spi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d120      	bne.n	800f552 <spiTransfer16+0x7e>
  {
    tBuf[1] = (uint8_t)data;
 800f510:	88bb      	ldrh	r3, [r7, #4]
 800f512:	b2db      	uxtb	r3, r3
 800f514:	747b      	strb	r3, [r7, #17]
    tBuf[0] = (uint8_t)(data>>8);
 800f516:	88bb      	ldrh	r3, [r7, #4]
 800f518:	0a1b      	lsrs	r3, r3, #8
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	743b      	strb	r3, [r7, #16]
    HAL_SPI_TransmitReceive(p_spi->h_spi, (uint8_t *)&tBuf, (uint8_t *)&rBuf, 2, 10);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	68d8      	ldr	r0, [r3, #12]
 800f524:	f107 020c 	add.w	r2, r7, #12
 800f528:	f107 0110 	add.w	r1, r7, #16
 800f52c:	230a      	movs	r3, #10
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	2302      	movs	r3, #2
 800f532:	f7f7 f97f 	bl	8006834 <HAL_SPI_TransmitReceive>

    ret = rBuf[0];
 800f536:	7b3b      	ldrb	r3, [r7, #12]
 800f538:	b29b      	uxth	r3, r3
 800f53a:	817b      	strh	r3, [r7, #10]
    ret <<= 8;
 800f53c:	897b      	ldrh	r3, [r7, #10]
 800f53e:	021b      	lsls	r3, r3, #8
 800f540:	b29b      	uxth	r3, r3
 800f542:	817b      	strh	r3, [r7, #10]
    ret += rBuf[1];
 800f544:	7b7b      	ldrb	r3, [r7, #13]
 800f546:	b29a      	uxth	r2, r3
 800f548:	897b      	ldrh	r3, [r7, #10]
 800f54a:	4413      	add	r3, r2
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	817b      	strh	r3, [r7, #10]
 800f550:	e009      	b.n	800f566 <spiTransfer16+0x92>
  }
  else
  {
    HAL_SPI_TransmitReceive(p_spi->h_spi, (uint8_t *)&data, (uint8_t *)&ret, 1, 10);
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	68d8      	ldr	r0, [r3, #12]
 800f556:	f107 020a 	add.w	r2, r7, #10
 800f55a:	1d39      	adds	r1, r7, #4
 800f55c:	230a      	movs	r3, #10
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	2301      	movs	r3, #1
 800f562:	f7f7 f967 	bl	8006834 <HAL_SPI_TransmitReceive>
  }

  return ret;
 800f566:	897b      	ldrh	r3, [r7, #10]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3718      	adds	r7, #24
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	200027c4 	.word	0x200027c4

0800f574 <spiDmaTxStart>:

void spiDmaTxStart(uint8_t ch, uint8_t *p_buf, uint32_t length)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	4603      	mov	r3, r0
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	73fb      	strb	r3, [r7, #15]
	spi_t *p_spi = &spi_tbl[ch];
 800f582:	7bfa      	ldrb	r2, [r7, #15]
 800f584:	4613      	mov	r3, r2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	4a0c      	ldr	r2, [pc, #48]	; (800f5c0 <spiDmaTxStart+0x4c>)
 800f58e:	4413      	add	r3, r2
 800f590:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	f083 0301 	eor.w	r3, r3, #1
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10b      	bne.n	800f5b8 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	b292      	uxth	r2, r2
 800f5ae:	68b9      	ldr	r1, [r7, #8]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7f7 fae1 	bl	8006b78 <HAL_SPI_Transmit_DMA>
 800f5b6:	e000      	b.n	800f5ba <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 800f5b8:	bf00      	nop
}
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	200027c4 	.word	0x200027c4

0800f5c4 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60b9      	str	r1, [r7, #8]
 800f5cc:	607a      	str	r2, [r7, #4]
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7ff ffc8 	bl	800f574 <spiDmaTxStart>

  t_time = millis();
 800f5e4:	f7fb ff75 	bl	800b4d2 <millis>
 800f5e8:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d101      	bne.n	800f5f4 <spiDmaTxTransfer+0x30>
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e013      	b.n	800f61c <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 800f5f4:	7bfb      	ldrb	r3, [r7, #15]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 f814 	bl	800f624 <spiDmaTxIsDone>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10a      	bne.n	800f618 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 800f602:	f7fb ff66 	bl	800b4d2 <millis>
 800f606:	4602      	mov	r2, r0
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	683a      	ldr	r2, [r7, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d2f0      	bcs.n	800f5f4 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 800f612:	2300      	movs	r3, #0
 800f614:	75fb      	strb	r3, [r7, #23]
      break;
 800f616:	e000      	b.n	800f61a <spiDmaTxTransfer+0x56>
      break;
 800f618:	bf00      	nop
    }
  }

  return ret;
 800f61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	71fb      	strb	r3, [r7, #7]
	spi_t *p_spi = &spi_tbl[ch];
 800f62e:	79fa      	ldrb	r2, [r7, #7]
 800f630:	4613      	mov	r3, r2
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	4413      	add	r3, r2
 800f636:	00db      	lsls	r3, r3, #3
 800f638:	4a09      	ldr	r2, [pc, #36]	; (800f660 <spiDmaTxIsDone+0x3c>)
 800f63a:	4413      	add	r3, r2
 800f63c:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f083 0301 	eor.w	r3, r3, #1
 800f646:	b2db      	uxtb	r3, r3
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <spiDmaTxIsDone+0x2c>
 800f64c:	2301      	movs	r3, #1
 800f64e:	e001      	b.n	800f654 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	785b      	ldrb	r3, [r3, #1]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3714      	adds	r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	200027c4 	.word	0x200027c4

0800f664 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	6039      	str	r1, [r7, #0]
 800f66e:	71fb      	strb	r3, [r7, #7]
	spi_t *p_spi = &spi_tbl[ch];
 800f670:	79fa      	ldrb	r2, [r7, #7]
 800f672:	4613      	mov	r3, r2
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	4413      	add	r3, r2
 800f678:	00db      	lsls	r3, r3, #3
 800f67a:	4a0a      	ldr	r2, [pc, #40]	; (800f6a4 <spiAttachTxInterrupt+0x40>)
 800f67c:	4413      	add	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f083 0301 	eor.w	r3, r3, #1
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d103      	bne.n	800f696 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	605a      	str	r2, [r3, #4]
 800f694:	e000      	b.n	800f698 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 800f696:	bf00      	nop
}
 800f698:	3714      	adds	r7, #20
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	200027c4 	.word	0x200027c4

0800f6a8 <spiReadRegBuf>:

// Wait for bus to become free, then read a byte from a register
void spiReadRegBuf(uint8_t ch, uint8_t reg, uint8_t *data, uint8_t length)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	603a      	str	r2, [r7, #0]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	71fb      	strb	r3, [r7, #7]
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	71bb      	strb	r3, [r7, #6]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	717b      	strb	r3, [r7, #5]
	spi_t  *p_spi = &spi_tbl[ch];
 800f6be:	79fa      	ldrb	r2, [r7, #7]
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	4413      	add	r3, r2
 800f6c6:	00db      	lsls	r3, r3, #3
 800f6c8:	4a0c      	ldr	r2, [pc, #48]	; (800f6fc <spiReadRegBuf+0x54>)
 800f6ca:	4413      	add	r3, r2
 800f6cc:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Transmit(p_spi->h_spi, &reg, sizeof(reg), 100);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	68d8      	ldr	r0, [r3, #12]
 800f6d2:	1db9      	adds	r1, r7, #6
 800f6d4:	2364      	movs	r3, #100	; 0x64
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f7f6 fe5f 	bl	800639a <HAL_SPI_Transmit>
	HAL_Delay(3);
 800f6dc:	2003      	movs	r0, #3
 800f6de:	f7f3 fce1 	bl	80030a4 <HAL_Delay>
	HAL_SPI_Receive(p_spi->h_spi, data, length, 100);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	68d8      	ldr	r0, [r3, #12]
 800f6e6:	797b      	ldrb	r3, [r7, #5]
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	2364      	movs	r3, #100	; 0x64
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	f7f6 ff90 	bl	8006612 <HAL_SPI_Receive>

    // Wait for completion
	//spiWait(dev);
}
 800f6f2:	bf00      	nop
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	200027c4 	.word	0x200027c4

0800f700 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i<SPI_MAX_CH; i++)
 800f708:	2300      	movs	r3, #0
 800f70a:	73fb      	strb	r3, [r7, #15]
 800f70c:	e01a      	b.n	800f744 <HAL_SPI_ErrorCallback+0x44>
	{
		  if (hspi->Instance == spi_tbl[i].h_spi->Instance)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6819      	ldr	r1, [r3, #0]
 800f712:	7bfa      	ldrb	r2, [r7, #15]
 800f714:	4810      	ldr	r0, [pc, #64]	; (800f758 <HAL_SPI_ErrorCallback+0x58>)
 800f716:	4613      	mov	r3, r2
 800f718:	005b      	lsls	r3, r3, #1
 800f71a:	4413      	add	r3, r2
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	4403      	add	r3, r0
 800f720:	330c      	adds	r3, #12
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4299      	cmp	r1, r3
 800f728:	d109      	bne.n	800f73e <HAL_SPI_ErrorCallback+0x3e>
		  {
			  spi_tbl[i].is_error = true;
 800f72a:	7bfa      	ldrb	r2, [r7, #15]
 800f72c:	490a      	ldr	r1, [pc, #40]	; (800f758 <HAL_SPI_ErrorCallback+0x58>)
 800f72e:	4613      	mov	r3, r2
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	4413      	add	r3, r2
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	440b      	add	r3, r1
 800f738:	3303      	adds	r3, #3
 800f73a:	2201      	movs	r2, #1
 800f73c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<SPI_MAX_CH; i++)
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	3301      	adds	r3, #1
 800f742:	73fb      	strb	r3, [r7, #15]
 800f744:	7bfb      	ldrb	r3, [r7, #15]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d0e1      	beq.n	800f70e <HAL_SPI_ErrorCallback+0xe>
		  }
	}
}
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	3714      	adds	r7, #20
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr
 800f758:	200027c4 	.word	0x200027c4

0800f75c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
	spi_t  *p_spi;
	for(uint8_t i = 0; i<SPI_MAX_CH; i++)
 800f764:	2300      	movs	r3, #0
 800f766:	73fb      	strb	r3, [r7, #15]
 800f768:	e022      	b.n	800f7b0 <HAL_SPI_TxCpltCallback+0x54>
	{
		  if (hspi->Instance == spi_tbl[i].h_spi->Instance)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6819      	ldr	r1, [r3, #0]
 800f76e:	7bfa      	ldrb	r2, [r7, #15]
 800f770:	4813      	ldr	r0, [pc, #76]	; (800f7c0 <HAL_SPI_TxCpltCallback+0x64>)
 800f772:	4613      	mov	r3, r2
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	4413      	add	r3, r2
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	4403      	add	r3, r0
 800f77c:	330c      	adds	r3, #12
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4299      	cmp	r1, r3
 800f784:	d111      	bne.n	800f7aa <HAL_SPI_TxCpltCallback+0x4e>
		  {
			  p_spi = &spi_tbl[i];
 800f786:	7bfa      	ldrb	r2, [r7, #15]
 800f788:	4613      	mov	r3, r2
 800f78a:	005b      	lsls	r3, r3, #1
 800f78c:	4413      	add	r3, r2
 800f78e:	00db      	lsls	r3, r3, #3
 800f790:	4a0b      	ldr	r2, [pc, #44]	; (800f7c0 <HAL_SPI_TxCpltCallback+0x64>)
 800f792:	4413      	add	r3, r2
 800f794:	60bb      	str	r3, [r7, #8]
			  p_spi->is_tx_done = true;
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2201      	movs	r2, #1
 800f79a:	705a      	strb	r2, [r3, #1]
			    if (p_spi->func_tx != NULL)
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <HAL_SPI_TxCpltCallback+0x4e>
			    {
			      (*p_spi->func_tx)();
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4798      	blx	r3
	for(uint8_t i = 0; i<SPI_MAX_CH; i++)
 800f7aa:	7bfb      	ldrb	r3, [r7, #15]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	73fb      	strb	r3, [r7, #15]
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d0d9      	beq.n	800f76a <HAL_SPI_TxCpltCallback+0xe>
			    }
		  }
	}

}
 800f7b6:	bf00      	nop
 800f7b8:	bf00      	nop
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	200027c4 	.word	0x200027c4

0800f7c4 <HAL_SPI_MspInit>:
		  }
	}
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08a      	sub	sp, #40	; 0x28
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7cc:	f107 0314 	add.w	r3, r7, #20
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	605a      	str	r2, [r3, #4]
 800f7d6:	609a      	str	r2, [r3, #8]
 800f7d8:	60da      	str	r2, [r3, #12]
 800f7da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a4b      	ldr	r2, [pc, #300]	; (800f910 <HAL_SPI_MspInit+0x14c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	f040 8090 	bne.w	800f908 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	613b      	str	r3, [r7, #16]
 800f7ec:	4b49      	ldr	r3, [pc, #292]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f0:	4a48      	ldr	r2, [pc, #288]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f7f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f7f6:	6453      	str	r3, [r2, #68]	; 0x44
 800f7f8:	4b46      	ldr	r3, [pc, #280]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f800:	613b      	str	r3, [r7, #16]
 800f802:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800f804:	2300      	movs	r3, #0
 800f806:	60fb      	str	r3, [r7, #12]
 800f808:	4b42      	ldr	r3, [pc, #264]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80c:	4a41      	ldr	r2, [pc, #260]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f80e:	f043 0301 	orr.w	r3, r3, #1
 800f812:	6313      	str	r3, [r2, #48]	; 0x30
 800f814:	4b3f      	ldr	r3, [pc, #252]	; (800f914 <HAL_SPI_MspInit+0x150>)
 800f816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	68fb      	ldr	r3, [r7, #12]
	/**SPI1 GPIO Configuration
	PA5     ------> SPI1_SCK
	PA6     ------> SPI1_MISO
	PA7     ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800f820:	23e0      	movs	r3, #224	; 0xe0
 800f822:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f824:	2302      	movs	r3, #2
 800f826:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f828:	2300      	movs	r3, #0
 800f82a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f82c:	2303      	movs	r3, #3
 800f82e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f830:	2305      	movs	r3, #5
 800f832:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f834:	f107 0314 	add.w	r3, r7, #20
 800f838:	4619      	mov	r1, r3
 800f83a:	4837      	ldr	r0, [pc, #220]	; (800f918 <HAL_SPI_MspInit+0x154>)
 800f83c:	f7f4 fc42 	bl	80040c4 <HAL_GPIO_Init>

	/* SPI1 DMA Init */
	/* SPI1_TX Init */
	hdma_spi1_tx.Instance = DMA2_Stream3;
 800f840:	4b36      	ldr	r3, [pc, #216]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f842:	4a37      	ldr	r2, [pc, #220]	; (800f920 <HAL_SPI_MspInit+0x15c>)
 800f844:	601a      	str	r2, [r3, #0]
	hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800f846:	4b35      	ldr	r3, [pc, #212]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f848:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800f84c:	605a      	str	r2, [r3, #4]
	hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f84e:	4b33      	ldr	r3, [pc, #204]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f850:	2240      	movs	r2, #64	; 0x40
 800f852:	609a      	str	r2, [r3, #8]
	hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f854:	4b31      	ldr	r3, [pc, #196]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f856:	2200      	movs	r2, #0
 800f858:	60da      	str	r2, [r3, #12]
	hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f85a:	4b30      	ldr	r3, [pc, #192]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f85c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f860:	611a      	str	r2, [r3, #16]
	hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f862:	4b2e      	ldr	r3, [pc, #184]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f864:	2200      	movs	r2, #0
 800f866:	615a      	str	r2, [r3, #20]
	hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f868:	4b2c      	ldr	r3, [pc, #176]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	619a      	str	r2, [r3, #24]
	hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800f86e:	4b2b      	ldr	r3, [pc, #172]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f870:	2200      	movs	r2, #0
 800f872:	61da      	str	r2, [r3, #28]
	hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f874:	4b29      	ldr	r3, [pc, #164]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f876:	2200      	movs	r2, #0
 800f878:	621a      	str	r2, [r3, #32]
	hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f87a:	4b28      	ldr	r3, [pc, #160]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800f880:	4826      	ldr	r0, [pc, #152]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f882:	f7f3 fd45 	bl	8003310 <HAL_DMA_Init>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <HAL_SPI_MspInit+0xcc>
	{
	  Error_Handler();
 800f88c:	f000 feb2 	bl	80105f4 <Error_Handler>
	}

	__HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a22      	ldr	r2, [pc, #136]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f894:	649a      	str	r2, [r3, #72]	; 0x48
 800f896:	4a21      	ldr	r2, [pc, #132]	; (800f91c <HAL_SPI_MspInit+0x158>)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6393      	str	r3, [r2, #56]	; 0x38

	/* SPI1_RX Init */
	hdma_spi1_rx.Instance = DMA2_Stream0;
 800f89c:	4b21      	ldr	r3, [pc, #132]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f89e:	4a22      	ldr	r2, [pc, #136]	; (800f928 <HAL_SPI_MspInit+0x164>)
 800f8a0:	601a      	str	r2, [r3, #0]
	hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800f8a2:	4b20      	ldr	r3, [pc, #128]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8a4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800f8a8:	605a      	str	r2, [r3, #4]
	hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f8aa:	4b1e      	ldr	r3, [pc, #120]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	609a      	str	r2, [r3, #8]
	hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f8b0:	4b1c      	ldr	r3, [pc, #112]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	60da      	str	r2, [r3, #12]
	hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f8b6:	4b1b      	ldr	r3, [pc, #108]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f8bc:	611a      	str	r2, [r3, #16]
	hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f8be:	4b19      	ldr	r3, [pc, #100]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	615a      	str	r2, [r3, #20]
	hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f8c4:	4b17      	ldr	r3, [pc, #92]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	619a      	str	r2, [r3, #24]
	hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800f8ca:	4b16      	ldr	r3, [pc, #88]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	61da      	str	r2, [r3, #28]
	hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f8d0:	4b14      	ldr	r3, [pc, #80]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	621a      	str	r2, [r3, #32]
	hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800f8dc:	4811      	ldr	r0, [pc, #68]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8de:	f7f3 fd17 	bl	8003310 <HAL_DMA_Init>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <HAL_SPI_MspInit+0x128>
	{
	  Error_Handler();
 800f8e8:	f000 fe84 	bl	80105f4 <Error_Handler>
	}

	__HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a0d      	ldr	r2, [pc, #52]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8f0:	64da      	str	r2, [r3, #76]	; 0x4c
 800f8f2:	4a0c      	ldr	r2, [pc, #48]	; (800f924 <HAL_SPI_MspInit+0x160>)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6393      	str	r3, [r2, #56]	; 0x38

	/* SPI1 interrupt Init */
	HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	2023      	movs	r0, #35	; 0x23
 800f8fe:	f7f3 fcd0 	bl	80032a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800f902:	2023      	movs	r0, #35	; 0x23
 800f904:	f7f3 fce9 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800f908:	bf00      	nop
 800f90a:	3728      	adds	r7, #40	; 0x28
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	40013000 	.word	0x40013000
 800f914:	40023800 	.word	0x40023800
 800f918:	40020000 	.word	0x40020000
 800f91c:	20002894 	.word	0x20002894
 800f920:	40026458 	.word	0x40026458
 800f924:	20002834 	.word	0x20002834
 800f928:	40026410 	.word	0x40026410

0800f92c <cliSPI>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

void cliSPI(cli_args_t *args)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  bool ret = true;
 800f934:	2301      	movs	r3, #1
 800f936:	73fb      	strb	r3, [r7, #15]

  if (ret == false)
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	f083 0301 	eor.w	r3, r3, #1
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	2b00      	cmp	r3, #0
 800f942:	d008      	beq.n	800f956 <cliSPI+0x2a>
  {
    cliPrintf( "spi scan\r\n");
 800f944:	4806      	ldr	r0, [pc, #24]	; (800f960 <cliSPI+0x34>)
 800f946:	f7fd fec5 	bl	800d6d4 <cliPrintf>
    cliPrintf( "spi read dev_addr reg_addr length\r\n");
 800f94a:	4806      	ldr	r0, [pc, #24]	; (800f964 <cliSPI+0x38>)
 800f94c:	f7fd fec2 	bl	800d6d4 <cliPrintf>
    cliPrintf( "spi write dev_addr reg_addr data\r\n");
 800f950:	4805      	ldr	r0, [pc, #20]	; (800f968 <cliSPI+0x3c>)
 800f952:	f7fd febf 	bl	800d6d4 <cliPrintf>
  }
}
 800f956:	bf00      	nop
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	08013c3c 	.word	0x08013c3c
 800f964:	08013c48 	.word	0x08013c48
 800f968:	08013c6c 	.word	0x08013c6c

0800f96c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f972:	f107 0308 	add.w	r3, r7, #8
 800f976:	2200      	movs	r2, #0
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	605a      	str	r2, [r3, #4]
 800f97c:	609a      	str	r2, [r3, #8]
 800f97e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f980:	463b      	mov	r3, r7
 800f982:	2200      	movs	r2, #0
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f988:	4b20      	ldr	r3, [pc, #128]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f98a:	4a21      	ldr	r2, [pc, #132]	; (800fa10 <MX_TIM5_Init+0xa4>)
 800f98c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800f98e:	4b1f      	ldr	r3, [pc, #124]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f990:	2253      	movs	r2, #83	; 0x53
 800f992:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f994:	4b1d      	ldr	r3, [pc, #116]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f996:	2200      	movs	r2, #0
 800f998:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800f99a:	4b1c      	ldr	r3, [pc, #112]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f99c:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9a2:	4b1a      	ldr	r3, [pc, #104]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f9a8:	4b18      	ldr	r3, [pc, #96]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9aa:	2280      	movs	r2, #128	; 0x80
 800f9ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f9ae:	4817      	ldr	r0, [pc, #92]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9b0:	f7f7 fc5c 	bl	800726c <HAL_TIM_Base_Init>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800f9ba:	f000 fe1b 	bl	80105f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f9be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f9c4:	f107 0308 	add.w	r3, r7, #8
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4810      	ldr	r0, [pc, #64]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9cc:	f7f7 fe0e 	bl	80075ec <HAL_TIM_ConfigClockSource>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800f9d6:	f000 fe0d 	bl	80105f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f9e2:	463b      	mov	r3, r7
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	4809      	ldr	r0, [pc, #36]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9e8:	f7f8 f834 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800f9f2:	f000 fdff 	bl	80105f4 <Error_Handler>
  }

	HAL_TIM_Base_Init(&htim5);
 800f9f6:	4805      	ldr	r0, [pc, #20]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9f8:	f7f7 fc38 	bl	800726c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim5);
 800f9fc:	4803      	ldr	r0, [pc, #12]	; (800fa0c <MX_TIM5_Init+0xa0>)
 800f9fe:	f7f7 fc85 	bl	800730c <HAL_TIM_Base_Start>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800fa02:	bf00      	nop
 800fa04:	3718      	adds	r7, #24
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	200028f4 	.word	0x200028f4
 800fa10:	40000c00 	.word	0x40000c00

0800fa14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a0e      	ldr	r2, [pc, #56]	; (800fa5c <HAL_TIM_Base_MspInit+0x48>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d115      	bne.n	800fa52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800fa26:	2300      	movs	r3, #0
 800fa28:	60fb      	str	r3, [r7, #12]
 800fa2a:	4b0d      	ldr	r3, [pc, #52]	; (800fa60 <HAL_TIM_Base_MspInit+0x4c>)
 800fa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa2e:	4a0c      	ldr	r2, [pc, #48]	; (800fa60 <HAL_TIM_Base_MspInit+0x4c>)
 800fa30:	f043 0308 	orr.w	r3, r3, #8
 800fa34:	6413      	str	r3, [r2, #64]	; 0x40
 800fa36:	4b0a      	ldr	r3, [pc, #40]	; (800fa60 <HAL_TIM_Base_MspInit+0x4c>)
 800fa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3a:	f003 0308 	and.w	r3, r3, #8
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800fa42:	2200      	movs	r2, #0
 800fa44:	2100      	movs	r1, #0
 800fa46:	2032      	movs	r0, #50	; 0x32
 800fa48:	f7f3 fc2b 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800fa4c:	2032      	movs	r0, #50	; 0x32
 800fa4e:	f7f3 fc44 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800fa52:	bf00      	nop
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	40000c00 	.word	0x40000c00
 800fa60:	40023800 	.word	0x40023800

0800fa64 <begin_touch_read_write>:
/***************************************************************************************
** Function name:           begin_touch_read_write - was spi_begin_touch
** Description:             Start transaction and select touch controller
***************************************************************************************/
// The touch controller has a low SPI clock rate
static inline void begin_touch_read_write(void){
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
  //DMA_BUSY_CHECK;
	TFT_CS_H; // Just in case it has been left low
 800fa68:	2101      	movs	r1, #1
 800fa6a:	200f      	movs	r0, #15
 800fa6c:	f7fe fc78 	bl	800e360 <gpioPinWrite>
	SPI_Set_Speed_hz(_DEF_SPI1, SPI_TOUCH_FREQUENCY);
 800fa70:	4904      	ldr	r1, [pc, #16]	; (800fa84 <begin_touch_read_write+0x20>)
 800fa72:	2000      	movs	r0, #0
 800fa74:	f7ff fc6a 	bl	800f34c <SPI_Set_Speed_hz>
    //spi.setFrequency(SPI_TOUCH_FREQUENCY);
  Toutch_CS_L;
 800fa78:	2100      	movs	r1, #0
 800fa7a:	2013      	movs	r0, #19
 800fa7c:	f7fe fc70 	bl	800e360 <gpioPinWrite>
}
 800fa80:	bf00      	nop
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	002625a0 	.word	0x002625a0

0800fa88 <end_touch_read_write>:

/***************************************************************************************
** Function name:           end_touch_read_write - was spi_end_touch
** Description:             End transaction and deselect touch controller
***************************************************************************************/
static inline void end_touch_read_write(void){
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
	Toutch_CS_H;
 800fa8c:	2101      	movs	r1, #1
 800fa8e:	2013      	movs	r0, #19
 800fa90:	f7fe fc66 	bl	800e360 <gpioPinWrite>
  SPI_Set_Speed_hz(_DEF_SPI1, SPI_FREQUENCY);
 800fa94:	4902      	ldr	r1, [pc, #8]	; (800faa0 <end_touch_read_write+0x18>)
 800fa96:	2000      	movs	r0, #0
 800fa98:	f7ff fc58 	bl	800f34c <SPI_Set_Speed_hz>
    //spi.setFrequency(SPI_FREQUENCY);
  //SET_BUS_WRITE_MODE;
}
 800fa9c:	bf00      	nop
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	01312d00 	.word	0x01312d00

0800faa4 <touch_init>:
#ifdef _USE_HW_CLI
static void cliTouch(cli_args_t *args);
#endif

void touch_init(void)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	af00      	add	r7, sp, #0
	Init_touch_param(&touch);
 800faa8:	4804      	ldr	r0, [pc, #16]	; (800fabc <touch_init+0x18>)
 800faaa:	f000 f80d 	bl	800fac8 <Init_touch_param>

#ifdef _USE_HW_CLI
  cliAdd("touch", cliTouch);
 800faae:	4904      	ldr	r1, [pc, #16]	; (800fac0 <touch_init+0x1c>)
 800fab0:	4804      	ldr	r0, [pc, #16]	; (800fac4 <touch_init+0x20>)
 800fab2:	f7fd ff1f 	bl	800d8f4 <cliAdd>
#endif

}
 800fab6:	bf00      	nop
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	2000293c 	.word	0x2000293c
 800fac0:	0800fd41 	.word	0x0800fd41
 800fac4:	08013c90 	.word	0x08013c90

0800fac8 <Init_touch_param>:

void Init_touch_param(tft_touch_t *param)
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	param->touchCalibration_x0 = 300;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fad6:	801a      	strh	r2, [r3, #0]
	param->touchCalibration_x1 = 3600;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800fade:	805a      	strh	r2, [r3, #2]
	param->touchCalibration_y0 = 300;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fae6:	809a      	strh	r2, [r3, #4]
	param->touchCalibration_y1 = 3600;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800faee:	80da      	strh	r2, [r3, #6]
	param->touchCalibration_rotate = 1;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2201      	movs	r2, #1
 800faf4:	721a      	strb	r2, [r3, #8]
	param->touchCalibration_invert_x = 2;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2202      	movs	r2, #2
 800fafa:	725a      	strb	r2, [r3, #9]
	param->touchCalibration_invert_y = 0;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	729a      	strb	r2, [r3, #10]
}
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <delta>:
uint16_t delta(uint16_t a, uint16_t b) { return a > b ? a - b : b - a; }
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	4603      	mov	r3, r0
 800fb16:	460a      	mov	r2, r1
 800fb18:	80fb      	strh	r3, [r7, #6]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	80bb      	strh	r3, [r7, #4]
 800fb1e:	88fa      	ldrh	r2, [r7, #6]
 800fb20:	88bb      	ldrh	r3, [r7, #4]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d904      	bls.n	800fb30 <delta+0x22>
 800fb26:	88fa      	ldrh	r2, [r7, #6]
 800fb28:	88bb      	ldrh	r3, [r7, #4]
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	e003      	b.n	800fb38 <delta+0x2a>
 800fb30:	88ba      	ldrh	r2, [r7, #4]
 800fb32:	88fb      	ldrh	r3, [r7, #6]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <getTouchRaw>:
/***************************************************************************************
** Function name:           getTouchRaw
** Description:             read raw touch position.  Always returns true.
***************************************************************************************/
uint8_t getTouchRaw(uint16_t *x, uint16_t *y){
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08a      	sub	sp, #40	; 0x28
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  uint8_t buf[2] = {0, 0};
 800fb4e:	2300      	movs	r3, #0
 800fb50:	82bb      	strh	r3, [r7, #20]
  uint16_t data[3] = {0, 0, 0};
 800fb52:	2300      	movs	r3, #0
 800fb54:	81bb      	strh	r3, [r7, #12]
 800fb56:	2300      	movs	r3, #0
 800fb58:	81fb      	strh	r3, [r7, #14]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	823b      	strh	r3, [r7, #16]
  uint16_t tmp;

  begin_touch_read_write();
 800fb5e:	f7ff ff81 	bl	800fa64 <begin_touch_read_write>

  // Start YP sample request for x position, read 4 times and keep last sample

  for(int i = 0; i < 3; i++)
 800fb62:	2300      	movs	r3, #0
 800fb64:	627b      	str	r3, [r7, #36]	; 0x24
 800fb66:	e01a      	b.n	800fb9e <getTouchRaw+0x5a>
  {
  	spiReadRegBuf(_DEF_SPI1, XPT2046_X, buf, 2);
 800fb68:	f107 0214 	add.w	r2, r7, #20
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	2198      	movs	r1, #152	; 0x98
 800fb70:	2000      	movs	r0, #0
 800fb72:	f7ff fd99 	bl	800f6a8 <spiReadRegBuf>
  	tmp = (buf[1] << 5);
 800fb76:	7d7b      	ldrb	r3, [r7, #21]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	015b      	lsls	r3, r3, #5
 800fb7c:	833b      	strh	r3, [r7, #24]
  	data[i] = (tmp | (buf[0]>>3));
 800fb7e:	7d3b      	ldrb	r3, [r7, #20]
 800fb80:	08db      	lsrs	r3, r3, #3
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	8b3b      	ldrh	r3, [r7, #24]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	b29a      	uxth	r2, r3
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	3328      	adds	r3, #40	; 0x28
 800fb92:	443b      	add	r3, r7
 800fb94:	f823 2c1c 	strh.w	r2, [r3, #-28]
  for(int i = 0; i < 3; i++)
 800fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	dde1      	ble.n	800fb68 <getTouchRaw+0x24>
  }
	uint16_t delta01 = delta(data[0], data[1]);
 800fba4:	89bb      	ldrh	r3, [r7, #12]
 800fba6:	89fa      	ldrh	r2, [r7, #14]
 800fba8:	4611      	mov	r1, r2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff ffaf 	bl	800fb0e <delta>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	83fb      	strh	r3, [r7, #30]
	uint16_t delta02 = delta(data[0], data[2]);
 800fbb4:	89bb      	ldrh	r3, [r7, #12]
 800fbb6:	8a3a      	ldrh	r2, [r7, #16]
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff ffa7 	bl	800fb0e <delta>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	83bb      	strh	r3, [r7, #28]
	uint16_t delta12 = delta(data[1], data[2]);
 800fbc4:	89fb      	ldrh	r3, [r7, #14]
 800fbc6:	8a3a      	ldrh	r2, [r7, #16]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff ff9f 	bl	800fb0e <delta>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	837b      	strh	r3, [r7, #26]

	if (delta01 > delta02 || delta01 > delta12) {
 800fbd4:	8bfa      	ldrh	r2, [r7, #30]
 800fbd6:	8bbb      	ldrh	r3, [r7, #28]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d803      	bhi.n	800fbe4 <getTouchRaw+0xa0>
 800fbdc:	8bfa      	ldrh	r2, [r7, #30]
 800fbde:	8b7b      	ldrh	r3, [r7, #26]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d908      	bls.n	800fbf6 <getTouchRaw+0xb2>
		if (delta02 > delta12)
 800fbe4:	8bba      	ldrh	r2, [r7, #28]
 800fbe6:	8b7b      	ldrh	r3, [r7, #26]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d902      	bls.n	800fbf2 <getTouchRaw+0xae>
			data[0] = data[2];
 800fbec:	8a3b      	ldrh	r3, [r7, #16]
 800fbee:	81bb      	strh	r3, [r7, #12]
 800fbf0:	e001      	b.n	800fbf6 <getTouchRaw+0xb2>
		else
			data[1] = data[2];
 800fbf2:	8a3b      	ldrh	r3, [r7, #16]
 800fbf4:	81fb      	strh	r3, [r7, #14]
	}
  *x = (data[0] + data[1]) >> 1;
 800fbf6:	89bb      	ldrh	r3, [r7, #12]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	89fb      	ldrh	r3, [r7, #14]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	105b      	asrs	r3, r3, #1
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	801a      	strh	r2, [r3, #0]

  for(int i = 0; i < 3; i++)
 800fc06:	2300      	movs	r3, #0
 800fc08:	623b      	str	r3, [r7, #32]
 800fc0a:	e01a      	b.n	800fc42 <getTouchRaw+0xfe>
  {
  	spiReadRegBuf(_DEF_SPI1, XPT2046_Y, buf, 2);
 800fc0c:	f107 0214 	add.w	r2, r7, #20
 800fc10:	2302      	movs	r3, #2
 800fc12:	21d8      	movs	r1, #216	; 0xd8
 800fc14:	2000      	movs	r0, #0
 800fc16:	f7ff fd47 	bl	800f6a8 <spiReadRegBuf>
  	tmp = (buf[1] << 5);
 800fc1a:	7d7b      	ldrb	r3, [r7, #21]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	015b      	lsls	r3, r3, #5
 800fc20:	833b      	strh	r3, [r7, #24]
  	data[i] = (tmp | (buf[0]>>3));
 800fc22:	7d3b      	ldrb	r3, [r7, #20]
 800fc24:	08db      	lsrs	r3, r3, #3
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	8b3b      	ldrh	r3, [r7, #24]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	6a3b      	ldr	r3, [r7, #32]
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	3328      	adds	r3, #40	; 0x28
 800fc36:	443b      	add	r3, r7
 800fc38:	f823 2c1c 	strh.w	r2, [r3, #-28]
  for(int i = 0; i < 3; i++)
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	623b      	str	r3, [r7, #32]
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	dde1      	ble.n	800fc0c <getTouchRaw+0xc8>
  }
	delta01 = delta(data[0], data[1]);
 800fc48:	89bb      	ldrh	r3, [r7, #12]
 800fc4a:	89fa      	ldrh	r2, [r7, #14]
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7ff ff5d 	bl	800fb0e <delta>
 800fc54:	4603      	mov	r3, r0
 800fc56:	83fb      	strh	r3, [r7, #30]
	delta02 = delta(data[0], data[2]);
 800fc58:	89bb      	ldrh	r3, [r7, #12]
 800fc5a:	8a3a      	ldrh	r2, [r7, #16]
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff ff55 	bl	800fb0e <delta>
 800fc64:	4603      	mov	r3, r0
 800fc66:	83bb      	strh	r3, [r7, #28]
	delta12 = delta(data[1], data[2]);
 800fc68:	89fb      	ldrh	r3, [r7, #14]
 800fc6a:	8a3a      	ldrh	r2, [r7, #16]
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff ff4d 	bl	800fb0e <delta>
 800fc74:	4603      	mov	r3, r0
 800fc76:	837b      	strh	r3, [r7, #26]

	if (delta01 > delta02 || delta01 > delta12) {
 800fc78:	8bfa      	ldrh	r2, [r7, #30]
 800fc7a:	8bbb      	ldrh	r3, [r7, #28]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d803      	bhi.n	800fc88 <getTouchRaw+0x144>
 800fc80:	8bfa      	ldrh	r2, [r7, #30]
 800fc82:	8b7b      	ldrh	r3, [r7, #26]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d908      	bls.n	800fc9a <getTouchRaw+0x156>
		if (delta02 > delta12)
 800fc88:	8bba      	ldrh	r2, [r7, #28]
 800fc8a:	8b7b      	ldrh	r3, [r7, #26]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d902      	bls.n	800fc96 <getTouchRaw+0x152>
			data[0] = data[2];
 800fc90:	8a3b      	ldrh	r3, [r7, #16]
 800fc92:	81bb      	strh	r3, [r7, #12]
 800fc94:	e001      	b.n	800fc9a <getTouchRaw+0x156>
		else
			data[1] = data[2];
 800fc96:	8a3b      	ldrh	r3, [r7, #16]
 800fc98:	81fb      	strh	r3, [r7, #14]
	}
  *y = (data[0] + data[1]) >> 1;
 800fc9a:	89bb      	ldrh	r3, [r7, #12]
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	89fb      	ldrh	r3, [r7, #14]
 800fca0:	4413      	add	r3, r2
 800fca2:	105b      	asrs	r3, r3, #1
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	801a      	strh	r2, [r3, #0]

  end_touch_read_write();
 800fcaa:	f7ff feed 	bl	800fa88 <end_touch_read_write>

  return true;
 800fcae:	2301      	movs	r3, #1
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3728      	adds	r7, #40	; 0x28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <getTouchRawZ>:

/***************************************************************************************
** Function name:           getTouchRawZ
** Description:             read raw pressure on touchpad and return Z value.
***************************************************************************************/
uint16_t getTouchRawZ(void){
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
  uint8_t buf[2] = {0, 0};
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	803b      	strh	r3, [r7, #0]
  int16_t tmp;
  // Z sample request
  int16_t tz = 0xFFF;
 800fcc2:	f640 73ff 	movw	r3, #4095	; 0xfff
 800fcc6:	80fb      	strh	r3, [r7, #6]
  begin_touch_read_write();
 800fcc8:	f7ff fecc 	bl	800fa64 <begin_touch_read_write>

  spiReadRegBuf(_DEF_SPI1, XPT2046_Z1, buf, 2);
 800fccc:	463a      	mov	r2, r7
 800fcce:	2302      	movs	r3, #2
 800fcd0:	21b8      	movs	r1, #184	; 0xb8
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	f7ff fce8 	bl	800f6a8 <spiReadRegBuf>
  tmp = (buf[1] << 5);
 800fcd8:	787b      	ldrb	r3, [r7, #1]
 800fcda:	015b      	lsls	r3, r3, #5
 800fcdc:	80bb      	strh	r3, [r7, #4]
  tz += (int16_t)(tmp | (buf[0]>>3));
 800fcde:	783b      	ldrb	r3, [r7, #0]
 800fce0:	08db      	lsrs	r3, r3, #3
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	b21a      	sxth	r2, r3
 800fce6:	88bb      	ldrh	r3, [r7, #4]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	b21b      	sxth	r3, r3
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	88fb      	ldrh	r3, [r7, #6]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	80fb      	strh	r3, [r7, #6]
  spiReadRegBuf(_DEF_SPI1, XPT2046_Z2, buf, 2);
 800fcf6:	463a      	mov	r2, r7
 800fcf8:	2302      	movs	r3, #2
 800fcfa:	21c8      	movs	r1, #200	; 0xc8
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	f7ff fcd3 	bl	800f6a8 <spiReadRegBuf>
  tmp = (buf[1] << 5);
 800fd02:	787b      	ldrb	r3, [r7, #1]
 800fd04:	015b      	lsls	r3, r3, #5
 800fd06:	80bb      	strh	r3, [r7, #4]
  tz -= (int16_t)(tmp | (buf[0]>>3));
 800fd08:	88fa      	ldrh	r2, [r7, #6]
 800fd0a:	783b      	ldrb	r3, [r7, #0]
 800fd0c:	08db      	lsrs	r3, r3, #3
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	b219      	sxth	r1, r3
 800fd12:	88bb      	ldrh	r3, [r7, #4]
 800fd14:	430b      	orrs	r3, r1
 800fd16:	b21b      	sxth	r3, r3
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	80fb      	strh	r3, [r7, #6]

  end_touch_read_write();
 800fd20:	f7ff feb2 	bl	800fa88 <end_touch_read_write>

  if (tz == 4095) tz = 0;
 800fd24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fd28:	f640 72ff 	movw	r2, #4095	; 0xfff
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d101      	bne.n	800fd34 <getTouchRawZ+0x7c>
 800fd30:	2300      	movs	r3, #0
 800fd32:	80fb      	strh	r3, [r7, #6]

  return (uint16_t)tz;
 800fd34:	88fb      	ldrh	r3, [r7, #6]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
	...

0800fd40 <cliTouch>:
  touch.touchCalibration_invert_y = parameters[4] & 0x04;
}

#ifdef _USE_HW_CLI
void cliTouch(cli_args_t *args)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]
  uint16_t x, y;

  if (args->argc == 1 && args->isStr(0, "show") == true)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	881b      	ldrh	r3, [r3, #0]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d12b      	bne.n	800fdac <cliTouch+0x6c>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	491b      	ldr	r1, [pc, #108]	; (800fdc8 <cliTouch+0x88>)
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	4798      	blx	r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d023      	beq.n	800fdac <cliTouch+0x6c>
  {
    while(cliKeepLoop())
 800fd64:	e01b      	b.n	800fd9e <cliTouch+0x5e>
    {
    	getTouchRaw(&x, &y);
 800fd66:	f107 020a 	add.w	r2, r7, #10
 800fd6a:	f107 030c 	add.w	r3, r7, #12
 800fd6e:	4611      	mov	r1, r2
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7ff fee7 	bl	800fb44 <getTouchRaw>

    	cliPrintf("x: %d     ", x);
 800fd76:	89bb      	ldrh	r3, [r7, #12]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4814      	ldr	r0, [pc, #80]	; (800fdcc <cliTouch+0x8c>)
 800fd7c:	f7fd fcaa 	bl	800d6d4 <cliPrintf>

    	cliPrintf("y: %d     ", y);
 800fd80:	897b      	ldrh	r3, [r7, #10]
 800fd82:	4619      	mov	r1, r3
 800fd84:	4812      	ldr	r0, [pc, #72]	; (800fdd0 <cliTouch+0x90>)
 800fd86:	f7fd fca5 	bl	800d6d4 <cliPrintf>

    	cliPrintf("z: %d \r\n     ", getTouchRawZ());
 800fd8a:	f7ff ff95 	bl	800fcb8 <getTouchRawZ>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	4619      	mov	r1, r3
 800fd92:	4810      	ldr	r0, [pc, #64]	; (800fdd4 <cliTouch+0x94>)
 800fd94:	f7fd fc9e 	bl	800d6d4 <cliPrintf>

    	delay(100);
 800fd98:	2064      	movs	r0, #100	; 0x64
 800fd9a:	f7fb fb87 	bl	800b4ac <delay>
    while(cliKeepLoop())
 800fd9e:	f7fd fd93 	bl	800d8c8 <cliKeepLoop>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1de      	bne.n	800fd66 <cliTouch+0x26>
    }
    ret = true;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	f083 0301 	eor.w	r3, r3, #1
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <cliTouch+0x7e>
  {
    cliPrintf("touch show\r\n");
 800fdb8:	4807      	ldr	r0, [pc, #28]	; (800fdd8 <cliTouch+0x98>)
 800fdba:	f7fd fc8b 	bl	800d6d4 <cliPrintf>
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	08013c98 	.word	0x08013c98
 800fdcc:	08013ca0 	.word	0x08013ca0
 800fdd0:	08013cac 	.word	0x08013cac
 800fdd4:	08013cb8 	.word	0x08013cb8
 800fdd8:	08013cc8 	.word	0x08013cc8

0800fddc <uartInit>:
        400000, 460800, 500000, 921600, 1000000, 1500000, 2000000, 2470000}; // see baudRate_e

#define BAUD_RATE_COUNT (sizeof(baudRates) / sizeof(baudRates[0]))

bool uartInit(void)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800fde2:	2300      	movs	r3, #0
 800fde4:	607b      	str	r3, [r7, #4]
 800fde6:	e007      	b.n	800fdf8 <uartInit+0x1c>
  {
    is_open[i] = false;
 800fde8:	4a08      	ldr	r2, [pc, #32]	; (800fe0c <uartInit+0x30>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	607b      	str	r3, [r7, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	ddf4      	ble.n	800fde8 <uartInit+0xc>
  }

  return true;
 800fdfe:	2301      	movs	r3, #1
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	20002950 	.word	0x20002950

0800fe10 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800fe20:	79fb      	ldrb	r3, [r7, #7]
 800fe22:	2b06      	cmp	r3, #6
 800fe24:	f200 8086 	bhi.w	800ff34 <uartOpen+0x124>
 800fe28:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <uartOpen+0x20>)
 800fe2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe2e:	bf00      	nop
 800fe30:	0800fe4d 	.word	0x0800fe4d
 800fe34:	0800ff35 	.word	0x0800ff35
 800fe38:	0800ff35 	.word	0x0800ff35
 800fe3c:	0800fe5b 	.word	0x0800fe5b
 800fe40:	0800ff35 	.word	0x0800ff35
 800fe44:	0800ff35 	.word	0x0800ff35
 800fe48:	0800ff35 	.word	0x0800ff35
  {
    case _DEF_USB:
      is_open[ch] = true;
 800fe4c:	79fb      	ldrb	r3, [r7, #7]
 800fe4e:	4a3c      	ldr	r2, [pc, #240]	; (800ff40 <uartOpen+0x130>)
 800fe50:	2101      	movs	r1, #1
 800fe52:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800fe54:	2301      	movs	r3, #1
 800fe56:	73fb      	strb	r3, [r7, #15]
      break;
 800fe58:	e06c      	b.n	800ff34 <uartOpen+0x124>
//        //ring_buffer[ch].out = ring_buffer[ch].in;
//    	}
      break;

    case _DEF_UART3:
    	huart3.Instance = USART3;
 800fe5a:	4b3a      	ldr	r3, [pc, #232]	; (800ff44 <uartOpen+0x134>)
 800fe5c:	4a3a      	ldr	r2, [pc, #232]	; (800ff48 <uartOpen+0x138>)
 800fe5e:	601a      	str	r2, [r3, #0]
    	huart3.Init.BaudRate = baud;
 800fe60:	4a38      	ldr	r2, [pc, #224]	; (800ff44 <uartOpen+0x134>)
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	6053      	str	r3, [r2, #4]
    	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800fe66:	4b37      	ldr	r3, [pc, #220]	; (800ff44 <uartOpen+0x134>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits = UART_STOPBITS_1;
 800fe6c:	4b35      	ldr	r3, [pc, #212]	; (800ff44 <uartOpen+0x134>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	60da      	str	r2, [r3, #12]
    	huart3.Init.Parity = UART_PARITY_NONE;
 800fe72:	4b34      	ldr	r3, [pc, #208]	; (800ff44 <uartOpen+0x134>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	611a      	str	r2, [r3, #16]
    	huart3.Init.Mode = UART_MODE_TX_RX;
 800fe78:	4b32      	ldr	r3, [pc, #200]	; (800ff44 <uartOpen+0x134>)
 800fe7a:	220c      	movs	r2, #12
 800fe7c:	615a      	str	r2, [r3, #20]
    	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fe7e:	4b31      	ldr	r3, [pc, #196]	; (800ff44 <uartOpen+0x134>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	619a      	str	r2, [r3, #24]
    	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800fe84:	4b2f      	ldr	r3, [pc, #188]	; (800ff44 <uartOpen+0x134>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	61da      	str	r2, [r3, #28]

    	qbufferCreate(&ring_buffer[ch], (uint8_t *)&rx_buf[ch-1][0], MAX_SIZE);
 800fe8a:	79fa      	ldrb	r2, [r7, #7]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4a2d      	ldr	r2, [pc, #180]	; (800ff4c <uartOpen+0x13c>)
 800fe96:	1898      	adds	r0, r3, r2
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	01db      	lsls	r3, r3, #7
 800fe9e:	4a2c      	ldr	r2, [pc, #176]	; (800ff50 <uartOpen+0x140>)
 800fea0:	4413      	add	r3, r2
 800fea2:	2280      	movs	r2, #128	; 0x80
 800fea4:	4619      	mov	r1, r3
 800fea6:	f7fb fcc5 	bl	800b834 <qbufferCreate>

    	if (HAL_UART_Init(&huart3) != HAL_OK)
 800feaa:	4826      	ldr	r0, [pc, #152]	; (800ff44 <uartOpen+0x134>)
 800feac:	f7f7 fe62 	bl	8007b74 <HAL_UART_Init>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d002      	beq.n	800febc <uartOpen+0xac>
    	{
    	  Error_Handler();
 800feb6:	f000 fb9d 	bl	80105f4 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].in  = ring_buffer[ch].len - hdma_usart3_rx.Instance->NDTR;
        ring_buffer[ch].out = ring_buffer[ch].in;
    	}
      break;
 800feba:	e03a      	b.n	800ff32 <uartOpen+0x122>
    		ret = true;
 800febc:	2301      	movs	r3, #1
 800febe:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800fec0:	79fb      	ldrb	r3, [r7, #7]
 800fec2:	4a1f      	ldr	r2, [pc, #124]	; (800ff40 <uartOpen+0x130>)
 800fec4:	2101      	movs	r1, #1
 800fec6:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[ch-1][0], MAX_SIZE) != HAL_OK)
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	3b01      	subs	r3, #1
 800fecc:	01db      	lsls	r3, r3, #7
 800fece:	4a20      	ldr	r2, [pc, #128]	; (800ff50 <uartOpen+0x140>)
 800fed0:	4413      	add	r3, r2
 800fed2:	2280      	movs	r2, #128	; 0x80
 800fed4:	4619      	mov	r1, r3
 800fed6:	481b      	ldr	r0, [pc, #108]	; (800ff44 <uartOpen+0x134>)
 800fed8:	f7f7 ff2b 	bl	8007d32 <HAL_UART_Receive_DMA>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d001      	beq.n	800fee6 <uartOpen+0xd6>
          ret = false;
 800fee2:	2300      	movs	r3, #0
 800fee4:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].in  = ring_buffer[ch].len - hdma_usart3_rx.Instance->NDTR;
 800fee6:	79fa      	ldrb	r2, [r7, #7]
 800fee8:	4918      	ldr	r1, [pc, #96]	; (800ff4c <uartOpen+0x13c>)
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	440b      	add	r3, r1
 800fef4:	3308      	adds	r3, #8
 800fef6:	6819      	ldr	r1, [r3, #0]
 800fef8:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <uartOpen+0x144>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	79fa      	ldrb	r2, [r7, #7]
 800ff00:	1ac9      	subs	r1, r1, r3
 800ff02:	4812      	ldr	r0, [pc, #72]	; (800ff4c <uartOpen+0x13c>)
 800ff04:	4613      	mov	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4403      	add	r3, r0
 800ff0e:	6019      	str	r1, [r3, #0]
        ring_buffer[ch].out = ring_buffer[ch].in;
 800ff10:	79f9      	ldrb	r1, [r7, #7]
 800ff12:	79fa      	ldrb	r2, [r7, #7]
 800ff14:	480d      	ldr	r0, [pc, #52]	; (800ff4c <uartOpen+0x13c>)
 800ff16:	460b      	mov	r3, r1
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	440b      	add	r3, r1
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4403      	add	r3, r0
 800ff20:	6819      	ldr	r1, [r3, #0]
 800ff22:	480a      	ldr	r0, [pc, #40]	; (800ff4c <uartOpen+0x13c>)
 800ff24:	4613      	mov	r3, r2
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4413      	add	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4403      	add	r3, r0
 800ff2e:	3304      	adds	r3, #4
 800ff30:	6019      	str	r1, [r3, #0]
      break;
 800ff32:	bf00      	nop
//        ring_buffer[ch].out = ring_buffer[ch].in;
//    	}
      break;
  }

  return ret;
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	20002950 	.word	0x20002950
 800ff44:	200029fc 	.word	0x200029fc
 800ff48:	40004800 	.word	0x40004800
 800ff4c:	20002954 	.word	0x20002954
 800ff50:	2000297c 	.word	0x2000297c
 800ff54:	20002aa0 	.word	0x20002aa0

0800ff58 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800ff66:	79fb      	ldrb	r3, [r7, #7]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d002      	beq.n	800ff72 <uartAvailable+0x1a>
 800ff6c:	2b03      	cmp	r3, #3
 800ff6e:	d004      	beq.n	800ff7a <uartAvailable+0x22>
 800ff70:	e024      	b.n	800ffbc <uartAvailable+0x64>
  {

    case _DEF_USB:
      ret = cdcAvailable();
 800ff72:	f7fa fc73 	bl	800a85c <cdcAvailable>
 800ff76:	60f8      	str	r0, [r7, #12]
      break;
 800ff78:	e020      	b.n	800ffbc <uartAvailable+0x64>
//    case _DEF_UART2:
//    	//ring_buffer[ch].in = (ring_buffer[ch].len - hdma_usart2_rx.Instance->NDTR);
//      ret = qbufferAvailable(&ring_buffer[ch]);
//      break;
    case _DEF_UART3:
    	ring_buffer[ch].in = (ring_buffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 800ff7a:	79fa      	ldrb	r2, [r7, #7]
 800ff7c:	4912      	ldr	r1, [pc, #72]	; (800ffc8 <uartAvailable+0x70>)
 800ff7e:	4613      	mov	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	4413      	add	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	440b      	add	r3, r1
 800ff88:	3308      	adds	r3, #8
 800ff8a:	6819      	ldr	r1, [r3, #0]
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <uartAvailable+0x74>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	79fa      	ldrb	r2, [r7, #7]
 800ff94:	1ac9      	subs	r1, r1, r3
 800ff96:	480c      	ldr	r0, [pc, #48]	; (800ffc8 <uartAvailable+0x70>)
 800ff98:	4613      	mov	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4403      	add	r3, r0
 800ffa2:	6019      	str	r1, [r3, #0]
      ret = qbufferAvailable(&ring_buffer[ch]);
 800ffa4:	79fa      	ldrb	r2, [r7, #7]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4a06      	ldr	r2, [pc, #24]	; (800ffc8 <uartAvailable+0x70>)
 800ffb0:	4413      	add	r3, r2
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fb fcb4 	bl	800b920 <qbufferAvailable>
 800ffb8:	60f8      	str	r0, [r7, #12]
      break;
 800ffba:	bf00      	nop
//    case _DEF_UART6:
//    	ring_buffer[ch].in = (ring_buffer[ch].len - hdma_usart6_rx.Instance->NDTR);
//      ret = qbufferAvailable(&ring_buffer[ch]);
//      break;
  }
  return ret;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20002954 	.word	0x20002954
 800ffcc:	20002aa0 	.word	0x20002aa0

0800ffd0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	2b06      	cmp	r3, #6
 800ffe2:	d85c      	bhi.n	801009e <uartRead+0xce>
 800ffe4:	a201      	add	r2, pc, #4	; (adr r2, 800ffec <uartRead+0x1c>)
 800ffe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffea:	bf00      	nop
 800ffec:	08010009 	.word	0x08010009
 800fff0:	0801009f 	.word	0x0801009f
 800fff4:	08010013 	.word	0x08010013
 800fff8:	0801002f 	.word	0x0801002f
 800fffc:	0801004b 	.word	0x0801004b
 8010000:	08010067 	.word	0x08010067
 8010004:	08010083 	.word	0x08010083
  {
    case _DEF_USB:
      ret = cdcRead();
 8010008:	f7fa fc46 	bl	800a898 <cdcRead>
 801000c:	4603      	mov	r3, r0
 801000e:	73fb      	strb	r3, [r7, #15]
      break;
 8010010:	e045      	b.n	801009e <uartRead+0xce>

    case _DEF_UART2:
    	qbufferRead(&ring_buffer[ch], &ret, 1);
 8010012:	79fa      	ldrb	r2, [r7, #7]
 8010014:	4613      	mov	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4a22      	ldr	r2, [pc, #136]	; (80100a8 <uartRead+0xd8>)
 801001e:	4413      	add	r3, r2
 8010020:	f107 010f 	add.w	r1, r7, #15
 8010024:	2201      	movs	r2, #1
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb fc22 	bl	800b870 <qbufferRead>
      break;
 801002c:	e037      	b.n	801009e <uartRead+0xce>

    case _DEF_UART3:
    	qbufferRead(&ring_buffer[ch], &ret, 1);
 801002e:	79fa      	ldrb	r2, [r7, #7]
 8010030:	4613      	mov	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4a1b      	ldr	r2, [pc, #108]	; (80100a8 <uartRead+0xd8>)
 801003a:	4413      	add	r3, r2
 801003c:	f107 010f 	add.w	r1, r7, #15
 8010040:	2201      	movs	r2, #1
 8010042:	4618      	mov	r0, r3
 8010044:	f7fb fc14 	bl	800b870 <qbufferRead>
      break;
 8010048:	e029      	b.n	801009e <uartRead+0xce>

    case _DEF_UART4:
    	qbufferRead(&ring_buffer[ch], &ret, 1);
 801004a:	79fa      	ldrb	r2, [r7, #7]
 801004c:	4613      	mov	r3, r2
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	4413      	add	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4a14      	ldr	r2, [pc, #80]	; (80100a8 <uartRead+0xd8>)
 8010056:	4413      	add	r3, r2
 8010058:	f107 010f 	add.w	r1, r7, #15
 801005c:	2201      	movs	r2, #1
 801005e:	4618      	mov	r0, r3
 8010060:	f7fb fc06 	bl	800b870 <qbufferRead>
      break;
 8010064:	e01b      	b.n	801009e <uartRead+0xce>

    case _DEF_UART5:
    	qbufferRead(&ring_buffer[ch], &ret, 1);
 8010066:	79fa      	ldrb	r2, [r7, #7]
 8010068:	4613      	mov	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4413      	add	r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4a0d      	ldr	r2, [pc, #52]	; (80100a8 <uartRead+0xd8>)
 8010072:	4413      	add	r3, r2
 8010074:	f107 010f 	add.w	r1, r7, #15
 8010078:	2201      	movs	r2, #1
 801007a:	4618      	mov	r0, r3
 801007c:	f7fb fbf8 	bl	800b870 <qbufferRead>
      break;
 8010080:	e00d      	b.n	801009e <uartRead+0xce>

    case _DEF_UART6:
    	qbufferRead(&ring_buffer[ch], &ret, 1);
 8010082:	79fa      	ldrb	r2, [r7, #7]
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a06      	ldr	r2, [pc, #24]	; (80100a8 <uartRead+0xd8>)
 801008e:	4413      	add	r3, r2
 8010090:	f107 010f 	add.w	r1, r7, #15
 8010094:	2201      	movs	r2, #1
 8010096:	4618      	mov	r0, r3
 8010098:	f7fb fbea 	bl	800b870 <qbufferRead>
      break;
 801009c:	bf00      	nop
  }

  return ret;
 801009e:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	20002954 	.word	0x20002954

080100ac <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	607a      	str	r2, [r7, #4]
 80100b8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	74fb      	strb	r3, [r7, #19]

  switch(ch)
 80100c2:	7bfb      	ldrb	r3, [r7, #15]
 80100c4:	2b06      	cmp	r3, #6
 80100c6:	d847      	bhi.n	8010158 <uartWrite+0xac>
 80100c8:	a201      	add	r2, pc, #4	; (adr r2, 80100d0 <uartWrite+0x24>)
 80100ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ce:	bf00      	nop
 80100d0:	080100ed 	.word	0x080100ed
 80100d4:	08010159 	.word	0x08010159
 80100d8:	080100f9 	.word	0x080100f9
 80100dc:	08010105 	.word	0x08010105
 80100e0:	08010123 	.word	0x08010123
 80100e4:	0801012f 	.word	0x0801012f
 80100e8:	0801013b 	.word	0x0801013b
  {

    case _DEF_USB:
      ret = cdcWrite(p_data, length);
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	68b8      	ldr	r0, [r7, #8]
 80100f0:	f7fa fc28 	bl	800a944 <cdcWrite>
 80100f4:	6178      	str	r0, [r7, #20]
      break; 
 80100f6:	e02f      	b.n	8010158 <uartWrite+0xac>

    case _DEF_UART2:
      //status = HAL_UART_Transmit(&huart2, p_data, length, 100);
      if (status == HAL_OK)
 80100f8:	7cfb      	ldrb	r3, [r7, #19]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d123      	bne.n	8010146 <uartWrite+0x9a>
      {
        ret = length;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	617b      	str	r3, [r7, #20]
      }
      break;
 8010102:	e020      	b.n	8010146 <uartWrite+0x9a>

    case _DEF_UART3:
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	b29a      	uxth	r2, r3
 8010108:	2364      	movs	r3, #100	; 0x64
 801010a:	68b9      	ldr	r1, [r7, #8]
 801010c:	4815      	ldr	r0, [pc, #84]	; (8010164 <uartWrite+0xb8>)
 801010e:	f7f7 fd7e 	bl	8007c0e <HAL_UART_Transmit>
 8010112:	4603      	mov	r3, r0
 8010114:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8010116:	7cfb      	ldrb	r3, [r7, #19]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d116      	bne.n	801014a <uartWrite+0x9e>
      {
        ret = length;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	617b      	str	r3, [r7, #20]
      }
      break;
 8010120:	e013      	b.n	801014a <uartWrite+0x9e>

    case _DEF_UART4:
      //status = HAL_UART_Transmit(&huart4, p_data, length, 100);
      if (status == HAL_OK)
 8010122:	7cfb      	ldrb	r3, [r7, #19]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d112      	bne.n	801014e <uartWrite+0xa2>
      {
        ret = length;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	617b      	str	r3, [r7, #20]
      }
      break;
 801012c:	e00f      	b.n	801014e <uartWrite+0xa2>

    case _DEF_UART5:
      //status = HAL_UART_Transmit(&huart5, p_data, length, 100);
      if (status == HAL_OK)
 801012e:	7cfb      	ldrb	r3, [r7, #19]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10e      	bne.n	8010152 <uartWrite+0xa6>
      {
        ret = length;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	617b      	str	r3, [r7, #20]
      }
      break;
 8010138:	e00b      	b.n	8010152 <uartWrite+0xa6>

    case _DEF_UART6:
      //status = HAL_UART_Transmit(&huart6, p_data, length, 100);
      if (status == HAL_OK)
 801013a:	7cfb      	ldrb	r3, [r7, #19]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10a      	bne.n	8010156 <uartWrite+0xaa>
      {
        ret = length;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	617b      	str	r3, [r7, #20]
      }
      break;
 8010144:	e007      	b.n	8010156 <uartWrite+0xaa>
      break;
 8010146:	bf00      	nop
 8010148:	e006      	b.n	8010158 <uartWrite+0xac>
      break;
 801014a:	bf00      	nop
 801014c:	e004      	b.n	8010158 <uartWrite+0xac>
      break;
 801014e:	bf00      	nop
 8010150:	e002      	b.n	8010158 <uartWrite+0xac>
      break;
 8010152:	bf00      	nop
 8010154:	e000      	b.n	8010158 <uartWrite+0xac>
      break;
 8010156:	bf00      	nop
  }

  return ret;
 8010158:	697b      	ldr	r3, [r7, #20]
}
 801015a:	4618      	mov	r0, r3
 801015c:	3718      	adds	r7, #24
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	200029fc 	.word	0x200029fc

08010168 <uartPrintf>:
      uartWrite(channel, &ch, 1);
    }
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8010168:	b40e      	push	{r1, r2, r3}
 801016a:	b580      	push	{r7, lr}
 801016c:	b0a7      	sub	sp, #156	; 0x9c
 801016e:	af00      	add	r7, sp, #0
 8010170:	4603      	mov	r3, r0
 8010172:	71fb      	strb	r3, [r7, #7]
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8010174:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010178:	60fb      	str	r3, [r7, #12]
  len = vsnprintf(buf, MAX_SIZE, fmt, args);
 801017a:	f107 0010 	add.w	r0, r7, #16
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010184:	2180      	movs	r1, #128	; 0x80
 8010186:	f001 fa59 	bl	801163c <vsniprintf>
 801018a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  ret = uartWrite(ch, (uint8_t *)buf, len);
 801018e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010192:	f107 0110 	add.w	r1, r7, #16
 8010196:	79fb      	ldrb	r3, [r7, #7]
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff ff87 	bl	80100ac <uartWrite>
 801019e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  va_end(args);


  return ret;
 80101a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	379c      	adds	r7, #156	; 0x9c
 80101aa:	46bd      	mov	sp, r7
 80101ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101b0:	b003      	add	sp, #12
 80101b2:	4770      	bx	lr

080101b4 <HAL_UART_ErrorCallback>:
    return BAUD_AUTO;
}


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)&rx_buf2[0], MAX_SIZE);
		//__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  }
}
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	807b      	strh	r3, [r7, #2]
//		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
//		rxRuntimeState.uartAvalable = uartAvailable(_DEF_UART2);
//		rxRuntimeState.RxCallback_Flag = false;
//  }

}
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b08a      	sub	sp, #40	; 0x28
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101e8:	f107 0314 	add.w	r3, r7, #20
 80101ec:	2200      	movs	r2, #0
 80101ee:	601a      	str	r2, [r3, #0]
 80101f0:	605a      	str	r2, [r3, #4]
 80101f2:	609a      	str	r2, [r3, #8]
 80101f4:	60da      	str	r2, [r3, #12]
 80101f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a4c      	ldr	r2, [pc, #304]	; (8010330 <HAL_UART_MspInit+0x150>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	f040 8092 	bne.w	8010328 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
	/* USART3 clock enable */
	__HAL_RCC_USART3_CLK_ENABLE();
 8010204:	2300      	movs	r3, #0
 8010206:	613b      	str	r3, [r7, #16]
 8010208:	4b4a      	ldr	r3, [pc, #296]	; (8010334 <HAL_UART_MspInit+0x154>)
 801020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020c:	4a49      	ldr	r2, [pc, #292]	; (8010334 <HAL_UART_MspInit+0x154>)
 801020e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010212:	6413      	str	r3, [r2, #64]	; 0x40
 8010214:	4b47      	ldr	r3, [pc, #284]	; (8010334 <HAL_UART_MspInit+0x154>)
 8010216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801021c:	613b      	str	r3, [r7, #16]
 801021e:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8010220:	2300      	movs	r3, #0
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	4b43      	ldr	r3, [pc, #268]	; (8010334 <HAL_UART_MspInit+0x154>)
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	4a42      	ldr	r2, [pc, #264]	; (8010334 <HAL_UART_MspInit+0x154>)
 801022a:	f043 0302 	orr.w	r3, r3, #2
 801022e:	6313      	str	r3, [r2, #48]	; 0x30
 8010230:	4b40      	ldr	r3, [pc, #256]	; (8010334 <HAL_UART_MspInit+0x154>)
 8010232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010234:	f003 0302 	and.w	r3, r3, #2
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	68fb      	ldr	r3, [r7, #12]
	/**USART3 GPIO Configuration
	PB10     ------> USART3_TX
	PB11     ------> USART3_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801023c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010240:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010242:	2302      	movs	r3, #2
 8010244:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010246:	2300      	movs	r3, #0
 8010248:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801024a:	2303      	movs	r3, #3
 801024c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801024e:	2307      	movs	r3, #7
 8010250:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010252:	f107 0314 	add.w	r3, r7, #20
 8010256:	4619      	mov	r1, r3
 8010258:	4837      	ldr	r0, [pc, #220]	; (8010338 <HAL_UART_MspInit+0x158>)
 801025a:	f7f3 ff33 	bl	80040c4 <HAL_GPIO_Init>

	/* USART3 DMA Init */
	/* USART3_TX Init */
	hdma_usart3_tx.Instance = DMA1_Stream3;
 801025e:	4b37      	ldr	r3, [pc, #220]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010260:	4a37      	ldr	r2, [pc, #220]	; (8010340 <HAL_UART_MspInit+0x160>)
 8010262:	601a      	str	r2, [r3, #0]
	hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8010264:	4b35      	ldr	r3, [pc, #212]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801026a:	605a      	str	r2, [r3, #4]
	hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801026c:	4b33      	ldr	r3, [pc, #204]	; (801033c <HAL_UART_MspInit+0x15c>)
 801026e:	2240      	movs	r2, #64	; 0x40
 8010270:	609a      	str	r2, [r3, #8]
	hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010272:	4b32      	ldr	r3, [pc, #200]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010274:	2200      	movs	r2, #0
 8010276:	60da      	str	r2, [r3, #12]
	hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010278:	4b30      	ldr	r3, [pc, #192]	; (801033c <HAL_UART_MspInit+0x15c>)
 801027a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801027e:	611a      	str	r2, [r3, #16]
	hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010280:	4b2e      	ldr	r3, [pc, #184]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010282:	2200      	movs	r2, #0
 8010284:	615a      	str	r2, [r3, #20]
	hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010286:	4b2d      	ldr	r3, [pc, #180]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010288:	2200      	movs	r2, #0
 801028a:	619a      	str	r2, [r3, #24]
	hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 801028c:	4b2b      	ldr	r3, [pc, #172]	; (801033c <HAL_UART_MspInit+0x15c>)
 801028e:	2200      	movs	r2, #0
 8010290:	61da      	str	r2, [r3, #28]
	hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010292:	4b2a      	ldr	r3, [pc, #168]	; (801033c <HAL_UART_MspInit+0x15c>)
 8010294:	2200      	movs	r2, #0
 8010296:	621a      	str	r2, [r3, #32]
	hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010298:	4b28      	ldr	r3, [pc, #160]	; (801033c <HAL_UART_MspInit+0x15c>)
 801029a:	2200      	movs	r2, #0
 801029c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 801029e:	4827      	ldr	r0, [pc, #156]	; (801033c <HAL_UART_MspInit+0x15c>)
 80102a0:	f7f3 f836 	bl	8003310 <HAL_DMA_Init>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <HAL_UART_MspInit+0xce>
	{
	  Error_Handler();
 80102aa:	f000 f9a3 	bl	80105f4 <Error_Handler>
	}

	__HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a22      	ldr	r2, [pc, #136]	; (801033c <HAL_UART_MspInit+0x15c>)
 80102b2:	635a      	str	r2, [r3, #52]	; 0x34
 80102b4:	4a21      	ldr	r2, [pc, #132]	; (801033c <HAL_UART_MspInit+0x15c>)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6393      	str	r3, [r2, #56]	; 0x38

	/* USART3_RX Init */
	hdma_usart3_rx.Instance = DMA1_Stream1;
 80102ba:	4b22      	ldr	r3, [pc, #136]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102bc:	4a22      	ldr	r2, [pc, #136]	; (8010348 <HAL_UART_MspInit+0x168>)
 80102be:	601a      	str	r2, [r3, #0]
	hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80102c0:	4b20      	ldr	r3, [pc, #128]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80102c6:	605a      	str	r2, [r3, #4]
	hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80102c8:	4b1e      	ldr	r3, [pc, #120]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	609a      	str	r2, [r3, #8]
	hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80102ce:	4b1d      	ldr	r3, [pc, #116]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	60da      	str	r2, [r3, #12]
	hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80102d4:	4b1b      	ldr	r3, [pc, #108]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102da:	611a      	str	r2, [r3, #16]
	hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80102dc:	4b19      	ldr	r3, [pc, #100]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102de:	2200      	movs	r2, #0
 80102e0:	615a      	str	r2, [r3, #20]
	hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80102e2:	4b18      	ldr	r3, [pc, #96]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	619a      	str	r2, [r3, #24]
	hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80102e8:	4b16      	ldr	r3, [pc, #88]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102ee:	61da      	str	r2, [r3, #28]
	hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80102f0:	4b14      	ldr	r3, [pc, #80]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	621a      	str	r2, [r3, #32]
	hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80102f6:	4b13      	ldr	r3, [pc, #76]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80102fc:	4811      	ldr	r0, [pc, #68]	; (8010344 <HAL_UART_MspInit+0x164>)
 80102fe:	f7f3 f807 	bl	8003310 <HAL_DMA_Init>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <HAL_UART_MspInit+0x12c>
	{
	  Error_Handler();
 8010308:	f000 f974 	bl	80105f4 <Error_Handler>
	}

	__HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4a0d      	ldr	r2, [pc, #52]	; (8010344 <HAL_UART_MspInit+0x164>)
 8010310:	639a      	str	r2, [r3, #56]	; 0x38
 8010312:	4a0c      	ldr	r2, [pc, #48]	; (8010344 <HAL_UART_MspInit+0x164>)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6393      	str	r3, [r2, #56]	; 0x38

	/* USART3 interrupt Init */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8010318:	2200      	movs	r2, #0
 801031a:	2100      	movs	r1, #0
 801031c:	2027      	movs	r0, #39	; 0x27
 801031e:	f7f2 ffc0 	bl	80032a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8010322:	2027      	movs	r0, #39	; 0x27
 8010324:	f7f2 ffd9 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8010328:	bf00      	nop
 801032a:	3728      	adds	r7, #40	; 0x28
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	40004800 	.word	0x40004800
 8010334:	40023800 	.word	0x40023800
 8010338:	40020400 	.word	0x40020400
 801033c:	20002a40 	.word	0x20002a40
 8010340:	40026058 	.word	0x40026058
 8010344:	20002aa0 	.word	0x20002aa0
 8010348:	40026028 	.word	0x40026028

0801034c <draw_fan_status>:
 */
#include "ui_common.h"
#include "image.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 801034c:	b480      	push	{r7}
 801034e:	b087      	sub	sp, #28
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	80fb      	strh	r3, [r7, #6]
 8010356:	460b      	mov	r3, r1
 8010358:	80bb      	strh	r3, [r7, #4]
 801035a:	4613      	mov	r3, r2
 801035c:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 50;
 801035e:	2332      	movs	r3, #50	; 0x32
 8010360:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 8010362:	7dfb      	ldrb	r3, [r7, #23]
 8010364:	2b7e      	cmp	r3, #126	; 0x7e
 8010366:	d910      	bls.n	801038a <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d006      	beq.n	801037c <draw_fan_status+0x30>
 801036e:	4a17      	ldr	r2, [pc, #92]	; (80103cc <draw_fan_status+0x80>)
 8010370:	f107 030c 	add.w	r3, r7, #12
 8010374:	6810      	ldr	r0, [r2, #0]
 8010376:	6851      	ldr	r1, [r2, #4]
 8010378:	c303      	stmia	r3!, {r0, r1}
  else
  {
    image = Fan0_32x32x4;
  }
  //lcdDrawBufferImage(x, y, image.width, image.height, image.data);
}
 801037a:	e020      	b.n	80103be <draw_fan_status+0x72>
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 801037c:	4a14      	ldr	r2, [pc, #80]	; (80103d0 <draw_fan_status+0x84>)
 801037e:	f107 030c 	add.w	r3, r7, #12
 8010382:	6810      	ldr	r0, [r2, #0]
 8010384:	6851      	ldr	r1, [r2, #4]
 8010386:	c303      	stmia	r3!, {r0, r1}
}
 8010388:	e019      	b.n	80103be <draw_fan_status+0x72>
  else if (fanSpeed > 0)
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d010      	beq.n	80103b2 <draw_fan_status+0x66>
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d006      	beq.n	80103a4 <draw_fan_status+0x58>
 8010396:	4a0d      	ldr	r2, [pc, #52]	; (80103cc <draw_fan_status+0x80>)
 8010398:	f107 030c 	add.w	r3, r7, #12
 801039c:	6810      	ldr	r0, [r2, #0]
 801039e:	6851      	ldr	r1, [r2, #4]
 80103a0:	c303      	stmia	r3!, {r0, r1}
}
 80103a2:	e00c      	b.n	80103be <draw_fan_status+0x72>
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 80103a4:	4a0a      	ldr	r2, [pc, #40]	; (80103d0 <draw_fan_status+0x84>)
 80103a6:	f107 030c 	add.w	r3, r7, #12
 80103aa:	6810      	ldr	r0, [r2, #0]
 80103ac:	6851      	ldr	r1, [r2, #4]
 80103ae:	c303      	stmia	r3!, {r0, r1}
}
 80103b0:	e005      	b.n	80103be <draw_fan_status+0x72>
    image = Fan0_32x32x4;
 80103b2:	4a07      	ldr	r2, [pc, #28]	; (80103d0 <draw_fan_status+0x84>)
 80103b4:	f107 030c 	add.w	r3, r7, #12
 80103b8:	6810      	ldr	r0, [r2, #0]
 80103ba:	6851      	ldr	r1, [r2, #4]
 80103bc:	c303      	stmia	r3!, {r0, r1}
}
 80103be:	bf00      	nop
 80103c0:	371c      	adds	r7, #28
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	0801d508 	.word	0x0801d508
 80103d0:	0801d500 	.word	0x0801d500

080103d4 <get_blink>:

bool get_blink() {
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 80103da:	f7fb f87a 	bl	800b4d2 <millis>
 80103de:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 80103e0:	4b0d      	ldr	r3, [pc, #52]	; (8010418 <get_blink+0x44>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	db0a      	blt.n	8010402 <get_blink+0x2e>
    blink ^= 0xFF;
 80103ec:	4b0b      	ldr	r3, [pc, #44]	; (801041c <get_blink+0x48>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	43db      	mvns	r3, r3
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	4b09      	ldr	r3, [pc, #36]	; (801041c <get_blink+0x48>)
 80103f6:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 80103fe:	4a06      	ldr	r2, [pc, #24]	; (8010418 <get_blink+0x44>)
 8010400:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 8010402:	4b06      	ldr	r3, [pc, #24]	; (801041c <get_blink+0x48>)
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	bf14      	ite	ne
 801040a:	2301      	movne	r3, #1
 801040c:	2300      	moveq	r3, #0
 801040e:	b2db      	uxtb	r3, r3
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	20002b00 	.word	0x20002b00
 801041c:	20002b04 	.word	0x20002b04

08010420 <usbInit>:
#ifdef _USE_HW_USB
#include "usb_device.h"


bool usbInit(void)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
  bool ret = true;
 8010426:	2301      	movs	r3, #1
 8010428:	71fb      	strb	r3, [r7, #7]

  MX_USB_DEVICE_Init();
 801042a:	f7fa f9e7 	bl	800a7fc <MX_USB_DEVICE_Init>

  return ret;
 801042e:	79fb      	ldrb	r3, [r7, #7]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801043c:	f7f2 fdc0 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010440:	f000 f86e 	bl	8010520 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  hwInit();
 8010444:	f000 f80c 	bl	8010460 <hwInit>

  startTime = micros();
 8010448:	f7fb f84a 	bl	800b4e0 <micros>
 801044c:	4603      	mov	r3, r0
 801044e:	4a03      	ldr	r2, [pc, #12]	; (801045c <main+0x24>)
 8010450:	6013      	str	r3, [r2, #0]
//		  gpioPinWrite(StepX_STEP, _DEF_LOW);
//	  	delayMicroseconds(500);
//	  }
//	  uartPrintf(0, "TEST_micros : %d\r\n", micros());
//	  HAL_Delay(100);
	  cliMain();
 8010452:	f7fc fd0f 	bl	800ce74 <cliMain>
	  mainUi();
 8010456:	f000 f823 	bl	80104a0 <mainUi>
	  cliMain();
 801045a:	e7fa      	b.n	8010452 <main+0x1a>
 801045c:	20002b08 	.word	0x20002b08

08010460 <hwInit>:
  }
  /* USER CODE END 3 */
}

void hwInit(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
  #ifdef _USE_HW_RTC
    rtcInit();
  #endif
  MX_TIM5_Init();
 8010464:	f7ff fa82 	bl	800f96c <MX_TIM5_Init>
  gpioInit();
 8010468:	f7fd fe68 	bl	800e13c <gpioInit>
  buttonInit();
 801046c:	f7fc f904 	bl	800c678 <buttonInit>
  flashInit();
 8010470:	f7fd fd0a 	bl	800de88 <flashInit>
  MX_DMA_Init();
 8010474:	f7fd fb62 	bl	800db3c <MX_DMA_Init>
  usbInit();
 8010478:	f7ff ffd2 	bl	8010420 <usbInit>
  uartInit();
 801047c:	f7ff fcae 	bl	800fddc <uartInit>
  cliInit();
 8010480:	f7fc fbf4 	bl	800cc6c <cliInit>
  spiInit();
 8010484:	f7fe fe30 	bl	800f0e8 <spiInit>

  lcdInit();
 8010488:	f7fe f8e6 	bl	800e658 <lcdInit>

  touch_init();
 801048c:	f7ff fb0a 	bl	800faa4 <touch_init>
//  if (sdInit() == true)
//  {
//    fatfsInit();
//  }

  cliOpen(_DEF_USB, 57600);
 8010490:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8010494:	2000      	movs	r0, #0
 8010496:	f7fc fc35 	bl	800cd04 <cliOpen>
}
 801049a:	bf00      	nop
 801049c:	bd80      	pop	{r7, pc}
	...

080104a0 <mainUi>:

void mainUi(void)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af02      	add	r7, sp, #8

	lcdPrintf(25,16*0, TFT_GREEN, "[LCD 테스트]");
 80104a6:	4b1a      	ldr	r3, [pc, #104]	; (8010510 <mainUi+0x70>)
 80104a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80104ac:	2100      	movs	r1, #0
 80104ae:	2019      	movs	r0, #25
 80104b0:	f7fe fb82 	bl	800ebb8 <lcdPrintf>

	lcdPrintf(25,16*1, TFT_RED, "[LCD 테스트]");
 80104b4:	4b16      	ldr	r3, [pc, #88]	; (8010510 <mainUi+0x70>)
 80104b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80104ba:	2110      	movs	r1, #16
 80104bc:	2019      	movs	r0, #25
 80104be:	f7fe fb7b 	bl	800ebb8 <lcdPrintf>

	lcdPrintf(25,16*3, TFT_BLUE, "[LCD 테스트]");
 80104c2:	4b13      	ldr	r3, [pc, #76]	; (8010510 <mainUi+0x70>)
 80104c4:	221f      	movs	r2, #31
 80104c6:	2130      	movs	r1, #48	; 0x30
 80104c8:	2019      	movs	r0, #25
 80104ca:	f7fe fb75 	bl	800ebb8 <lcdPrintf>

	lcdPrintf(25,16*7, TFT_BLUE, "fps : %d ms", (micros()-startTime)/1000);
 80104ce:	f7fb f807 	bl	800b4e0 <micros>
 80104d2:	4602      	mov	r2, r0
 80104d4:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <mainUi+0x74>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	4a0f      	ldr	r2, [pc, #60]	; (8010518 <mainUi+0x78>)
 80104dc:	fba2 2303 	umull	r2, r3, r2, r3
 80104e0:	099b      	lsrs	r3, r3, #6
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4b0d      	ldr	r3, [pc, #52]	; (801051c <mainUi+0x7c>)
 80104e6:	221f      	movs	r2, #31
 80104e8:	2170      	movs	r1, #112	; 0x70
 80104ea:	2019      	movs	r0, #25
 80104ec:	f7fe fb64 	bl	800ebb8 <lcdPrintf>
	lcdDrawFillRect(25, 16*7, 100, 20, TFT_NAVY);
 80104f0:	230f      	movs	r3, #15
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	2314      	movs	r3, #20
 80104f6:	2264      	movs	r2, #100	; 0x64
 80104f8:	2170      	movs	r1, #112	; 0x70
 80104fa:	2019      	movs	r0, #25
 80104fc:	f7fe fae4 	bl	800eac8 <lcdDrawFillRect>
	startTime = micros();
 8010500:	f7fa ffee 	bl	800b4e0 <micros>
 8010504:	4603      	mov	r3, r0
 8010506:	4a03      	ldr	r2, [pc, #12]	; (8010514 <mainUi+0x74>)
 8010508:	6013      	str	r3, [r2, #0]
}
 801050a:	bf00      	nop
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	08013cd8 	.word	0x08013cd8
 8010514:	20002b08 	.word	0x20002b08
 8010518:	10624dd3 	.word	0x10624dd3
 801051c:	08013ce8 	.word	0x08013ce8

08010520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b094      	sub	sp, #80	; 0x50
 8010524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010526:	f107 0320 	add.w	r3, r7, #32
 801052a:	2230      	movs	r2, #48	; 0x30
 801052c:	2100      	movs	r1, #0
 801052e:	4618      	mov	r0, r3
 8010530:	f001 f928 	bl	8011784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010534:	f107 030c 	add.w	r3, r7, #12
 8010538:	2200      	movs	r2, #0
 801053a:	601a      	str	r2, [r3, #0]
 801053c:	605a      	str	r2, [r3, #4]
 801053e:	609a      	str	r2, [r3, #8]
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010544:	2300      	movs	r3, #0
 8010546:	60bb      	str	r3, [r7, #8]
 8010548:	4b28      	ldr	r3, [pc, #160]	; (80105ec <SystemClock_Config+0xcc>)
 801054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054c:	4a27      	ldr	r2, [pc, #156]	; (80105ec <SystemClock_Config+0xcc>)
 801054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010552:	6413      	str	r3, [r2, #64]	; 0x40
 8010554:	4b25      	ldr	r3, [pc, #148]	; (80105ec <SystemClock_Config+0xcc>)
 8010556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801055c:	60bb      	str	r3, [r7, #8]
 801055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010560:	2300      	movs	r3, #0
 8010562:	607b      	str	r3, [r7, #4]
 8010564:	4b22      	ldr	r3, [pc, #136]	; (80105f0 <SystemClock_Config+0xd0>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4a21      	ldr	r2, [pc, #132]	; (80105f0 <SystemClock_Config+0xd0>)
 801056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801056e:	6013      	str	r3, [r2, #0]
 8010570:	4b1f      	ldr	r3, [pc, #124]	; (80105f0 <SystemClock_Config+0xd0>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010578:	607b      	str	r3, [r7, #4]
 801057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801057c:	2301      	movs	r3, #1
 801057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010586:	2302      	movs	r3, #2
 8010588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010590:	2304      	movs	r3, #4
 8010592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8010594:	23a8      	movs	r3, #168	; 0xa8
 8010596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010598:	2302      	movs	r3, #2
 801059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801059c:	2307      	movs	r3, #7
 801059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80105a0:	f107 0320 	add.w	r3, r7, #32
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f5 f9d7 	bl	8005958 <HAL_RCC_OscConfig>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80105b0:	f000 f820 	bl	80105f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80105b4:	230f      	movs	r3, #15
 80105b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80105b8:	2302      	movs	r3, #2
 80105ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80105bc:	2300      	movs	r3, #0
 80105be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80105c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80105c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80105c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80105cc:	f107 030c 	add.w	r3, r7, #12
 80105d0:	2105      	movs	r1, #5
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f5 fc38 	bl	8005e48 <HAL_RCC_ClockConfig>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d001      	beq.n	80105e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80105de:	f000 f809 	bl	80105f4 <Error_Handler>
  }
}
 80105e2:	bf00      	nop
 80105e4:	3750      	adds	r7, #80	; 0x50
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	40023800 	.word	0x40023800
 80105f0:	40007000 	.word	0x40007000

080105f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80105f4:	b480      	push	{r7}
 80105f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80105f8:	b672      	cpsid	i
}
 80105fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80105fc:	e7fe      	b.n	80105fc <Error_Handler+0x8>

080105fe <sulp>:
 80105fe:	b570      	push	{r4, r5, r6, lr}
 8010600:	4604      	mov	r4, r0
 8010602:	460d      	mov	r5, r1
 8010604:	ec45 4b10 	vmov	d0, r4, r5
 8010608:	4616      	mov	r6, r2
 801060a:	f002 f969 	bl	80128e0 <__ulp>
 801060e:	ec51 0b10 	vmov	r0, r1, d0
 8010612:	b17e      	cbz	r6, 8010634 <sulp+0x36>
 8010614:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010618:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801061c:	2b00      	cmp	r3, #0
 801061e:	dd09      	ble.n	8010634 <sulp+0x36>
 8010620:	051b      	lsls	r3, r3, #20
 8010622:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010626:	2400      	movs	r4, #0
 8010628:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	f7ef ffea 	bl	8000608 <__aeabi_dmul>
 8010634:	bd70      	pop	{r4, r5, r6, pc}
	...

08010638 <_strtod_l>:
 8010638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063c:	ed2d 8b02 	vpush	{d8}
 8010640:	b09b      	sub	sp, #108	; 0x6c
 8010642:	4604      	mov	r4, r0
 8010644:	9213      	str	r2, [sp, #76]	; 0x4c
 8010646:	2200      	movs	r2, #0
 8010648:	9216      	str	r2, [sp, #88]	; 0x58
 801064a:	460d      	mov	r5, r1
 801064c:	f04f 0800 	mov.w	r8, #0
 8010650:	f04f 0900 	mov.w	r9, #0
 8010654:	460a      	mov	r2, r1
 8010656:	9215      	str	r2, [sp, #84]	; 0x54
 8010658:	7811      	ldrb	r1, [r2, #0]
 801065a:	292b      	cmp	r1, #43	; 0x2b
 801065c:	d04c      	beq.n	80106f8 <_strtod_l+0xc0>
 801065e:	d83a      	bhi.n	80106d6 <_strtod_l+0x9e>
 8010660:	290d      	cmp	r1, #13
 8010662:	d834      	bhi.n	80106ce <_strtod_l+0x96>
 8010664:	2908      	cmp	r1, #8
 8010666:	d834      	bhi.n	80106d2 <_strtod_l+0x9a>
 8010668:	2900      	cmp	r1, #0
 801066a:	d03d      	beq.n	80106e8 <_strtod_l+0xb0>
 801066c:	2200      	movs	r2, #0
 801066e:	920a      	str	r2, [sp, #40]	; 0x28
 8010670:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010672:	7832      	ldrb	r2, [r6, #0]
 8010674:	2a30      	cmp	r2, #48	; 0x30
 8010676:	f040 80b4 	bne.w	80107e2 <_strtod_l+0x1aa>
 801067a:	7872      	ldrb	r2, [r6, #1]
 801067c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010680:	2a58      	cmp	r2, #88	; 0x58
 8010682:	d170      	bne.n	8010766 <_strtod_l+0x12e>
 8010684:	9302      	str	r3, [sp, #8]
 8010686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010688:	9301      	str	r3, [sp, #4]
 801068a:	ab16      	add	r3, sp, #88	; 0x58
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	4a8e      	ldr	r2, [pc, #568]	; (80108c8 <_strtod_l+0x290>)
 8010690:	ab17      	add	r3, sp, #92	; 0x5c
 8010692:	a915      	add	r1, sp, #84	; 0x54
 8010694:	4620      	mov	r0, r4
 8010696:	f001 fa09 	bl	8011aac <__gethex>
 801069a:	f010 070f 	ands.w	r7, r0, #15
 801069e:	4605      	mov	r5, r0
 80106a0:	d005      	beq.n	80106ae <_strtod_l+0x76>
 80106a2:	2f06      	cmp	r7, #6
 80106a4:	d12a      	bne.n	80106fc <_strtod_l+0xc4>
 80106a6:	3601      	adds	r6, #1
 80106a8:	2300      	movs	r3, #0
 80106aa:	9615      	str	r6, [sp, #84]	; 0x54
 80106ac:	930a      	str	r3, [sp, #40]	; 0x28
 80106ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f040 857f 	bne.w	80111b4 <_strtod_l+0xb7c>
 80106b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106b8:	b1db      	cbz	r3, 80106f2 <_strtod_l+0xba>
 80106ba:	4642      	mov	r2, r8
 80106bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80106c0:	ec43 2b10 	vmov	d0, r2, r3
 80106c4:	b01b      	add	sp, #108	; 0x6c
 80106c6:	ecbd 8b02 	vpop	{d8}
 80106ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ce:	2920      	cmp	r1, #32
 80106d0:	d1cc      	bne.n	801066c <_strtod_l+0x34>
 80106d2:	3201      	adds	r2, #1
 80106d4:	e7bf      	b.n	8010656 <_strtod_l+0x1e>
 80106d6:	292d      	cmp	r1, #45	; 0x2d
 80106d8:	d1c8      	bne.n	801066c <_strtod_l+0x34>
 80106da:	2101      	movs	r1, #1
 80106dc:	910a      	str	r1, [sp, #40]	; 0x28
 80106de:	1c51      	adds	r1, r2, #1
 80106e0:	9115      	str	r1, [sp, #84]	; 0x54
 80106e2:	7852      	ldrb	r2, [r2, #1]
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	d1c3      	bne.n	8010670 <_strtod_l+0x38>
 80106e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80106ea:	9515      	str	r5, [sp, #84]	; 0x54
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f040 855f 	bne.w	80111b0 <_strtod_l+0xb78>
 80106f2:	4642      	mov	r2, r8
 80106f4:	464b      	mov	r3, r9
 80106f6:	e7e3      	b.n	80106c0 <_strtod_l+0x88>
 80106f8:	2100      	movs	r1, #0
 80106fa:	e7ef      	b.n	80106dc <_strtod_l+0xa4>
 80106fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80106fe:	b13a      	cbz	r2, 8010710 <_strtod_l+0xd8>
 8010700:	2135      	movs	r1, #53	; 0x35
 8010702:	a818      	add	r0, sp, #96	; 0x60
 8010704:	f002 f9e9 	bl	8012ada <__copybits>
 8010708:	9916      	ldr	r1, [sp, #88]	; 0x58
 801070a:	4620      	mov	r0, r4
 801070c:	f001 fdbc 	bl	8012288 <_Bfree>
 8010710:	3f01      	subs	r7, #1
 8010712:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010714:	2f04      	cmp	r7, #4
 8010716:	d806      	bhi.n	8010726 <_strtod_l+0xee>
 8010718:	e8df f007 	tbb	[pc, r7]
 801071c:	201d0314 	.word	0x201d0314
 8010720:	14          	.byte	0x14
 8010721:	00          	.byte	0x00
 8010722:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010726:	05e9      	lsls	r1, r5, #23
 8010728:	bf48      	it	mi
 801072a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801072e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010732:	0d1b      	lsrs	r3, r3, #20
 8010734:	051b      	lsls	r3, r3, #20
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1b9      	bne.n	80106ae <_strtod_l+0x76>
 801073a:	f001 f8af 	bl	801189c <__errno>
 801073e:	2322      	movs	r3, #34	; 0x22
 8010740:	6003      	str	r3, [r0, #0]
 8010742:	e7b4      	b.n	80106ae <_strtod_l+0x76>
 8010744:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010748:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801074c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010750:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010754:	e7e7      	b.n	8010726 <_strtod_l+0xee>
 8010756:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80108d0 <_strtod_l+0x298>
 801075a:	e7e4      	b.n	8010726 <_strtod_l+0xee>
 801075c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010760:	f04f 38ff 	mov.w	r8, #4294967295
 8010764:	e7df      	b.n	8010726 <_strtod_l+0xee>
 8010766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010768:	1c5a      	adds	r2, r3, #1
 801076a:	9215      	str	r2, [sp, #84]	; 0x54
 801076c:	785b      	ldrb	r3, [r3, #1]
 801076e:	2b30      	cmp	r3, #48	; 0x30
 8010770:	d0f9      	beq.n	8010766 <_strtod_l+0x12e>
 8010772:	2b00      	cmp	r3, #0
 8010774:	d09b      	beq.n	80106ae <_strtod_l+0x76>
 8010776:	2301      	movs	r3, #1
 8010778:	f04f 0a00 	mov.w	sl, #0
 801077c:	9304      	str	r3, [sp, #16]
 801077e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010780:	930b      	str	r3, [sp, #44]	; 0x2c
 8010782:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010786:	46d3      	mov	fp, sl
 8010788:	220a      	movs	r2, #10
 801078a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801078c:	7806      	ldrb	r6, [r0, #0]
 801078e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010792:	b2d9      	uxtb	r1, r3
 8010794:	2909      	cmp	r1, #9
 8010796:	d926      	bls.n	80107e6 <_strtod_l+0x1ae>
 8010798:	494c      	ldr	r1, [pc, #304]	; (80108cc <_strtod_l+0x294>)
 801079a:	2201      	movs	r2, #1
 801079c:	f000 fffa 	bl	8011794 <strncmp>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d030      	beq.n	8010806 <_strtod_l+0x1ce>
 80107a4:	2000      	movs	r0, #0
 80107a6:	4632      	mov	r2, r6
 80107a8:	9005      	str	r0, [sp, #20]
 80107aa:	465e      	mov	r6, fp
 80107ac:	4603      	mov	r3, r0
 80107ae:	2a65      	cmp	r2, #101	; 0x65
 80107b0:	d001      	beq.n	80107b6 <_strtod_l+0x17e>
 80107b2:	2a45      	cmp	r2, #69	; 0x45
 80107b4:	d113      	bne.n	80107de <_strtod_l+0x1a6>
 80107b6:	b91e      	cbnz	r6, 80107c0 <_strtod_l+0x188>
 80107b8:	9a04      	ldr	r2, [sp, #16]
 80107ba:	4302      	orrs	r2, r0
 80107bc:	d094      	beq.n	80106e8 <_strtod_l+0xb0>
 80107be:	2600      	movs	r6, #0
 80107c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80107c2:	1c6a      	adds	r2, r5, #1
 80107c4:	9215      	str	r2, [sp, #84]	; 0x54
 80107c6:	786a      	ldrb	r2, [r5, #1]
 80107c8:	2a2b      	cmp	r2, #43	; 0x2b
 80107ca:	d074      	beq.n	80108b6 <_strtod_l+0x27e>
 80107cc:	2a2d      	cmp	r2, #45	; 0x2d
 80107ce:	d078      	beq.n	80108c2 <_strtod_l+0x28a>
 80107d0:	f04f 0c00 	mov.w	ip, #0
 80107d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80107d8:	2909      	cmp	r1, #9
 80107da:	d97f      	bls.n	80108dc <_strtod_l+0x2a4>
 80107dc:	9515      	str	r5, [sp, #84]	; 0x54
 80107de:	2700      	movs	r7, #0
 80107e0:	e09e      	b.n	8010920 <_strtod_l+0x2e8>
 80107e2:	2300      	movs	r3, #0
 80107e4:	e7c8      	b.n	8010778 <_strtod_l+0x140>
 80107e6:	f1bb 0f08 	cmp.w	fp, #8
 80107ea:	bfd8      	it	le
 80107ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80107ee:	f100 0001 	add.w	r0, r0, #1
 80107f2:	bfda      	itte	le
 80107f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80107f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80107fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80107fe:	f10b 0b01 	add.w	fp, fp, #1
 8010802:	9015      	str	r0, [sp, #84]	; 0x54
 8010804:	e7c1      	b.n	801078a <_strtod_l+0x152>
 8010806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010808:	1c5a      	adds	r2, r3, #1
 801080a:	9215      	str	r2, [sp, #84]	; 0x54
 801080c:	785a      	ldrb	r2, [r3, #1]
 801080e:	f1bb 0f00 	cmp.w	fp, #0
 8010812:	d037      	beq.n	8010884 <_strtod_l+0x24c>
 8010814:	9005      	str	r0, [sp, #20]
 8010816:	465e      	mov	r6, fp
 8010818:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801081c:	2b09      	cmp	r3, #9
 801081e:	d912      	bls.n	8010846 <_strtod_l+0x20e>
 8010820:	2301      	movs	r3, #1
 8010822:	e7c4      	b.n	80107ae <_strtod_l+0x176>
 8010824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	9215      	str	r2, [sp, #84]	; 0x54
 801082a:	785a      	ldrb	r2, [r3, #1]
 801082c:	3001      	adds	r0, #1
 801082e:	2a30      	cmp	r2, #48	; 0x30
 8010830:	d0f8      	beq.n	8010824 <_strtod_l+0x1ec>
 8010832:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010836:	2b08      	cmp	r3, #8
 8010838:	f200 84c1 	bhi.w	80111be <_strtod_l+0xb86>
 801083c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801083e:	9005      	str	r0, [sp, #20]
 8010840:	2000      	movs	r0, #0
 8010842:	930b      	str	r3, [sp, #44]	; 0x2c
 8010844:	4606      	mov	r6, r0
 8010846:	3a30      	subs	r2, #48	; 0x30
 8010848:	f100 0301 	add.w	r3, r0, #1
 801084c:	d014      	beq.n	8010878 <_strtod_l+0x240>
 801084e:	9905      	ldr	r1, [sp, #20]
 8010850:	4419      	add	r1, r3
 8010852:	9105      	str	r1, [sp, #20]
 8010854:	4633      	mov	r3, r6
 8010856:	eb00 0c06 	add.w	ip, r0, r6
 801085a:	210a      	movs	r1, #10
 801085c:	4563      	cmp	r3, ip
 801085e:	d113      	bne.n	8010888 <_strtod_l+0x250>
 8010860:	1833      	adds	r3, r6, r0
 8010862:	2b08      	cmp	r3, #8
 8010864:	f106 0601 	add.w	r6, r6, #1
 8010868:	4406      	add	r6, r0
 801086a:	dc1a      	bgt.n	80108a2 <_strtod_l+0x26a>
 801086c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801086e:	230a      	movs	r3, #10
 8010870:	fb03 2301 	mla	r3, r3, r1, r2
 8010874:	9309      	str	r3, [sp, #36]	; 0x24
 8010876:	2300      	movs	r3, #0
 8010878:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801087a:	1c51      	adds	r1, r2, #1
 801087c:	9115      	str	r1, [sp, #84]	; 0x54
 801087e:	7852      	ldrb	r2, [r2, #1]
 8010880:	4618      	mov	r0, r3
 8010882:	e7c9      	b.n	8010818 <_strtod_l+0x1e0>
 8010884:	4658      	mov	r0, fp
 8010886:	e7d2      	b.n	801082e <_strtod_l+0x1f6>
 8010888:	2b08      	cmp	r3, #8
 801088a:	f103 0301 	add.w	r3, r3, #1
 801088e:	dc03      	bgt.n	8010898 <_strtod_l+0x260>
 8010890:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010892:	434f      	muls	r7, r1
 8010894:	9709      	str	r7, [sp, #36]	; 0x24
 8010896:	e7e1      	b.n	801085c <_strtod_l+0x224>
 8010898:	2b10      	cmp	r3, #16
 801089a:	bfd8      	it	le
 801089c:	fb01 fa0a 	mulle.w	sl, r1, sl
 80108a0:	e7dc      	b.n	801085c <_strtod_l+0x224>
 80108a2:	2e10      	cmp	r6, #16
 80108a4:	bfdc      	itt	le
 80108a6:	230a      	movle	r3, #10
 80108a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80108ac:	e7e3      	b.n	8010876 <_strtod_l+0x23e>
 80108ae:	2300      	movs	r3, #0
 80108b0:	9305      	str	r3, [sp, #20]
 80108b2:	2301      	movs	r3, #1
 80108b4:	e780      	b.n	80107b8 <_strtod_l+0x180>
 80108b6:	f04f 0c00 	mov.w	ip, #0
 80108ba:	1caa      	adds	r2, r5, #2
 80108bc:	9215      	str	r2, [sp, #84]	; 0x54
 80108be:	78aa      	ldrb	r2, [r5, #2]
 80108c0:	e788      	b.n	80107d4 <_strtod_l+0x19c>
 80108c2:	f04f 0c01 	mov.w	ip, #1
 80108c6:	e7f8      	b.n	80108ba <_strtod_l+0x282>
 80108c8:	0802167c 	.word	0x0802167c
 80108cc:	0802166b 	.word	0x0802166b
 80108d0:	7ff00000 	.word	0x7ff00000
 80108d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80108d6:	1c51      	adds	r1, r2, #1
 80108d8:	9115      	str	r1, [sp, #84]	; 0x54
 80108da:	7852      	ldrb	r2, [r2, #1]
 80108dc:	2a30      	cmp	r2, #48	; 0x30
 80108de:	d0f9      	beq.n	80108d4 <_strtod_l+0x29c>
 80108e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80108e4:	2908      	cmp	r1, #8
 80108e6:	f63f af7a 	bhi.w	80107de <_strtod_l+0x1a6>
 80108ea:	3a30      	subs	r2, #48	; 0x30
 80108ec:	9208      	str	r2, [sp, #32]
 80108ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80108f0:	920c      	str	r2, [sp, #48]	; 0x30
 80108f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80108f4:	1c57      	adds	r7, r2, #1
 80108f6:	9715      	str	r7, [sp, #84]	; 0x54
 80108f8:	7852      	ldrb	r2, [r2, #1]
 80108fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80108fe:	f1be 0f09 	cmp.w	lr, #9
 8010902:	d938      	bls.n	8010976 <_strtod_l+0x33e>
 8010904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010906:	1a7f      	subs	r7, r7, r1
 8010908:	2f08      	cmp	r7, #8
 801090a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801090e:	dc03      	bgt.n	8010918 <_strtod_l+0x2e0>
 8010910:	9908      	ldr	r1, [sp, #32]
 8010912:	428f      	cmp	r7, r1
 8010914:	bfa8      	it	ge
 8010916:	460f      	movge	r7, r1
 8010918:	f1bc 0f00 	cmp.w	ip, #0
 801091c:	d000      	beq.n	8010920 <_strtod_l+0x2e8>
 801091e:	427f      	negs	r7, r7
 8010920:	2e00      	cmp	r6, #0
 8010922:	d14f      	bne.n	80109c4 <_strtod_l+0x38c>
 8010924:	9904      	ldr	r1, [sp, #16]
 8010926:	4301      	orrs	r1, r0
 8010928:	f47f aec1 	bne.w	80106ae <_strtod_l+0x76>
 801092c:	2b00      	cmp	r3, #0
 801092e:	f47f aedb 	bne.w	80106e8 <_strtod_l+0xb0>
 8010932:	2a69      	cmp	r2, #105	; 0x69
 8010934:	d029      	beq.n	801098a <_strtod_l+0x352>
 8010936:	dc26      	bgt.n	8010986 <_strtod_l+0x34e>
 8010938:	2a49      	cmp	r2, #73	; 0x49
 801093a:	d026      	beq.n	801098a <_strtod_l+0x352>
 801093c:	2a4e      	cmp	r2, #78	; 0x4e
 801093e:	f47f aed3 	bne.w	80106e8 <_strtod_l+0xb0>
 8010942:	499b      	ldr	r1, [pc, #620]	; (8010bb0 <_strtod_l+0x578>)
 8010944:	a815      	add	r0, sp, #84	; 0x54
 8010946:	f001 faf1 	bl	8011f2c <__match>
 801094a:	2800      	cmp	r0, #0
 801094c:	f43f aecc 	beq.w	80106e8 <_strtod_l+0xb0>
 8010950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	2b28      	cmp	r3, #40	; 0x28
 8010956:	d12f      	bne.n	80109b8 <_strtod_l+0x380>
 8010958:	4996      	ldr	r1, [pc, #600]	; (8010bb4 <_strtod_l+0x57c>)
 801095a:	aa18      	add	r2, sp, #96	; 0x60
 801095c:	a815      	add	r0, sp, #84	; 0x54
 801095e:	f001 faf9 	bl	8011f54 <__hexnan>
 8010962:	2805      	cmp	r0, #5
 8010964:	d128      	bne.n	80109b8 <_strtod_l+0x380>
 8010966:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801096c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010970:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010974:	e69b      	b.n	80106ae <_strtod_l+0x76>
 8010976:	9f08      	ldr	r7, [sp, #32]
 8010978:	210a      	movs	r1, #10
 801097a:	fb01 2107 	mla	r1, r1, r7, r2
 801097e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010982:	9208      	str	r2, [sp, #32]
 8010984:	e7b5      	b.n	80108f2 <_strtod_l+0x2ba>
 8010986:	2a6e      	cmp	r2, #110	; 0x6e
 8010988:	e7d9      	b.n	801093e <_strtod_l+0x306>
 801098a:	498b      	ldr	r1, [pc, #556]	; (8010bb8 <_strtod_l+0x580>)
 801098c:	a815      	add	r0, sp, #84	; 0x54
 801098e:	f001 facd 	bl	8011f2c <__match>
 8010992:	2800      	cmp	r0, #0
 8010994:	f43f aea8 	beq.w	80106e8 <_strtod_l+0xb0>
 8010998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801099a:	4988      	ldr	r1, [pc, #544]	; (8010bbc <_strtod_l+0x584>)
 801099c:	3b01      	subs	r3, #1
 801099e:	a815      	add	r0, sp, #84	; 0x54
 80109a0:	9315      	str	r3, [sp, #84]	; 0x54
 80109a2:	f001 fac3 	bl	8011f2c <__match>
 80109a6:	b910      	cbnz	r0, 80109ae <_strtod_l+0x376>
 80109a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109aa:	3301      	adds	r3, #1
 80109ac:	9315      	str	r3, [sp, #84]	; 0x54
 80109ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010bcc <_strtod_l+0x594>
 80109b2:	f04f 0800 	mov.w	r8, #0
 80109b6:	e67a      	b.n	80106ae <_strtod_l+0x76>
 80109b8:	4881      	ldr	r0, [pc, #516]	; (8010bc0 <_strtod_l+0x588>)
 80109ba:	f000 ffb5 	bl	8011928 <nan>
 80109be:	ec59 8b10 	vmov	r8, r9, d0
 80109c2:	e674      	b.n	80106ae <_strtod_l+0x76>
 80109c4:	9b05      	ldr	r3, [sp, #20]
 80109c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109c8:	1afb      	subs	r3, r7, r3
 80109ca:	f1bb 0f00 	cmp.w	fp, #0
 80109ce:	bf08      	it	eq
 80109d0:	46b3      	moveq	fp, r6
 80109d2:	2e10      	cmp	r6, #16
 80109d4:	9308      	str	r3, [sp, #32]
 80109d6:	4635      	mov	r5, r6
 80109d8:	bfa8      	it	ge
 80109da:	2510      	movge	r5, #16
 80109dc:	f7ef fd9a 	bl	8000514 <__aeabi_ui2d>
 80109e0:	2e09      	cmp	r6, #9
 80109e2:	4680      	mov	r8, r0
 80109e4:	4689      	mov	r9, r1
 80109e6:	dd13      	ble.n	8010a10 <_strtod_l+0x3d8>
 80109e8:	4b76      	ldr	r3, [pc, #472]	; (8010bc4 <_strtod_l+0x58c>)
 80109ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80109ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80109f2:	f7ef fe09 	bl	8000608 <__aeabi_dmul>
 80109f6:	4680      	mov	r8, r0
 80109f8:	4650      	mov	r0, sl
 80109fa:	4689      	mov	r9, r1
 80109fc:	f7ef fd8a 	bl	8000514 <__aeabi_ui2d>
 8010a00:	4602      	mov	r2, r0
 8010a02:	460b      	mov	r3, r1
 8010a04:	4640      	mov	r0, r8
 8010a06:	4649      	mov	r1, r9
 8010a08:	f7ef fc48 	bl	800029c <__adddf3>
 8010a0c:	4680      	mov	r8, r0
 8010a0e:	4689      	mov	r9, r1
 8010a10:	2e0f      	cmp	r6, #15
 8010a12:	dc38      	bgt.n	8010a86 <_strtod_l+0x44e>
 8010a14:	9b08      	ldr	r3, [sp, #32]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f43f ae49 	beq.w	80106ae <_strtod_l+0x76>
 8010a1c:	dd24      	ble.n	8010a68 <_strtod_l+0x430>
 8010a1e:	2b16      	cmp	r3, #22
 8010a20:	dc0b      	bgt.n	8010a3a <_strtod_l+0x402>
 8010a22:	4968      	ldr	r1, [pc, #416]	; (8010bc4 <_strtod_l+0x58c>)
 8010a24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a2c:	4642      	mov	r2, r8
 8010a2e:	464b      	mov	r3, r9
 8010a30:	f7ef fdea 	bl	8000608 <__aeabi_dmul>
 8010a34:	4680      	mov	r8, r0
 8010a36:	4689      	mov	r9, r1
 8010a38:	e639      	b.n	80106ae <_strtod_l+0x76>
 8010a3a:	9a08      	ldr	r2, [sp, #32]
 8010a3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010a40:	4293      	cmp	r3, r2
 8010a42:	db20      	blt.n	8010a86 <_strtod_l+0x44e>
 8010a44:	4c5f      	ldr	r4, [pc, #380]	; (8010bc4 <_strtod_l+0x58c>)
 8010a46:	f1c6 060f 	rsb	r6, r6, #15
 8010a4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010a4e:	4642      	mov	r2, r8
 8010a50:	464b      	mov	r3, r9
 8010a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a56:	f7ef fdd7 	bl	8000608 <__aeabi_dmul>
 8010a5a:	9b08      	ldr	r3, [sp, #32]
 8010a5c:	1b9e      	subs	r6, r3, r6
 8010a5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010a62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010a66:	e7e3      	b.n	8010a30 <_strtod_l+0x3f8>
 8010a68:	9b08      	ldr	r3, [sp, #32]
 8010a6a:	3316      	adds	r3, #22
 8010a6c:	db0b      	blt.n	8010a86 <_strtod_l+0x44e>
 8010a6e:	9b05      	ldr	r3, [sp, #20]
 8010a70:	1bdf      	subs	r7, r3, r7
 8010a72:	4b54      	ldr	r3, [pc, #336]	; (8010bc4 <_strtod_l+0x58c>)
 8010a74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a7c:	4640      	mov	r0, r8
 8010a7e:	4649      	mov	r1, r9
 8010a80:	f7ef feec 	bl	800085c <__aeabi_ddiv>
 8010a84:	e7d6      	b.n	8010a34 <_strtod_l+0x3fc>
 8010a86:	9b08      	ldr	r3, [sp, #32]
 8010a88:	1b75      	subs	r5, r6, r5
 8010a8a:	441d      	add	r5, r3
 8010a8c:	2d00      	cmp	r5, #0
 8010a8e:	dd70      	ble.n	8010b72 <_strtod_l+0x53a>
 8010a90:	f015 030f 	ands.w	r3, r5, #15
 8010a94:	d00a      	beq.n	8010aac <_strtod_l+0x474>
 8010a96:	494b      	ldr	r1, [pc, #300]	; (8010bc4 <_strtod_l+0x58c>)
 8010a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a9c:	4642      	mov	r2, r8
 8010a9e:	464b      	mov	r3, r9
 8010aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aa4:	f7ef fdb0 	bl	8000608 <__aeabi_dmul>
 8010aa8:	4680      	mov	r8, r0
 8010aaa:	4689      	mov	r9, r1
 8010aac:	f035 050f 	bics.w	r5, r5, #15
 8010ab0:	d04d      	beq.n	8010b4e <_strtod_l+0x516>
 8010ab2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010ab6:	dd22      	ble.n	8010afe <_strtod_l+0x4c6>
 8010ab8:	2500      	movs	r5, #0
 8010aba:	46ab      	mov	fp, r5
 8010abc:	9509      	str	r5, [sp, #36]	; 0x24
 8010abe:	9505      	str	r5, [sp, #20]
 8010ac0:	2322      	movs	r3, #34	; 0x22
 8010ac2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010bcc <_strtod_l+0x594>
 8010ac6:	6023      	str	r3, [r4, #0]
 8010ac8:	f04f 0800 	mov.w	r8, #0
 8010acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f43f aded 	beq.w	80106ae <_strtod_l+0x76>
 8010ad4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f001 fbd6 	bl	8012288 <_Bfree>
 8010adc:	9905      	ldr	r1, [sp, #20]
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f001 fbd2 	bl	8012288 <_Bfree>
 8010ae4:	4659      	mov	r1, fp
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f001 fbce 	bl	8012288 <_Bfree>
 8010aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010aee:	4620      	mov	r0, r4
 8010af0:	f001 fbca 	bl	8012288 <_Bfree>
 8010af4:	4629      	mov	r1, r5
 8010af6:	4620      	mov	r0, r4
 8010af8:	f001 fbc6 	bl	8012288 <_Bfree>
 8010afc:	e5d7      	b.n	80106ae <_strtod_l+0x76>
 8010afe:	4b32      	ldr	r3, [pc, #200]	; (8010bc8 <_strtod_l+0x590>)
 8010b00:	9304      	str	r3, [sp, #16]
 8010b02:	2300      	movs	r3, #0
 8010b04:	112d      	asrs	r5, r5, #4
 8010b06:	4640      	mov	r0, r8
 8010b08:	4649      	mov	r1, r9
 8010b0a:	469a      	mov	sl, r3
 8010b0c:	2d01      	cmp	r5, #1
 8010b0e:	dc21      	bgt.n	8010b54 <_strtod_l+0x51c>
 8010b10:	b10b      	cbz	r3, 8010b16 <_strtod_l+0x4de>
 8010b12:	4680      	mov	r8, r0
 8010b14:	4689      	mov	r9, r1
 8010b16:	492c      	ldr	r1, [pc, #176]	; (8010bc8 <_strtod_l+0x590>)
 8010b18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010b1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010b20:	4642      	mov	r2, r8
 8010b22:	464b      	mov	r3, r9
 8010b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b28:	f7ef fd6e 	bl	8000608 <__aeabi_dmul>
 8010b2c:	4b27      	ldr	r3, [pc, #156]	; (8010bcc <_strtod_l+0x594>)
 8010b2e:	460a      	mov	r2, r1
 8010b30:	400b      	ands	r3, r1
 8010b32:	4927      	ldr	r1, [pc, #156]	; (8010bd0 <_strtod_l+0x598>)
 8010b34:	428b      	cmp	r3, r1
 8010b36:	4680      	mov	r8, r0
 8010b38:	d8be      	bhi.n	8010ab8 <_strtod_l+0x480>
 8010b3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010b3e:	428b      	cmp	r3, r1
 8010b40:	bf86      	itte	hi
 8010b42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010bd4 <_strtod_l+0x59c>
 8010b46:	f04f 38ff 	movhi.w	r8, #4294967295
 8010b4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9304      	str	r3, [sp, #16]
 8010b52:	e07b      	b.n	8010c4c <_strtod_l+0x614>
 8010b54:	07ea      	lsls	r2, r5, #31
 8010b56:	d505      	bpl.n	8010b64 <_strtod_l+0x52c>
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5e:	f7ef fd53 	bl	8000608 <__aeabi_dmul>
 8010b62:	2301      	movs	r3, #1
 8010b64:	9a04      	ldr	r2, [sp, #16]
 8010b66:	3208      	adds	r2, #8
 8010b68:	f10a 0a01 	add.w	sl, sl, #1
 8010b6c:	106d      	asrs	r5, r5, #1
 8010b6e:	9204      	str	r2, [sp, #16]
 8010b70:	e7cc      	b.n	8010b0c <_strtod_l+0x4d4>
 8010b72:	d0ec      	beq.n	8010b4e <_strtod_l+0x516>
 8010b74:	426d      	negs	r5, r5
 8010b76:	f015 020f 	ands.w	r2, r5, #15
 8010b7a:	d00a      	beq.n	8010b92 <_strtod_l+0x55a>
 8010b7c:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <_strtod_l+0x58c>)
 8010b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b82:	4640      	mov	r0, r8
 8010b84:	4649      	mov	r1, r9
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fe67 	bl	800085c <__aeabi_ddiv>
 8010b8e:	4680      	mov	r8, r0
 8010b90:	4689      	mov	r9, r1
 8010b92:	112d      	asrs	r5, r5, #4
 8010b94:	d0db      	beq.n	8010b4e <_strtod_l+0x516>
 8010b96:	2d1f      	cmp	r5, #31
 8010b98:	dd1e      	ble.n	8010bd8 <_strtod_l+0x5a0>
 8010b9a:	2500      	movs	r5, #0
 8010b9c:	46ab      	mov	fp, r5
 8010b9e:	9509      	str	r5, [sp, #36]	; 0x24
 8010ba0:	9505      	str	r5, [sp, #20]
 8010ba2:	2322      	movs	r3, #34	; 0x22
 8010ba4:	f04f 0800 	mov.w	r8, #0
 8010ba8:	f04f 0900 	mov.w	r9, #0
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	e78d      	b.n	8010acc <_strtod_l+0x494>
 8010bb0:	08021676 	.word	0x08021676
 8010bb4:	08021690 	.word	0x08021690
 8010bb8:	0802166d 	.word	0x0802166d
 8010bbc:	08021670 	.word	0x08021670
 8010bc0:	08021a2a 	.word	0x08021a2a
 8010bc4:	080218e8 	.word	0x080218e8
 8010bc8:	080218c0 	.word	0x080218c0
 8010bcc:	7ff00000 	.word	0x7ff00000
 8010bd0:	7ca00000 	.word	0x7ca00000
 8010bd4:	7fefffff 	.word	0x7fefffff
 8010bd8:	f015 0310 	ands.w	r3, r5, #16
 8010bdc:	bf18      	it	ne
 8010bde:	236a      	movne	r3, #106	; 0x6a
 8010be0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010f84 <_strtod_l+0x94c>
 8010be4:	9304      	str	r3, [sp, #16]
 8010be6:	4640      	mov	r0, r8
 8010be8:	4649      	mov	r1, r9
 8010bea:	2300      	movs	r3, #0
 8010bec:	07ea      	lsls	r2, r5, #31
 8010bee:	d504      	bpl.n	8010bfa <_strtod_l+0x5c2>
 8010bf0:	e9da 2300 	ldrd	r2, r3, [sl]
 8010bf4:	f7ef fd08 	bl	8000608 <__aeabi_dmul>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	106d      	asrs	r5, r5, #1
 8010bfc:	f10a 0a08 	add.w	sl, sl, #8
 8010c00:	d1f4      	bne.n	8010bec <_strtod_l+0x5b4>
 8010c02:	b10b      	cbz	r3, 8010c08 <_strtod_l+0x5d0>
 8010c04:	4680      	mov	r8, r0
 8010c06:	4689      	mov	r9, r1
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	b1bb      	cbz	r3, 8010c3c <_strtod_l+0x604>
 8010c0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010c10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	4649      	mov	r1, r9
 8010c18:	dd10      	ble.n	8010c3c <_strtod_l+0x604>
 8010c1a:	2b1f      	cmp	r3, #31
 8010c1c:	f340 811e 	ble.w	8010e5c <_strtod_l+0x824>
 8010c20:	2b34      	cmp	r3, #52	; 0x34
 8010c22:	bfde      	ittt	le
 8010c24:	f04f 33ff 	movle.w	r3, #4294967295
 8010c28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010c2c:	4093      	lslle	r3, r2
 8010c2e:	f04f 0800 	mov.w	r8, #0
 8010c32:	bfcc      	ite	gt
 8010c34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010c38:	ea03 0901 	andle.w	r9, r3, r1
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4640      	mov	r0, r8
 8010c42:	4649      	mov	r1, r9
 8010c44:	f7ef ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d1a6      	bne.n	8010b9a <_strtod_l+0x562>
 8010c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c52:	4633      	mov	r3, r6
 8010c54:	465a      	mov	r2, fp
 8010c56:	4620      	mov	r0, r4
 8010c58:	f001 fb7e 	bl	8012358 <__s2b>
 8010c5c:	9009      	str	r0, [sp, #36]	; 0x24
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	f43f af2a 	beq.w	8010ab8 <_strtod_l+0x480>
 8010c64:	9a08      	ldr	r2, [sp, #32]
 8010c66:	9b05      	ldr	r3, [sp, #20]
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	eba3 0307 	sub.w	r3, r3, r7
 8010c6e:	bfa8      	it	ge
 8010c70:	2300      	movge	r3, #0
 8010c72:	930c      	str	r3, [sp, #48]	; 0x30
 8010c74:	2500      	movs	r5, #0
 8010c76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010c7a:	9312      	str	r3, [sp, #72]	; 0x48
 8010c7c:	46ab      	mov	fp, r5
 8010c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c80:	4620      	mov	r0, r4
 8010c82:	6859      	ldr	r1, [r3, #4]
 8010c84:	f001 fac0 	bl	8012208 <_Balloc>
 8010c88:	9005      	str	r0, [sp, #20]
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f43f af18 	beq.w	8010ac0 <_strtod_l+0x488>
 8010c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c92:	691a      	ldr	r2, [r3, #16]
 8010c94:	3202      	adds	r2, #2
 8010c96:	f103 010c 	add.w	r1, r3, #12
 8010c9a:	0092      	lsls	r2, r2, #2
 8010c9c:	300c      	adds	r0, #12
 8010c9e:	f000 fe32 	bl	8011906 <memcpy>
 8010ca2:	ec49 8b10 	vmov	d0, r8, r9
 8010ca6:	aa18      	add	r2, sp, #96	; 0x60
 8010ca8:	a917      	add	r1, sp, #92	; 0x5c
 8010caa:	4620      	mov	r0, r4
 8010cac:	f001 fe88 	bl	80129c0 <__d2b>
 8010cb0:	ec49 8b18 	vmov	d8, r8, r9
 8010cb4:	9016      	str	r0, [sp, #88]	; 0x58
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f43f af02 	beq.w	8010ac0 <_strtod_l+0x488>
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f001 fbe2 	bl	8012488 <__i2b>
 8010cc4:	4683      	mov	fp, r0
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	f43f aefa 	beq.w	8010ac0 <_strtod_l+0x488>
 8010ccc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010cce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010cd0:	2e00      	cmp	r6, #0
 8010cd2:	bfab      	itete	ge
 8010cd4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010cd6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010cd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010cda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010cde:	bfac      	ite	ge
 8010ce0:	eb06 0a03 	addge.w	sl, r6, r3
 8010ce4:	1b9f      	sublt	r7, r3, r6
 8010ce6:	9b04      	ldr	r3, [sp, #16]
 8010ce8:	1af6      	subs	r6, r6, r3
 8010cea:	4416      	add	r6, r2
 8010cec:	4ba0      	ldr	r3, [pc, #640]	; (8010f70 <_strtod_l+0x938>)
 8010cee:	3e01      	subs	r6, #1
 8010cf0:	429e      	cmp	r6, r3
 8010cf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010cf6:	f280 80c4 	bge.w	8010e82 <_strtod_l+0x84a>
 8010cfa:	1b9b      	subs	r3, r3, r6
 8010cfc:	2b1f      	cmp	r3, #31
 8010cfe:	eba2 0203 	sub.w	r2, r2, r3
 8010d02:	f04f 0101 	mov.w	r1, #1
 8010d06:	f300 80b0 	bgt.w	8010e6a <_strtod_l+0x832>
 8010d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8010d10:	2300      	movs	r3, #0
 8010d12:	930d      	str	r3, [sp, #52]	; 0x34
 8010d14:	eb0a 0602 	add.w	r6, sl, r2
 8010d18:	9b04      	ldr	r3, [sp, #16]
 8010d1a:	45b2      	cmp	sl, r6
 8010d1c:	4417      	add	r7, r2
 8010d1e:	441f      	add	r7, r3
 8010d20:	4653      	mov	r3, sl
 8010d22:	bfa8      	it	ge
 8010d24:	4633      	movge	r3, r6
 8010d26:	42bb      	cmp	r3, r7
 8010d28:	bfa8      	it	ge
 8010d2a:	463b      	movge	r3, r7
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	bfc2      	ittt	gt
 8010d30:	1af6      	subgt	r6, r6, r3
 8010d32:	1aff      	subgt	r7, r7, r3
 8010d34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	dd17      	ble.n	8010d6e <_strtod_l+0x736>
 8010d3e:	4659      	mov	r1, fp
 8010d40:	461a      	mov	r2, r3
 8010d42:	4620      	mov	r0, r4
 8010d44:	f001 fc60 	bl	8012608 <__pow5mult>
 8010d48:	4683      	mov	fp, r0
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	f43f aeb8 	beq.w	8010ac0 <_strtod_l+0x488>
 8010d50:	4601      	mov	r1, r0
 8010d52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010d54:	4620      	mov	r0, r4
 8010d56:	f001 fbad 	bl	80124b4 <__multiply>
 8010d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	f43f aeaf 	beq.w	8010ac0 <_strtod_l+0x488>
 8010d62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010d64:	4620      	mov	r0, r4
 8010d66:	f001 fa8f 	bl	8012288 <_Bfree>
 8010d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d6c:	9316      	str	r3, [sp, #88]	; 0x58
 8010d6e:	2e00      	cmp	r6, #0
 8010d70:	f300 808c 	bgt.w	8010e8c <_strtod_l+0x854>
 8010d74:	9b08      	ldr	r3, [sp, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	dd08      	ble.n	8010d8c <_strtod_l+0x754>
 8010d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d7c:	9905      	ldr	r1, [sp, #20]
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f001 fc42 	bl	8012608 <__pow5mult>
 8010d84:	9005      	str	r0, [sp, #20]
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f43f ae9a 	beq.w	8010ac0 <_strtod_l+0x488>
 8010d8c:	2f00      	cmp	r7, #0
 8010d8e:	dd08      	ble.n	8010da2 <_strtod_l+0x76a>
 8010d90:	9905      	ldr	r1, [sp, #20]
 8010d92:	463a      	mov	r2, r7
 8010d94:	4620      	mov	r0, r4
 8010d96:	f001 fc91 	bl	80126bc <__lshift>
 8010d9a:	9005      	str	r0, [sp, #20]
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	f43f ae8f 	beq.w	8010ac0 <_strtod_l+0x488>
 8010da2:	f1ba 0f00 	cmp.w	sl, #0
 8010da6:	dd08      	ble.n	8010dba <_strtod_l+0x782>
 8010da8:	4659      	mov	r1, fp
 8010daa:	4652      	mov	r2, sl
 8010dac:	4620      	mov	r0, r4
 8010dae:	f001 fc85 	bl	80126bc <__lshift>
 8010db2:	4683      	mov	fp, r0
 8010db4:	2800      	cmp	r0, #0
 8010db6:	f43f ae83 	beq.w	8010ac0 <_strtod_l+0x488>
 8010dba:	9a05      	ldr	r2, [sp, #20]
 8010dbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f001 fd04 	bl	80127cc <__mdiff>
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f43f ae7a 	beq.w	8010ac0 <_strtod_l+0x488>
 8010dcc:	68c3      	ldr	r3, [r0, #12]
 8010dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	60c3      	str	r3, [r0, #12]
 8010dd4:	4659      	mov	r1, fp
 8010dd6:	f001 fcdd 	bl	8012794 <__mcmp>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	da60      	bge.n	8010ea0 <_strtod_l+0x868>
 8010dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010de0:	ea53 0308 	orrs.w	r3, r3, r8
 8010de4:	f040 8084 	bne.w	8010ef0 <_strtod_l+0x8b8>
 8010de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d17f      	bne.n	8010ef0 <_strtod_l+0x8b8>
 8010df0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010df4:	0d1b      	lsrs	r3, r3, #20
 8010df6:	051b      	lsls	r3, r3, #20
 8010df8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010dfc:	d978      	bls.n	8010ef0 <_strtod_l+0x8b8>
 8010dfe:	696b      	ldr	r3, [r5, #20]
 8010e00:	b913      	cbnz	r3, 8010e08 <_strtod_l+0x7d0>
 8010e02:	692b      	ldr	r3, [r5, #16]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	dd73      	ble.n	8010ef0 <_strtod_l+0x8b8>
 8010e08:	4629      	mov	r1, r5
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f001 fc55 	bl	80126bc <__lshift>
 8010e12:	4659      	mov	r1, fp
 8010e14:	4605      	mov	r5, r0
 8010e16:	f001 fcbd 	bl	8012794 <__mcmp>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	dd68      	ble.n	8010ef0 <_strtod_l+0x8b8>
 8010e1e:	9904      	ldr	r1, [sp, #16]
 8010e20:	4a54      	ldr	r2, [pc, #336]	; (8010f74 <_strtod_l+0x93c>)
 8010e22:	464b      	mov	r3, r9
 8010e24:	2900      	cmp	r1, #0
 8010e26:	f000 8084 	beq.w	8010f32 <_strtod_l+0x8fa>
 8010e2a:	ea02 0109 	and.w	r1, r2, r9
 8010e2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010e32:	dc7e      	bgt.n	8010f32 <_strtod_l+0x8fa>
 8010e34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010e38:	f77f aeb3 	ble.w	8010ba2 <_strtod_l+0x56a>
 8010e3c:	4b4e      	ldr	r3, [pc, #312]	; (8010f78 <_strtod_l+0x940>)
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4649      	mov	r1, r9
 8010e42:	2200      	movs	r2, #0
 8010e44:	f7ef fbe0 	bl	8000608 <__aeabi_dmul>
 8010e48:	4b4a      	ldr	r3, [pc, #296]	; (8010f74 <_strtod_l+0x93c>)
 8010e4a:	400b      	ands	r3, r1
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	4689      	mov	r9, r1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f47f ae3f 	bne.w	8010ad4 <_strtod_l+0x49c>
 8010e56:	2322      	movs	r3, #34	; 0x22
 8010e58:	6023      	str	r3, [r4, #0]
 8010e5a:	e63b      	b.n	8010ad4 <_strtod_l+0x49c>
 8010e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e60:	fa02 f303 	lsl.w	r3, r2, r3
 8010e64:	ea03 0808 	and.w	r8, r3, r8
 8010e68:	e6e8      	b.n	8010c3c <_strtod_l+0x604>
 8010e6a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010e6e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010e72:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010e76:	36e2      	adds	r6, #226	; 0xe2
 8010e78:	fa01 f306 	lsl.w	r3, r1, r6
 8010e7c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010e80:	e748      	b.n	8010d14 <_strtod_l+0x6dc>
 8010e82:	2100      	movs	r1, #0
 8010e84:	2301      	movs	r3, #1
 8010e86:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010e8a:	e743      	b.n	8010d14 <_strtod_l+0x6dc>
 8010e8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010e8e:	4632      	mov	r2, r6
 8010e90:	4620      	mov	r0, r4
 8010e92:	f001 fc13 	bl	80126bc <__lshift>
 8010e96:	9016      	str	r0, [sp, #88]	; 0x58
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	f47f af6b 	bne.w	8010d74 <_strtod_l+0x73c>
 8010e9e:	e60f      	b.n	8010ac0 <_strtod_l+0x488>
 8010ea0:	46ca      	mov	sl, r9
 8010ea2:	d171      	bne.n	8010f88 <_strtod_l+0x950>
 8010ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ea6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010eaa:	b352      	cbz	r2, 8010f02 <_strtod_l+0x8ca>
 8010eac:	4a33      	ldr	r2, [pc, #204]	; (8010f7c <_strtod_l+0x944>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d12a      	bne.n	8010f08 <_strtod_l+0x8d0>
 8010eb2:	9b04      	ldr	r3, [sp, #16]
 8010eb4:	4641      	mov	r1, r8
 8010eb6:	b1fb      	cbz	r3, 8010ef8 <_strtod_l+0x8c0>
 8010eb8:	4b2e      	ldr	r3, [pc, #184]	; (8010f74 <_strtod_l+0x93c>)
 8010eba:	ea09 0303 	and.w	r3, r9, r3
 8010ebe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec6:	d81a      	bhi.n	8010efe <_strtod_l+0x8c6>
 8010ec8:	0d1b      	lsrs	r3, r3, #20
 8010eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010ece:	fa02 f303 	lsl.w	r3, r2, r3
 8010ed2:	4299      	cmp	r1, r3
 8010ed4:	d118      	bne.n	8010f08 <_strtod_l+0x8d0>
 8010ed6:	4b2a      	ldr	r3, [pc, #168]	; (8010f80 <_strtod_l+0x948>)
 8010ed8:	459a      	cmp	sl, r3
 8010eda:	d102      	bne.n	8010ee2 <_strtod_l+0x8aa>
 8010edc:	3101      	adds	r1, #1
 8010ede:	f43f adef 	beq.w	8010ac0 <_strtod_l+0x488>
 8010ee2:	4b24      	ldr	r3, [pc, #144]	; (8010f74 <_strtod_l+0x93c>)
 8010ee4:	ea0a 0303 	and.w	r3, sl, r3
 8010ee8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010eec:	f04f 0800 	mov.w	r8, #0
 8010ef0:	9b04      	ldr	r3, [sp, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d1a2      	bne.n	8010e3c <_strtod_l+0x804>
 8010ef6:	e5ed      	b.n	8010ad4 <_strtod_l+0x49c>
 8010ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8010efc:	e7e9      	b.n	8010ed2 <_strtod_l+0x89a>
 8010efe:	4613      	mov	r3, r2
 8010f00:	e7e7      	b.n	8010ed2 <_strtod_l+0x89a>
 8010f02:	ea53 0308 	orrs.w	r3, r3, r8
 8010f06:	d08a      	beq.n	8010e1e <_strtod_l+0x7e6>
 8010f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f0a:	b1e3      	cbz	r3, 8010f46 <_strtod_l+0x90e>
 8010f0c:	ea13 0f0a 	tst.w	r3, sl
 8010f10:	d0ee      	beq.n	8010ef0 <_strtod_l+0x8b8>
 8010f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f14:	9a04      	ldr	r2, [sp, #16]
 8010f16:	4640      	mov	r0, r8
 8010f18:	4649      	mov	r1, r9
 8010f1a:	b1c3      	cbz	r3, 8010f4e <_strtod_l+0x916>
 8010f1c:	f7ff fb6f 	bl	80105fe <sulp>
 8010f20:	4602      	mov	r2, r0
 8010f22:	460b      	mov	r3, r1
 8010f24:	ec51 0b18 	vmov	r0, r1, d8
 8010f28:	f7ef f9b8 	bl	800029c <__adddf3>
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	4689      	mov	r9, r1
 8010f30:	e7de      	b.n	8010ef0 <_strtod_l+0x8b8>
 8010f32:	4013      	ands	r3, r2
 8010f34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010f38:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010f3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010f40:	f04f 38ff 	mov.w	r8, #4294967295
 8010f44:	e7d4      	b.n	8010ef0 <_strtod_l+0x8b8>
 8010f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f48:	ea13 0f08 	tst.w	r3, r8
 8010f4c:	e7e0      	b.n	8010f10 <_strtod_l+0x8d8>
 8010f4e:	f7ff fb56 	bl	80105fe <sulp>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	ec51 0b18 	vmov	r0, r1, d8
 8010f5a:	f7ef f99d 	bl	8000298 <__aeabi_dsub>
 8010f5e:	2200      	movs	r2, #0
 8010f60:	2300      	movs	r3, #0
 8010f62:	4680      	mov	r8, r0
 8010f64:	4689      	mov	r9, r1
 8010f66:	f7ef fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d0c0      	beq.n	8010ef0 <_strtod_l+0x8b8>
 8010f6e:	e618      	b.n	8010ba2 <_strtod_l+0x56a>
 8010f70:	fffffc02 	.word	0xfffffc02
 8010f74:	7ff00000 	.word	0x7ff00000
 8010f78:	39500000 	.word	0x39500000
 8010f7c:	000fffff 	.word	0x000fffff
 8010f80:	7fefffff 	.word	0x7fefffff
 8010f84:	080216a8 	.word	0x080216a8
 8010f88:	4659      	mov	r1, fp
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f001 fd72 	bl	8012a74 <__ratio>
 8010f90:	ec57 6b10 	vmov	r6, r7, d0
 8010f94:	ee10 0a10 	vmov	r0, s0
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010f9e:	4639      	mov	r1, r7
 8010fa0:	f7ef fdae 	bl	8000b00 <__aeabi_dcmple>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d071      	beq.n	801108c <_strtod_l+0xa54>
 8010fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d17c      	bne.n	80110a8 <_strtod_l+0xa70>
 8010fae:	f1b8 0f00 	cmp.w	r8, #0
 8010fb2:	d15a      	bne.n	801106a <_strtod_l+0xa32>
 8010fb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d15d      	bne.n	8011078 <_strtod_l+0xa40>
 8010fbc:	4b90      	ldr	r3, [pc, #576]	; (8011200 <_strtod_l+0xbc8>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7ef fd92 	bl	8000aec <__aeabi_dcmplt>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d15c      	bne.n	8011086 <_strtod_l+0xa4e>
 8010fcc:	4630      	mov	r0, r6
 8010fce:	4639      	mov	r1, r7
 8010fd0:	4b8c      	ldr	r3, [pc, #560]	; (8011204 <_strtod_l+0xbcc>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f7ef fb18 	bl	8000608 <__aeabi_dmul>
 8010fd8:	4606      	mov	r6, r0
 8010fda:	460f      	mov	r7, r1
 8010fdc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010fe0:	9606      	str	r6, [sp, #24]
 8010fe2:	9307      	str	r3, [sp, #28]
 8010fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010fe8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010fec:	4b86      	ldr	r3, [pc, #536]	; (8011208 <_strtod_l+0xbd0>)
 8010fee:	ea0a 0303 	and.w	r3, sl, r3
 8010ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8010ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ff6:	4b85      	ldr	r3, [pc, #532]	; (801120c <_strtod_l+0xbd4>)
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	f040 8090 	bne.w	801111e <_strtod_l+0xae6>
 8010ffe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8011002:	ec49 8b10 	vmov	d0, r8, r9
 8011006:	f001 fc6b 	bl	80128e0 <__ulp>
 801100a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801100e:	ec51 0b10 	vmov	r0, r1, d0
 8011012:	f7ef faf9 	bl	8000608 <__aeabi_dmul>
 8011016:	4642      	mov	r2, r8
 8011018:	464b      	mov	r3, r9
 801101a:	f7ef f93f 	bl	800029c <__adddf3>
 801101e:	460b      	mov	r3, r1
 8011020:	4979      	ldr	r1, [pc, #484]	; (8011208 <_strtod_l+0xbd0>)
 8011022:	4a7b      	ldr	r2, [pc, #492]	; (8011210 <_strtod_l+0xbd8>)
 8011024:	4019      	ands	r1, r3
 8011026:	4291      	cmp	r1, r2
 8011028:	4680      	mov	r8, r0
 801102a:	d944      	bls.n	80110b6 <_strtod_l+0xa7e>
 801102c:	ee18 2a90 	vmov	r2, s17
 8011030:	4b78      	ldr	r3, [pc, #480]	; (8011214 <_strtod_l+0xbdc>)
 8011032:	429a      	cmp	r2, r3
 8011034:	d104      	bne.n	8011040 <_strtod_l+0xa08>
 8011036:	ee18 3a10 	vmov	r3, s16
 801103a:	3301      	adds	r3, #1
 801103c:	f43f ad40 	beq.w	8010ac0 <_strtod_l+0x488>
 8011040:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8011214 <_strtod_l+0xbdc>
 8011044:	f04f 38ff 	mov.w	r8, #4294967295
 8011048:	9916      	ldr	r1, [sp, #88]	; 0x58
 801104a:	4620      	mov	r0, r4
 801104c:	f001 f91c 	bl	8012288 <_Bfree>
 8011050:	9905      	ldr	r1, [sp, #20]
 8011052:	4620      	mov	r0, r4
 8011054:	f001 f918 	bl	8012288 <_Bfree>
 8011058:	4659      	mov	r1, fp
 801105a:	4620      	mov	r0, r4
 801105c:	f001 f914 	bl	8012288 <_Bfree>
 8011060:	4629      	mov	r1, r5
 8011062:	4620      	mov	r0, r4
 8011064:	f001 f910 	bl	8012288 <_Bfree>
 8011068:	e609      	b.n	8010c7e <_strtod_l+0x646>
 801106a:	f1b8 0f01 	cmp.w	r8, #1
 801106e:	d103      	bne.n	8011078 <_strtod_l+0xa40>
 8011070:	f1b9 0f00 	cmp.w	r9, #0
 8011074:	f43f ad95 	beq.w	8010ba2 <_strtod_l+0x56a>
 8011078:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80111d0 <_strtod_l+0xb98>
 801107c:	4f60      	ldr	r7, [pc, #384]	; (8011200 <_strtod_l+0xbc8>)
 801107e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011082:	2600      	movs	r6, #0
 8011084:	e7ae      	b.n	8010fe4 <_strtod_l+0x9ac>
 8011086:	4f5f      	ldr	r7, [pc, #380]	; (8011204 <_strtod_l+0xbcc>)
 8011088:	2600      	movs	r6, #0
 801108a:	e7a7      	b.n	8010fdc <_strtod_l+0x9a4>
 801108c:	4b5d      	ldr	r3, [pc, #372]	; (8011204 <_strtod_l+0xbcc>)
 801108e:	4630      	mov	r0, r6
 8011090:	4639      	mov	r1, r7
 8011092:	2200      	movs	r2, #0
 8011094:	f7ef fab8 	bl	8000608 <__aeabi_dmul>
 8011098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801109a:	4606      	mov	r6, r0
 801109c:	460f      	mov	r7, r1
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d09c      	beq.n	8010fdc <_strtod_l+0x9a4>
 80110a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80110a6:	e79d      	b.n	8010fe4 <_strtod_l+0x9ac>
 80110a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80111d8 <_strtod_l+0xba0>
 80110ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110b0:	ec57 6b17 	vmov	r6, r7, d7
 80110b4:	e796      	b.n	8010fe4 <_strtod_l+0x9ac>
 80110b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80110ba:	9b04      	ldr	r3, [sp, #16]
 80110bc:	46ca      	mov	sl, r9
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d1c2      	bne.n	8011048 <_strtod_l+0xa10>
 80110c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80110c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110c8:	0d1b      	lsrs	r3, r3, #20
 80110ca:	051b      	lsls	r3, r3, #20
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d1bb      	bne.n	8011048 <_strtod_l+0xa10>
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef fdd0 	bl	8000c78 <__aeabi_d2lz>
 80110d8:	f7ef fa68 	bl	80005ac <__aeabi_l2d>
 80110dc:	4602      	mov	r2, r0
 80110de:	460b      	mov	r3, r1
 80110e0:	4630      	mov	r0, r6
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef f8d8 	bl	8000298 <__aeabi_dsub>
 80110e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110ee:	ea43 0308 	orr.w	r3, r3, r8
 80110f2:	4313      	orrs	r3, r2
 80110f4:	4606      	mov	r6, r0
 80110f6:	460f      	mov	r7, r1
 80110f8:	d054      	beq.n	80111a4 <_strtod_l+0xb6c>
 80110fa:	a339      	add	r3, pc, #228	; (adr r3, 80111e0 <_strtod_l+0xba8>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef fcf4 	bl	8000aec <__aeabi_dcmplt>
 8011104:	2800      	cmp	r0, #0
 8011106:	f47f ace5 	bne.w	8010ad4 <_strtod_l+0x49c>
 801110a:	a337      	add	r3, pc, #220	; (adr r3, 80111e8 <_strtod_l+0xbb0>)
 801110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011110:	4630      	mov	r0, r6
 8011112:	4639      	mov	r1, r7
 8011114:	f7ef fd08 	bl	8000b28 <__aeabi_dcmpgt>
 8011118:	2800      	cmp	r0, #0
 801111a:	d095      	beq.n	8011048 <_strtod_l+0xa10>
 801111c:	e4da      	b.n	8010ad4 <_strtod_l+0x49c>
 801111e:	9b04      	ldr	r3, [sp, #16]
 8011120:	b333      	cbz	r3, 8011170 <_strtod_l+0xb38>
 8011122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011124:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011128:	d822      	bhi.n	8011170 <_strtod_l+0xb38>
 801112a:	a331      	add	r3, pc, #196	; (adr r3, 80111f0 <_strtod_l+0xbb8>)
 801112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011130:	4630      	mov	r0, r6
 8011132:	4639      	mov	r1, r7
 8011134:	f7ef fce4 	bl	8000b00 <__aeabi_dcmple>
 8011138:	b1a0      	cbz	r0, 8011164 <_strtod_l+0xb2c>
 801113a:	4639      	mov	r1, r7
 801113c:	4630      	mov	r0, r6
 801113e:	f7ef fd13 	bl	8000b68 <__aeabi_d2uiz>
 8011142:	2801      	cmp	r0, #1
 8011144:	bf38      	it	cc
 8011146:	2001      	movcc	r0, #1
 8011148:	f7ef f9e4 	bl	8000514 <__aeabi_ui2d>
 801114c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801114e:	4606      	mov	r6, r0
 8011150:	460f      	mov	r7, r1
 8011152:	bb23      	cbnz	r3, 801119e <_strtod_l+0xb66>
 8011154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011158:	9010      	str	r0, [sp, #64]	; 0x40
 801115a:	9311      	str	r3, [sp, #68]	; 0x44
 801115c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011160:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011168:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011170:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011174:	eeb0 0a48 	vmov.f32	s0, s16
 8011178:	eef0 0a68 	vmov.f32	s1, s17
 801117c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011180:	f001 fbae 	bl	80128e0 <__ulp>
 8011184:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011188:	ec53 2b10 	vmov	r2, r3, d0
 801118c:	f7ef fa3c 	bl	8000608 <__aeabi_dmul>
 8011190:	ec53 2b18 	vmov	r2, r3, d8
 8011194:	f7ef f882 	bl	800029c <__adddf3>
 8011198:	4680      	mov	r8, r0
 801119a:	4689      	mov	r9, r1
 801119c:	e78d      	b.n	80110ba <_strtod_l+0xa82>
 801119e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80111a2:	e7db      	b.n	801115c <_strtod_l+0xb24>
 80111a4:	a314      	add	r3, pc, #80	; (adr r3, 80111f8 <_strtod_l+0xbc0>)
 80111a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111aa:	f7ef fc9f 	bl	8000aec <__aeabi_dcmplt>
 80111ae:	e7b3      	b.n	8011118 <_strtod_l+0xae0>
 80111b0:	2300      	movs	r3, #0
 80111b2:	930a      	str	r3, [sp, #40]	; 0x28
 80111b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80111b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111b8:	6013      	str	r3, [r2, #0]
 80111ba:	f7ff ba7c 	b.w	80106b6 <_strtod_l+0x7e>
 80111be:	2a65      	cmp	r2, #101	; 0x65
 80111c0:	f43f ab75 	beq.w	80108ae <_strtod_l+0x276>
 80111c4:	2a45      	cmp	r2, #69	; 0x45
 80111c6:	f43f ab72 	beq.w	80108ae <_strtod_l+0x276>
 80111ca:	2301      	movs	r3, #1
 80111cc:	f7ff bbaa 	b.w	8010924 <_strtod_l+0x2ec>
 80111d0:	00000000 	.word	0x00000000
 80111d4:	bff00000 	.word	0xbff00000
 80111d8:	00000000 	.word	0x00000000
 80111dc:	3ff00000 	.word	0x3ff00000
 80111e0:	94a03595 	.word	0x94a03595
 80111e4:	3fdfffff 	.word	0x3fdfffff
 80111e8:	35afe535 	.word	0x35afe535
 80111ec:	3fe00000 	.word	0x3fe00000
 80111f0:	ffc00000 	.word	0xffc00000
 80111f4:	41dfffff 	.word	0x41dfffff
 80111f8:	94a03595 	.word	0x94a03595
 80111fc:	3fcfffff 	.word	0x3fcfffff
 8011200:	3ff00000 	.word	0x3ff00000
 8011204:	3fe00000 	.word	0x3fe00000
 8011208:	7ff00000 	.word	0x7ff00000
 801120c:	7fe00000 	.word	0x7fe00000
 8011210:	7c9fffff 	.word	0x7c9fffff
 8011214:	7fefffff 	.word	0x7fefffff

08011218 <strtof>:
 8011218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80112e0 <strtof+0xc8>
 8011220:	4b2a      	ldr	r3, [pc, #168]	; (80112cc <strtof+0xb4>)
 8011222:	460a      	mov	r2, r1
 8011224:	ed2d 8b02 	vpush	{d8}
 8011228:	4601      	mov	r1, r0
 801122a:	f8d8 0000 	ldr.w	r0, [r8]
 801122e:	f7ff fa03 	bl	8010638 <_strtod_l>
 8011232:	ec55 4b10 	vmov	r4, r5, d0
 8011236:	ee10 2a10 	vmov	r2, s0
 801123a:	ee10 0a10 	vmov	r0, s0
 801123e:	462b      	mov	r3, r5
 8011240:	4629      	mov	r1, r5
 8011242:	f7ef fc7b 	bl	8000b3c <__aeabi_dcmpun>
 8011246:	b190      	cbz	r0, 801126e <strtof+0x56>
 8011248:	2d00      	cmp	r5, #0
 801124a:	4821      	ldr	r0, [pc, #132]	; (80112d0 <strtof+0xb8>)
 801124c:	da09      	bge.n	8011262 <strtof+0x4a>
 801124e:	f000 fb73 	bl	8011938 <nanf>
 8011252:	eeb1 8a40 	vneg.f32	s16, s0
 8011256:	eeb0 0a48 	vmov.f32	s0, s16
 801125a:	ecbd 8b02 	vpop	{d8}
 801125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011262:	ecbd 8b02 	vpop	{d8}
 8011266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801126a:	f000 bb65 	b.w	8011938 <nanf>
 801126e:	4620      	mov	r0, r4
 8011270:	4629      	mov	r1, r5
 8011272:	f7ef fc99 	bl	8000ba8 <__aeabi_d2f>
 8011276:	ee08 0a10 	vmov	s16, r0
 801127a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80112d4 <strtof+0xbc>
 801127e:	eeb0 7ac8 	vabs.f32	s14, s16
 8011282:	eeb4 7a67 	vcmp.f32	s14, s15
 8011286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128a:	dd11      	ble.n	80112b0 <strtof+0x98>
 801128c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011290:	4b11      	ldr	r3, [pc, #68]	; (80112d8 <strtof+0xc0>)
 8011292:	f04f 32ff 	mov.w	r2, #4294967295
 8011296:	4620      	mov	r0, r4
 8011298:	4639      	mov	r1, r7
 801129a:	f7ef fc4f 	bl	8000b3c <__aeabi_dcmpun>
 801129e:	b980      	cbnz	r0, 80112c2 <strtof+0xaa>
 80112a0:	4b0d      	ldr	r3, [pc, #52]	; (80112d8 <strtof+0xc0>)
 80112a2:	f04f 32ff 	mov.w	r2, #4294967295
 80112a6:	4620      	mov	r0, r4
 80112a8:	4639      	mov	r1, r7
 80112aa:	f7ef fc29 	bl	8000b00 <__aeabi_dcmple>
 80112ae:	b940      	cbnz	r0, 80112c2 <strtof+0xaa>
 80112b0:	ee18 3a10 	vmov	r3, s16
 80112b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80112b8:	d1cd      	bne.n	8011256 <strtof+0x3e>
 80112ba:	4b08      	ldr	r3, [pc, #32]	; (80112dc <strtof+0xc4>)
 80112bc:	402b      	ands	r3, r5
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0c9      	beq.n	8011256 <strtof+0x3e>
 80112c2:	f8d8 3000 	ldr.w	r3, [r8]
 80112c6:	2222      	movs	r2, #34	; 0x22
 80112c8:	601a      	str	r2, [r3, #0]
 80112ca:	e7c4      	b.n	8011256 <strtof+0x3e>
 80112cc:	200001dc 	.word	0x200001dc
 80112d0:	08021a2a 	.word	0x08021a2a
 80112d4:	7f7fffff 	.word	0x7f7fffff
 80112d8:	7fefffff 	.word	0x7fefffff
 80112dc:	7ff00000 	.word	0x7ff00000
 80112e0:	20000394 	.word	0x20000394

080112e4 <_strtoul_l.constprop.0>:
 80112e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112e8:	4f36      	ldr	r7, [pc, #216]	; (80113c4 <_strtoul_l.constprop.0+0xe0>)
 80112ea:	4686      	mov	lr, r0
 80112ec:	460d      	mov	r5, r1
 80112ee:	4628      	mov	r0, r5
 80112f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112f4:	5d3e      	ldrb	r6, [r7, r4]
 80112f6:	f016 0608 	ands.w	r6, r6, #8
 80112fa:	d1f8      	bne.n	80112ee <_strtoul_l.constprop.0+0xa>
 80112fc:	2c2d      	cmp	r4, #45	; 0x2d
 80112fe:	d130      	bne.n	8011362 <_strtoul_l.constprop.0+0x7e>
 8011300:	782c      	ldrb	r4, [r5, #0]
 8011302:	2601      	movs	r6, #1
 8011304:	1c85      	adds	r5, r0, #2
 8011306:	2b00      	cmp	r3, #0
 8011308:	d057      	beq.n	80113ba <_strtoul_l.constprop.0+0xd6>
 801130a:	2b10      	cmp	r3, #16
 801130c:	d109      	bne.n	8011322 <_strtoul_l.constprop.0+0x3e>
 801130e:	2c30      	cmp	r4, #48	; 0x30
 8011310:	d107      	bne.n	8011322 <_strtoul_l.constprop.0+0x3e>
 8011312:	7828      	ldrb	r0, [r5, #0]
 8011314:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011318:	2858      	cmp	r0, #88	; 0x58
 801131a:	d149      	bne.n	80113b0 <_strtoul_l.constprop.0+0xcc>
 801131c:	786c      	ldrb	r4, [r5, #1]
 801131e:	2310      	movs	r3, #16
 8011320:	3502      	adds	r5, #2
 8011322:	f04f 38ff 	mov.w	r8, #4294967295
 8011326:	2700      	movs	r7, #0
 8011328:	fbb8 f8f3 	udiv	r8, r8, r3
 801132c:	fb03 f908 	mul.w	r9, r3, r8
 8011330:	ea6f 0909 	mvn.w	r9, r9
 8011334:	4638      	mov	r0, r7
 8011336:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801133a:	f1bc 0f09 	cmp.w	ip, #9
 801133e:	d815      	bhi.n	801136c <_strtoul_l.constprop.0+0x88>
 8011340:	4664      	mov	r4, ip
 8011342:	42a3      	cmp	r3, r4
 8011344:	dd23      	ble.n	801138e <_strtoul_l.constprop.0+0xaa>
 8011346:	f1b7 3fff 	cmp.w	r7, #4294967295
 801134a:	d007      	beq.n	801135c <_strtoul_l.constprop.0+0x78>
 801134c:	4580      	cmp	r8, r0
 801134e:	d31b      	bcc.n	8011388 <_strtoul_l.constprop.0+0xa4>
 8011350:	d101      	bne.n	8011356 <_strtoul_l.constprop.0+0x72>
 8011352:	45a1      	cmp	r9, r4
 8011354:	db18      	blt.n	8011388 <_strtoul_l.constprop.0+0xa4>
 8011356:	fb00 4003 	mla	r0, r0, r3, r4
 801135a:	2701      	movs	r7, #1
 801135c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011360:	e7e9      	b.n	8011336 <_strtoul_l.constprop.0+0x52>
 8011362:	2c2b      	cmp	r4, #43	; 0x2b
 8011364:	bf04      	itt	eq
 8011366:	782c      	ldrbeq	r4, [r5, #0]
 8011368:	1c85      	addeq	r5, r0, #2
 801136a:	e7cc      	b.n	8011306 <_strtoul_l.constprop.0+0x22>
 801136c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011370:	f1bc 0f19 	cmp.w	ip, #25
 8011374:	d801      	bhi.n	801137a <_strtoul_l.constprop.0+0x96>
 8011376:	3c37      	subs	r4, #55	; 0x37
 8011378:	e7e3      	b.n	8011342 <_strtoul_l.constprop.0+0x5e>
 801137a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801137e:	f1bc 0f19 	cmp.w	ip, #25
 8011382:	d804      	bhi.n	801138e <_strtoul_l.constprop.0+0xaa>
 8011384:	3c57      	subs	r4, #87	; 0x57
 8011386:	e7dc      	b.n	8011342 <_strtoul_l.constprop.0+0x5e>
 8011388:	f04f 37ff 	mov.w	r7, #4294967295
 801138c:	e7e6      	b.n	801135c <_strtoul_l.constprop.0+0x78>
 801138e:	1c7b      	adds	r3, r7, #1
 8011390:	d106      	bne.n	80113a0 <_strtoul_l.constprop.0+0xbc>
 8011392:	2322      	movs	r3, #34	; 0x22
 8011394:	f8ce 3000 	str.w	r3, [lr]
 8011398:	4638      	mov	r0, r7
 801139a:	b932      	cbnz	r2, 80113aa <_strtoul_l.constprop.0+0xc6>
 801139c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113a0:	b106      	cbz	r6, 80113a4 <_strtoul_l.constprop.0+0xc0>
 80113a2:	4240      	negs	r0, r0
 80113a4:	2a00      	cmp	r2, #0
 80113a6:	d0f9      	beq.n	801139c <_strtoul_l.constprop.0+0xb8>
 80113a8:	b107      	cbz	r7, 80113ac <_strtoul_l.constprop.0+0xc8>
 80113aa:	1e69      	subs	r1, r5, #1
 80113ac:	6011      	str	r1, [r2, #0]
 80113ae:	e7f5      	b.n	801139c <_strtoul_l.constprop.0+0xb8>
 80113b0:	2430      	movs	r4, #48	; 0x30
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1b5      	bne.n	8011322 <_strtoul_l.constprop.0+0x3e>
 80113b6:	2308      	movs	r3, #8
 80113b8:	e7b3      	b.n	8011322 <_strtoul_l.constprop.0+0x3e>
 80113ba:	2c30      	cmp	r4, #48	; 0x30
 80113bc:	d0a9      	beq.n	8011312 <_strtoul_l.constprop.0+0x2e>
 80113be:	230a      	movs	r3, #10
 80113c0:	e7af      	b.n	8011322 <_strtoul_l.constprop.0+0x3e>
 80113c2:	bf00      	nop
 80113c4:	080216d1 	.word	0x080216d1

080113c8 <strtoul>:
 80113c8:	4613      	mov	r3, r2
 80113ca:	460a      	mov	r2, r1
 80113cc:	4601      	mov	r1, r0
 80113ce:	4802      	ldr	r0, [pc, #8]	; (80113d8 <strtoul+0x10>)
 80113d0:	6800      	ldr	r0, [r0, #0]
 80113d2:	f7ff bf87 	b.w	80112e4 <_strtoul_l.constprop.0>
 80113d6:	bf00      	nop
 80113d8:	20000394 	.word	0x20000394

080113dc <std>:
 80113dc:	2300      	movs	r3, #0
 80113de:	b510      	push	{r4, lr}
 80113e0:	4604      	mov	r4, r0
 80113e2:	e9c0 3300 	strd	r3, r3, [r0]
 80113e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113ea:	6083      	str	r3, [r0, #8]
 80113ec:	8181      	strh	r1, [r0, #12]
 80113ee:	6643      	str	r3, [r0, #100]	; 0x64
 80113f0:	81c2      	strh	r2, [r0, #14]
 80113f2:	6183      	str	r3, [r0, #24]
 80113f4:	4619      	mov	r1, r3
 80113f6:	2208      	movs	r2, #8
 80113f8:	305c      	adds	r0, #92	; 0x5c
 80113fa:	f000 f9c3 	bl	8011784 <memset>
 80113fe:	4b0d      	ldr	r3, [pc, #52]	; (8011434 <std+0x58>)
 8011400:	6263      	str	r3, [r4, #36]	; 0x24
 8011402:	4b0d      	ldr	r3, [pc, #52]	; (8011438 <std+0x5c>)
 8011404:	62a3      	str	r3, [r4, #40]	; 0x28
 8011406:	4b0d      	ldr	r3, [pc, #52]	; (801143c <std+0x60>)
 8011408:	62e3      	str	r3, [r4, #44]	; 0x2c
 801140a:	4b0d      	ldr	r3, [pc, #52]	; (8011440 <std+0x64>)
 801140c:	6323      	str	r3, [r4, #48]	; 0x30
 801140e:	4b0d      	ldr	r3, [pc, #52]	; (8011444 <std+0x68>)
 8011410:	6224      	str	r4, [r4, #32]
 8011412:	429c      	cmp	r4, r3
 8011414:	d006      	beq.n	8011424 <std+0x48>
 8011416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801141a:	4294      	cmp	r4, r2
 801141c:	d002      	beq.n	8011424 <std+0x48>
 801141e:	33d0      	adds	r3, #208	; 0xd0
 8011420:	429c      	cmp	r4, r3
 8011422:	d105      	bne.n	8011430 <std+0x54>
 8011424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801142c:	f000 ba60 	b.w	80118f0 <__retarget_lock_init_recursive>
 8011430:	bd10      	pop	{r4, pc}
 8011432:	bf00      	nop
 8011434:	08011561 	.word	0x08011561
 8011438:	08011583 	.word	0x08011583
 801143c:	080115bb 	.word	0x080115bb
 8011440:	080115df 	.word	0x080115df
 8011444:	20002b0c 	.word	0x20002b0c

08011448 <stdio_exit_handler>:
 8011448:	4a02      	ldr	r2, [pc, #8]	; (8011454 <stdio_exit_handler+0xc>)
 801144a:	4903      	ldr	r1, [pc, #12]	; (8011458 <stdio_exit_handler+0x10>)
 801144c:	4803      	ldr	r0, [pc, #12]	; (801145c <stdio_exit_handler+0x14>)
 801144e:	f000 b869 	b.w	8011524 <_fwalk_sglue>
 8011452:	bf00      	nop
 8011454:	200001d0 	.word	0x200001d0
 8011458:	08013259 	.word	0x08013259
 801145c:	20000348 	.word	0x20000348

08011460 <cleanup_stdio>:
 8011460:	6841      	ldr	r1, [r0, #4]
 8011462:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <cleanup_stdio+0x34>)
 8011464:	4299      	cmp	r1, r3
 8011466:	b510      	push	{r4, lr}
 8011468:	4604      	mov	r4, r0
 801146a:	d001      	beq.n	8011470 <cleanup_stdio+0x10>
 801146c:	f001 fef4 	bl	8013258 <_fflush_r>
 8011470:	68a1      	ldr	r1, [r4, #8]
 8011472:	4b09      	ldr	r3, [pc, #36]	; (8011498 <cleanup_stdio+0x38>)
 8011474:	4299      	cmp	r1, r3
 8011476:	d002      	beq.n	801147e <cleanup_stdio+0x1e>
 8011478:	4620      	mov	r0, r4
 801147a:	f001 feed 	bl	8013258 <_fflush_r>
 801147e:	68e1      	ldr	r1, [r4, #12]
 8011480:	4b06      	ldr	r3, [pc, #24]	; (801149c <cleanup_stdio+0x3c>)
 8011482:	4299      	cmp	r1, r3
 8011484:	d004      	beq.n	8011490 <cleanup_stdio+0x30>
 8011486:	4620      	mov	r0, r4
 8011488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801148c:	f001 bee4 	b.w	8013258 <_fflush_r>
 8011490:	bd10      	pop	{r4, pc}
 8011492:	bf00      	nop
 8011494:	20002b0c 	.word	0x20002b0c
 8011498:	20002b74 	.word	0x20002b74
 801149c:	20002bdc 	.word	0x20002bdc

080114a0 <global_stdio_init.part.0>:
 80114a0:	b510      	push	{r4, lr}
 80114a2:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <global_stdio_init.part.0+0x30>)
 80114a4:	4c0b      	ldr	r4, [pc, #44]	; (80114d4 <global_stdio_init.part.0+0x34>)
 80114a6:	4a0c      	ldr	r2, [pc, #48]	; (80114d8 <global_stdio_init.part.0+0x38>)
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	4620      	mov	r0, r4
 80114ac:	2200      	movs	r2, #0
 80114ae:	2104      	movs	r1, #4
 80114b0:	f7ff ff94 	bl	80113dc <std>
 80114b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80114b8:	2201      	movs	r2, #1
 80114ba:	2109      	movs	r1, #9
 80114bc:	f7ff ff8e 	bl	80113dc <std>
 80114c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80114c4:	2202      	movs	r2, #2
 80114c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ca:	2112      	movs	r1, #18
 80114cc:	f7ff bf86 	b.w	80113dc <std>
 80114d0:	20002c44 	.word	0x20002c44
 80114d4:	20002b0c 	.word	0x20002b0c
 80114d8:	08011449 	.word	0x08011449

080114dc <__sfp_lock_acquire>:
 80114dc:	4801      	ldr	r0, [pc, #4]	; (80114e4 <__sfp_lock_acquire+0x8>)
 80114de:	f000 ba08 	b.w	80118f2 <__retarget_lock_acquire_recursive>
 80114e2:	bf00      	nop
 80114e4:	20002c4d 	.word	0x20002c4d

080114e8 <__sfp_lock_release>:
 80114e8:	4801      	ldr	r0, [pc, #4]	; (80114f0 <__sfp_lock_release+0x8>)
 80114ea:	f000 ba03 	b.w	80118f4 <__retarget_lock_release_recursive>
 80114ee:	bf00      	nop
 80114f0:	20002c4d 	.word	0x20002c4d

080114f4 <__sinit>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	4604      	mov	r4, r0
 80114f8:	f7ff fff0 	bl	80114dc <__sfp_lock_acquire>
 80114fc:	6a23      	ldr	r3, [r4, #32]
 80114fe:	b11b      	cbz	r3, 8011508 <__sinit+0x14>
 8011500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011504:	f7ff bff0 	b.w	80114e8 <__sfp_lock_release>
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <__sinit+0x28>)
 801150a:	6223      	str	r3, [r4, #32]
 801150c:	4b04      	ldr	r3, [pc, #16]	; (8011520 <__sinit+0x2c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1f5      	bne.n	8011500 <__sinit+0xc>
 8011514:	f7ff ffc4 	bl	80114a0 <global_stdio_init.part.0>
 8011518:	e7f2      	b.n	8011500 <__sinit+0xc>
 801151a:	bf00      	nop
 801151c:	08011461 	.word	0x08011461
 8011520:	20002c44 	.word	0x20002c44

08011524 <_fwalk_sglue>:
 8011524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011528:	4607      	mov	r7, r0
 801152a:	4688      	mov	r8, r1
 801152c:	4614      	mov	r4, r2
 801152e:	2600      	movs	r6, #0
 8011530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011534:	f1b9 0901 	subs.w	r9, r9, #1
 8011538:	d505      	bpl.n	8011546 <_fwalk_sglue+0x22>
 801153a:	6824      	ldr	r4, [r4, #0]
 801153c:	2c00      	cmp	r4, #0
 801153e:	d1f7      	bne.n	8011530 <_fwalk_sglue+0xc>
 8011540:	4630      	mov	r0, r6
 8011542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011546:	89ab      	ldrh	r3, [r5, #12]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d907      	bls.n	801155c <_fwalk_sglue+0x38>
 801154c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011550:	3301      	adds	r3, #1
 8011552:	d003      	beq.n	801155c <_fwalk_sglue+0x38>
 8011554:	4629      	mov	r1, r5
 8011556:	4638      	mov	r0, r7
 8011558:	47c0      	blx	r8
 801155a:	4306      	orrs	r6, r0
 801155c:	3568      	adds	r5, #104	; 0x68
 801155e:	e7e9      	b.n	8011534 <_fwalk_sglue+0x10>

08011560 <__sread>:
 8011560:	b510      	push	{r4, lr}
 8011562:	460c      	mov	r4, r1
 8011564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011568:	f000 f974 	bl	8011854 <_read_r>
 801156c:	2800      	cmp	r0, #0
 801156e:	bfab      	itete	ge
 8011570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011572:	89a3      	ldrhlt	r3, [r4, #12]
 8011574:	181b      	addge	r3, r3, r0
 8011576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801157a:	bfac      	ite	ge
 801157c:	6563      	strge	r3, [r4, #84]	; 0x54
 801157e:	81a3      	strhlt	r3, [r4, #12]
 8011580:	bd10      	pop	{r4, pc}

08011582 <__swrite>:
 8011582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011586:	461f      	mov	r7, r3
 8011588:	898b      	ldrh	r3, [r1, #12]
 801158a:	05db      	lsls	r3, r3, #23
 801158c:	4605      	mov	r5, r0
 801158e:	460c      	mov	r4, r1
 8011590:	4616      	mov	r6, r2
 8011592:	d505      	bpl.n	80115a0 <__swrite+0x1e>
 8011594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011598:	2302      	movs	r3, #2
 801159a:	2200      	movs	r2, #0
 801159c:	f000 f948 	bl	8011830 <_lseek_r>
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115aa:	81a3      	strh	r3, [r4, #12]
 80115ac:	4632      	mov	r2, r6
 80115ae:	463b      	mov	r3, r7
 80115b0:	4628      	mov	r0, r5
 80115b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b6:	f000 b95f 	b.w	8011878 <_write_r>

080115ba <__sseek>:
 80115ba:	b510      	push	{r4, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115c2:	f000 f935 	bl	8011830 <_lseek_r>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	89a3      	ldrh	r3, [r4, #12]
 80115ca:	bf15      	itete	ne
 80115cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115d6:	81a3      	strheq	r3, [r4, #12]
 80115d8:	bf18      	it	ne
 80115da:	81a3      	strhne	r3, [r4, #12]
 80115dc:	bd10      	pop	{r4, pc}

080115de <__sclose>:
 80115de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e2:	f000 b915 	b.w	8011810 <_close_r>

080115e6 <_vsniprintf_r>:
 80115e6:	b530      	push	{r4, r5, lr}
 80115e8:	4614      	mov	r4, r2
 80115ea:	2c00      	cmp	r4, #0
 80115ec:	b09b      	sub	sp, #108	; 0x6c
 80115ee:	4605      	mov	r5, r0
 80115f0:	461a      	mov	r2, r3
 80115f2:	da05      	bge.n	8011600 <_vsniprintf_r+0x1a>
 80115f4:	238b      	movs	r3, #139	; 0x8b
 80115f6:	6003      	str	r3, [r0, #0]
 80115f8:	f04f 30ff 	mov.w	r0, #4294967295
 80115fc:	b01b      	add	sp, #108	; 0x6c
 80115fe:	bd30      	pop	{r4, r5, pc}
 8011600:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011604:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011608:	bf14      	ite	ne
 801160a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801160e:	4623      	moveq	r3, r4
 8011610:	9302      	str	r3, [sp, #8]
 8011612:	9305      	str	r3, [sp, #20]
 8011614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011618:	9100      	str	r1, [sp, #0]
 801161a:	9104      	str	r1, [sp, #16]
 801161c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011620:	4669      	mov	r1, sp
 8011622:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011624:	f001 fb04 	bl	8012c30 <_svfiprintf_r>
 8011628:	1c43      	adds	r3, r0, #1
 801162a:	bfbc      	itt	lt
 801162c:	238b      	movlt	r3, #139	; 0x8b
 801162e:	602b      	strlt	r3, [r5, #0]
 8011630:	2c00      	cmp	r4, #0
 8011632:	d0e3      	beq.n	80115fc <_vsniprintf_r+0x16>
 8011634:	9b00      	ldr	r3, [sp, #0]
 8011636:	2200      	movs	r2, #0
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	e7df      	b.n	80115fc <_vsniprintf_r+0x16>

0801163c <vsniprintf>:
 801163c:	b507      	push	{r0, r1, r2, lr}
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	4613      	mov	r3, r2
 8011642:	460a      	mov	r2, r1
 8011644:	4601      	mov	r1, r0
 8011646:	4803      	ldr	r0, [pc, #12]	; (8011654 <vsniprintf+0x18>)
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	f7ff ffcc 	bl	80115e6 <_vsniprintf_r>
 801164e:	b003      	add	sp, #12
 8011650:	f85d fb04 	ldr.w	pc, [sp], #4
 8011654:	20000394 	.word	0x20000394

08011658 <__swbuf_r>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	460e      	mov	r6, r1
 801165c:	4614      	mov	r4, r2
 801165e:	4605      	mov	r5, r0
 8011660:	b118      	cbz	r0, 801166a <__swbuf_r+0x12>
 8011662:	6a03      	ldr	r3, [r0, #32]
 8011664:	b90b      	cbnz	r3, 801166a <__swbuf_r+0x12>
 8011666:	f7ff ff45 	bl	80114f4 <__sinit>
 801166a:	69a3      	ldr	r3, [r4, #24]
 801166c:	60a3      	str	r3, [r4, #8]
 801166e:	89a3      	ldrh	r3, [r4, #12]
 8011670:	071a      	lsls	r2, r3, #28
 8011672:	d525      	bpl.n	80116c0 <__swbuf_r+0x68>
 8011674:	6923      	ldr	r3, [r4, #16]
 8011676:	b31b      	cbz	r3, 80116c0 <__swbuf_r+0x68>
 8011678:	6823      	ldr	r3, [r4, #0]
 801167a:	6922      	ldr	r2, [r4, #16]
 801167c:	1a98      	subs	r0, r3, r2
 801167e:	6963      	ldr	r3, [r4, #20]
 8011680:	b2f6      	uxtb	r6, r6
 8011682:	4283      	cmp	r3, r0
 8011684:	4637      	mov	r7, r6
 8011686:	dc04      	bgt.n	8011692 <__swbuf_r+0x3a>
 8011688:	4621      	mov	r1, r4
 801168a:	4628      	mov	r0, r5
 801168c:	f001 fde4 	bl	8013258 <_fflush_r>
 8011690:	b9e0      	cbnz	r0, 80116cc <__swbuf_r+0x74>
 8011692:	68a3      	ldr	r3, [r4, #8]
 8011694:	3b01      	subs	r3, #1
 8011696:	60a3      	str	r3, [r4, #8]
 8011698:	6823      	ldr	r3, [r4, #0]
 801169a:	1c5a      	adds	r2, r3, #1
 801169c:	6022      	str	r2, [r4, #0]
 801169e:	701e      	strb	r6, [r3, #0]
 80116a0:	6962      	ldr	r2, [r4, #20]
 80116a2:	1c43      	adds	r3, r0, #1
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d004      	beq.n	80116b2 <__swbuf_r+0x5a>
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	07db      	lsls	r3, r3, #31
 80116ac:	d506      	bpl.n	80116bc <__swbuf_r+0x64>
 80116ae:	2e0a      	cmp	r6, #10
 80116b0:	d104      	bne.n	80116bc <__swbuf_r+0x64>
 80116b2:	4621      	mov	r1, r4
 80116b4:	4628      	mov	r0, r5
 80116b6:	f001 fdcf 	bl	8013258 <_fflush_r>
 80116ba:	b938      	cbnz	r0, 80116cc <__swbuf_r+0x74>
 80116bc:	4638      	mov	r0, r7
 80116be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116c0:	4621      	mov	r1, r4
 80116c2:	4628      	mov	r0, r5
 80116c4:	f000 f806 	bl	80116d4 <__swsetup_r>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	d0d5      	beq.n	8011678 <__swbuf_r+0x20>
 80116cc:	f04f 37ff 	mov.w	r7, #4294967295
 80116d0:	e7f4      	b.n	80116bc <__swbuf_r+0x64>
	...

080116d4 <__swsetup_r>:
 80116d4:	b538      	push	{r3, r4, r5, lr}
 80116d6:	4b2a      	ldr	r3, [pc, #168]	; (8011780 <__swsetup_r+0xac>)
 80116d8:	4605      	mov	r5, r0
 80116da:	6818      	ldr	r0, [r3, #0]
 80116dc:	460c      	mov	r4, r1
 80116de:	b118      	cbz	r0, 80116e8 <__swsetup_r+0x14>
 80116e0:	6a03      	ldr	r3, [r0, #32]
 80116e2:	b90b      	cbnz	r3, 80116e8 <__swsetup_r+0x14>
 80116e4:	f7ff ff06 	bl	80114f4 <__sinit>
 80116e8:	89a3      	ldrh	r3, [r4, #12]
 80116ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116ee:	0718      	lsls	r0, r3, #28
 80116f0:	d422      	bmi.n	8011738 <__swsetup_r+0x64>
 80116f2:	06d9      	lsls	r1, r3, #27
 80116f4:	d407      	bmi.n	8011706 <__swsetup_r+0x32>
 80116f6:	2309      	movs	r3, #9
 80116f8:	602b      	str	r3, [r5, #0]
 80116fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116fe:	81a3      	strh	r3, [r4, #12]
 8011700:	f04f 30ff 	mov.w	r0, #4294967295
 8011704:	e034      	b.n	8011770 <__swsetup_r+0x9c>
 8011706:	0758      	lsls	r0, r3, #29
 8011708:	d512      	bpl.n	8011730 <__swsetup_r+0x5c>
 801170a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801170c:	b141      	cbz	r1, 8011720 <__swsetup_r+0x4c>
 801170e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011712:	4299      	cmp	r1, r3
 8011714:	d002      	beq.n	801171c <__swsetup_r+0x48>
 8011716:	4628      	mov	r0, r5
 8011718:	f000 f914 	bl	8011944 <_free_r>
 801171c:	2300      	movs	r3, #0
 801171e:	6363      	str	r3, [r4, #52]	; 0x34
 8011720:	89a3      	ldrh	r3, [r4, #12]
 8011722:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	2300      	movs	r3, #0
 801172a:	6063      	str	r3, [r4, #4]
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	6023      	str	r3, [r4, #0]
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f043 0308 	orr.w	r3, r3, #8
 8011736:	81a3      	strh	r3, [r4, #12]
 8011738:	6923      	ldr	r3, [r4, #16]
 801173a:	b94b      	cbnz	r3, 8011750 <__swsetup_r+0x7c>
 801173c:	89a3      	ldrh	r3, [r4, #12]
 801173e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011746:	d003      	beq.n	8011750 <__swsetup_r+0x7c>
 8011748:	4621      	mov	r1, r4
 801174a:	4628      	mov	r0, r5
 801174c:	f001 fdd2 	bl	80132f4 <__smakebuf_r>
 8011750:	89a0      	ldrh	r0, [r4, #12]
 8011752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011756:	f010 0301 	ands.w	r3, r0, #1
 801175a:	d00a      	beq.n	8011772 <__swsetup_r+0x9e>
 801175c:	2300      	movs	r3, #0
 801175e:	60a3      	str	r3, [r4, #8]
 8011760:	6963      	ldr	r3, [r4, #20]
 8011762:	425b      	negs	r3, r3
 8011764:	61a3      	str	r3, [r4, #24]
 8011766:	6923      	ldr	r3, [r4, #16]
 8011768:	b943      	cbnz	r3, 801177c <__swsetup_r+0xa8>
 801176a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801176e:	d1c4      	bne.n	80116fa <__swsetup_r+0x26>
 8011770:	bd38      	pop	{r3, r4, r5, pc}
 8011772:	0781      	lsls	r1, r0, #30
 8011774:	bf58      	it	pl
 8011776:	6963      	ldrpl	r3, [r4, #20]
 8011778:	60a3      	str	r3, [r4, #8]
 801177a:	e7f4      	b.n	8011766 <__swsetup_r+0x92>
 801177c:	2000      	movs	r0, #0
 801177e:	e7f7      	b.n	8011770 <__swsetup_r+0x9c>
 8011780:	20000394 	.word	0x20000394

08011784 <memset>:
 8011784:	4402      	add	r2, r0
 8011786:	4603      	mov	r3, r0
 8011788:	4293      	cmp	r3, r2
 801178a:	d100      	bne.n	801178e <memset+0xa>
 801178c:	4770      	bx	lr
 801178e:	f803 1b01 	strb.w	r1, [r3], #1
 8011792:	e7f9      	b.n	8011788 <memset+0x4>

08011794 <strncmp>:
 8011794:	b510      	push	{r4, lr}
 8011796:	b16a      	cbz	r2, 80117b4 <strncmp+0x20>
 8011798:	3901      	subs	r1, #1
 801179a:	1884      	adds	r4, r0, r2
 801179c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d103      	bne.n	80117b0 <strncmp+0x1c>
 80117a8:	42a0      	cmp	r0, r4
 80117aa:	d001      	beq.n	80117b0 <strncmp+0x1c>
 80117ac:	2a00      	cmp	r2, #0
 80117ae:	d1f5      	bne.n	801179c <strncmp+0x8>
 80117b0:	1ad0      	subs	r0, r2, r3
 80117b2:	bd10      	pop	{r4, pc}
 80117b4:	4610      	mov	r0, r2
 80117b6:	e7fc      	b.n	80117b2 <strncmp+0x1e>

080117b8 <__strtok_r>:
 80117b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ba:	b908      	cbnz	r0, 80117c0 <__strtok_r+0x8>
 80117bc:	6810      	ldr	r0, [r2, #0]
 80117be:	b188      	cbz	r0, 80117e4 <__strtok_r+0x2c>
 80117c0:	4604      	mov	r4, r0
 80117c2:	4620      	mov	r0, r4
 80117c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80117c8:	460f      	mov	r7, r1
 80117ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80117ce:	b91e      	cbnz	r6, 80117d8 <__strtok_r+0x20>
 80117d0:	b965      	cbnz	r5, 80117ec <__strtok_r+0x34>
 80117d2:	6015      	str	r5, [r2, #0]
 80117d4:	4628      	mov	r0, r5
 80117d6:	e005      	b.n	80117e4 <__strtok_r+0x2c>
 80117d8:	42b5      	cmp	r5, r6
 80117da:	d1f6      	bne.n	80117ca <__strtok_r+0x12>
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1f0      	bne.n	80117c2 <__strtok_r+0xa>
 80117e0:	6014      	str	r4, [r2, #0]
 80117e2:	7003      	strb	r3, [r0, #0]
 80117e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e6:	461c      	mov	r4, r3
 80117e8:	e00c      	b.n	8011804 <__strtok_r+0x4c>
 80117ea:	b915      	cbnz	r5, 80117f2 <__strtok_r+0x3a>
 80117ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80117f0:	460e      	mov	r6, r1
 80117f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80117f6:	42ab      	cmp	r3, r5
 80117f8:	d1f7      	bne.n	80117ea <__strtok_r+0x32>
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d0f3      	beq.n	80117e6 <__strtok_r+0x2e>
 80117fe:	2300      	movs	r3, #0
 8011800:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011804:	6014      	str	r4, [r2, #0]
 8011806:	e7ed      	b.n	80117e4 <__strtok_r+0x2c>

08011808 <strtok_r>:
 8011808:	2301      	movs	r3, #1
 801180a:	f7ff bfd5 	b.w	80117b8 <__strtok_r>
	...

08011810 <_close_r>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4d06      	ldr	r5, [pc, #24]	; (801182c <_close_r+0x1c>)
 8011814:	2300      	movs	r3, #0
 8011816:	4604      	mov	r4, r0
 8011818:	4608      	mov	r0, r1
 801181a:	602b      	str	r3, [r5, #0]
 801181c:	f7f9 ff8d 	bl	800b73a <_close>
 8011820:	1c43      	adds	r3, r0, #1
 8011822:	d102      	bne.n	801182a <_close_r+0x1a>
 8011824:	682b      	ldr	r3, [r5, #0]
 8011826:	b103      	cbz	r3, 801182a <_close_r+0x1a>
 8011828:	6023      	str	r3, [r4, #0]
 801182a:	bd38      	pop	{r3, r4, r5, pc}
 801182c:	20002c48 	.word	0x20002c48

08011830 <_lseek_r>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	4d07      	ldr	r5, [pc, #28]	; (8011850 <_lseek_r+0x20>)
 8011834:	4604      	mov	r4, r0
 8011836:	4608      	mov	r0, r1
 8011838:	4611      	mov	r1, r2
 801183a:	2200      	movs	r2, #0
 801183c:	602a      	str	r2, [r5, #0]
 801183e:	461a      	mov	r2, r3
 8011840:	f7f9 ffa2 	bl	800b788 <_lseek>
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	d102      	bne.n	801184e <_lseek_r+0x1e>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	b103      	cbz	r3, 801184e <_lseek_r+0x1e>
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	bd38      	pop	{r3, r4, r5, pc}
 8011850:	20002c48 	.word	0x20002c48

08011854 <_read_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4d07      	ldr	r5, [pc, #28]	; (8011874 <_read_r+0x20>)
 8011858:	4604      	mov	r4, r0
 801185a:	4608      	mov	r0, r1
 801185c:	4611      	mov	r1, r2
 801185e:	2200      	movs	r2, #0
 8011860:	602a      	str	r2, [r5, #0]
 8011862:	461a      	mov	r2, r3
 8011864:	f7f9 ff30 	bl	800b6c8 <_read>
 8011868:	1c43      	adds	r3, r0, #1
 801186a:	d102      	bne.n	8011872 <_read_r+0x1e>
 801186c:	682b      	ldr	r3, [r5, #0]
 801186e:	b103      	cbz	r3, 8011872 <_read_r+0x1e>
 8011870:	6023      	str	r3, [r4, #0]
 8011872:	bd38      	pop	{r3, r4, r5, pc}
 8011874:	20002c48 	.word	0x20002c48

08011878 <_write_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d07      	ldr	r5, [pc, #28]	; (8011898 <_write_r+0x20>)
 801187c:	4604      	mov	r4, r0
 801187e:	4608      	mov	r0, r1
 8011880:	4611      	mov	r1, r2
 8011882:	2200      	movs	r2, #0
 8011884:	602a      	str	r2, [r5, #0]
 8011886:	461a      	mov	r2, r3
 8011888:	f7f9 ff3b 	bl	800b702 <_write>
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d102      	bne.n	8011896 <_write_r+0x1e>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	b103      	cbz	r3, 8011896 <_write_r+0x1e>
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	20002c48 	.word	0x20002c48

0801189c <__errno>:
 801189c:	4b01      	ldr	r3, [pc, #4]	; (80118a4 <__errno+0x8>)
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	20000394 	.word	0x20000394

080118a8 <__libc_init_array>:
 80118a8:	b570      	push	{r4, r5, r6, lr}
 80118aa:	4d0d      	ldr	r5, [pc, #52]	; (80118e0 <__libc_init_array+0x38>)
 80118ac:	4c0d      	ldr	r4, [pc, #52]	; (80118e4 <__libc_init_array+0x3c>)
 80118ae:	1b64      	subs	r4, r4, r5
 80118b0:	10a4      	asrs	r4, r4, #2
 80118b2:	2600      	movs	r6, #0
 80118b4:	42a6      	cmp	r6, r4
 80118b6:	d109      	bne.n	80118cc <__libc_init_array+0x24>
 80118b8:	4d0b      	ldr	r5, [pc, #44]	; (80118e8 <__libc_init_array+0x40>)
 80118ba:	4c0c      	ldr	r4, [pc, #48]	; (80118ec <__libc_init_array+0x44>)
 80118bc:	f001 ffb6 	bl	801382c <_init>
 80118c0:	1b64      	subs	r4, r4, r5
 80118c2:	10a4      	asrs	r4, r4, #2
 80118c4:	2600      	movs	r6, #0
 80118c6:	42a6      	cmp	r6, r4
 80118c8:	d105      	bne.n	80118d6 <__libc_init_array+0x2e>
 80118ca:	bd70      	pop	{r4, r5, r6, pc}
 80118cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80118d0:	4798      	blx	r3
 80118d2:	3601      	adds	r6, #1
 80118d4:	e7ee      	b.n	80118b4 <__libc_init_array+0xc>
 80118d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80118da:	4798      	blx	r3
 80118dc:	3601      	adds	r6, #1
 80118de:	e7f2      	b.n	80118c6 <__libc_init_array+0x1e>
 80118e0:	08021a34 	.word	0x08021a34
 80118e4:	08021a34 	.word	0x08021a34
 80118e8:	08021a34 	.word	0x08021a34
 80118ec:	08021a38 	.word	0x08021a38

080118f0 <__retarget_lock_init_recursive>:
 80118f0:	4770      	bx	lr

080118f2 <__retarget_lock_acquire_recursive>:
 80118f2:	4770      	bx	lr

080118f4 <__retarget_lock_release_recursive>:
 80118f4:	4770      	bx	lr

080118f6 <strcpy>:
 80118f6:	4603      	mov	r3, r0
 80118f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118fc:	f803 2b01 	strb.w	r2, [r3], #1
 8011900:	2a00      	cmp	r2, #0
 8011902:	d1f9      	bne.n	80118f8 <strcpy+0x2>
 8011904:	4770      	bx	lr

08011906 <memcpy>:
 8011906:	440a      	add	r2, r1
 8011908:	4291      	cmp	r1, r2
 801190a:	f100 33ff 	add.w	r3, r0, #4294967295
 801190e:	d100      	bne.n	8011912 <memcpy+0xc>
 8011910:	4770      	bx	lr
 8011912:	b510      	push	{r4, lr}
 8011914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011918:	f803 4f01 	strb.w	r4, [r3, #1]!
 801191c:	4291      	cmp	r1, r2
 801191e:	d1f9      	bne.n	8011914 <memcpy+0xe>
 8011920:	bd10      	pop	{r4, pc}
 8011922:	0000      	movs	r0, r0
 8011924:	0000      	movs	r0, r0
	...

08011928 <nan>:
 8011928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011930 <nan+0x8>
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	00000000 	.word	0x00000000
 8011934:	7ff80000 	.word	0x7ff80000

08011938 <nanf>:
 8011938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011940 <nanf+0x8>
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	7fc00000 	.word	0x7fc00000

08011944 <_free_r>:
 8011944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011946:	2900      	cmp	r1, #0
 8011948:	d044      	beq.n	80119d4 <_free_r+0x90>
 801194a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801194e:	9001      	str	r0, [sp, #4]
 8011950:	2b00      	cmp	r3, #0
 8011952:	f1a1 0404 	sub.w	r4, r1, #4
 8011956:	bfb8      	it	lt
 8011958:	18e4      	addlt	r4, r4, r3
 801195a:	f000 fc49 	bl	80121f0 <__malloc_lock>
 801195e:	4a1e      	ldr	r2, [pc, #120]	; (80119d8 <_free_r+0x94>)
 8011960:	9801      	ldr	r0, [sp, #4]
 8011962:	6813      	ldr	r3, [r2, #0]
 8011964:	b933      	cbnz	r3, 8011974 <_free_r+0x30>
 8011966:	6063      	str	r3, [r4, #4]
 8011968:	6014      	str	r4, [r2, #0]
 801196a:	b003      	add	sp, #12
 801196c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011970:	f000 bc44 	b.w	80121fc <__malloc_unlock>
 8011974:	42a3      	cmp	r3, r4
 8011976:	d908      	bls.n	801198a <_free_r+0x46>
 8011978:	6825      	ldr	r5, [r4, #0]
 801197a:	1961      	adds	r1, r4, r5
 801197c:	428b      	cmp	r3, r1
 801197e:	bf01      	itttt	eq
 8011980:	6819      	ldreq	r1, [r3, #0]
 8011982:	685b      	ldreq	r3, [r3, #4]
 8011984:	1949      	addeq	r1, r1, r5
 8011986:	6021      	streq	r1, [r4, #0]
 8011988:	e7ed      	b.n	8011966 <_free_r+0x22>
 801198a:	461a      	mov	r2, r3
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	b10b      	cbz	r3, 8011994 <_free_r+0x50>
 8011990:	42a3      	cmp	r3, r4
 8011992:	d9fa      	bls.n	801198a <_free_r+0x46>
 8011994:	6811      	ldr	r1, [r2, #0]
 8011996:	1855      	adds	r5, r2, r1
 8011998:	42a5      	cmp	r5, r4
 801199a:	d10b      	bne.n	80119b4 <_free_r+0x70>
 801199c:	6824      	ldr	r4, [r4, #0]
 801199e:	4421      	add	r1, r4
 80119a0:	1854      	adds	r4, r2, r1
 80119a2:	42a3      	cmp	r3, r4
 80119a4:	6011      	str	r1, [r2, #0]
 80119a6:	d1e0      	bne.n	801196a <_free_r+0x26>
 80119a8:	681c      	ldr	r4, [r3, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	6053      	str	r3, [r2, #4]
 80119ae:	440c      	add	r4, r1
 80119b0:	6014      	str	r4, [r2, #0]
 80119b2:	e7da      	b.n	801196a <_free_r+0x26>
 80119b4:	d902      	bls.n	80119bc <_free_r+0x78>
 80119b6:	230c      	movs	r3, #12
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	e7d6      	b.n	801196a <_free_r+0x26>
 80119bc:	6825      	ldr	r5, [r4, #0]
 80119be:	1961      	adds	r1, r4, r5
 80119c0:	428b      	cmp	r3, r1
 80119c2:	bf04      	itt	eq
 80119c4:	6819      	ldreq	r1, [r3, #0]
 80119c6:	685b      	ldreq	r3, [r3, #4]
 80119c8:	6063      	str	r3, [r4, #4]
 80119ca:	bf04      	itt	eq
 80119cc:	1949      	addeq	r1, r1, r5
 80119ce:	6021      	streq	r1, [r4, #0]
 80119d0:	6054      	str	r4, [r2, #4]
 80119d2:	e7ca      	b.n	801196a <_free_r+0x26>
 80119d4:	b003      	add	sp, #12
 80119d6:	bd30      	pop	{r4, r5, pc}
 80119d8:	20002c50 	.word	0x20002c50

080119dc <rshift>:
 80119dc:	6903      	ldr	r3, [r0, #16]
 80119de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80119e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80119ea:	f100 0414 	add.w	r4, r0, #20
 80119ee:	dd45      	ble.n	8011a7c <rshift+0xa0>
 80119f0:	f011 011f 	ands.w	r1, r1, #31
 80119f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80119f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80119fc:	d10c      	bne.n	8011a18 <rshift+0x3c>
 80119fe:	f100 0710 	add.w	r7, r0, #16
 8011a02:	4629      	mov	r1, r5
 8011a04:	42b1      	cmp	r1, r6
 8011a06:	d334      	bcc.n	8011a72 <rshift+0x96>
 8011a08:	1a9b      	subs	r3, r3, r2
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	1eea      	subs	r2, r5, #3
 8011a0e:	4296      	cmp	r6, r2
 8011a10:	bf38      	it	cc
 8011a12:	2300      	movcc	r3, #0
 8011a14:	4423      	add	r3, r4
 8011a16:	e015      	b.n	8011a44 <rshift+0x68>
 8011a18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a1c:	f1c1 0820 	rsb	r8, r1, #32
 8011a20:	40cf      	lsrs	r7, r1
 8011a22:	f105 0e04 	add.w	lr, r5, #4
 8011a26:	46a1      	mov	r9, r4
 8011a28:	4576      	cmp	r6, lr
 8011a2a:	46f4      	mov	ip, lr
 8011a2c:	d815      	bhi.n	8011a5a <rshift+0x7e>
 8011a2e:	1a9a      	subs	r2, r3, r2
 8011a30:	0092      	lsls	r2, r2, #2
 8011a32:	3a04      	subs	r2, #4
 8011a34:	3501      	adds	r5, #1
 8011a36:	42ae      	cmp	r6, r5
 8011a38:	bf38      	it	cc
 8011a3a:	2200      	movcc	r2, #0
 8011a3c:	18a3      	adds	r3, r4, r2
 8011a3e:	50a7      	str	r7, [r4, r2]
 8011a40:	b107      	cbz	r7, 8011a44 <rshift+0x68>
 8011a42:	3304      	adds	r3, #4
 8011a44:	1b1a      	subs	r2, r3, r4
 8011a46:	42a3      	cmp	r3, r4
 8011a48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a4c:	bf08      	it	eq
 8011a4e:	2300      	moveq	r3, #0
 8011a50:	6102      	str	r2, [r0, #16]
 8011a52:	bf08      	it	eq
 8011a54:	6143      	streq	r3, [r0, #20]
 8011a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a5a:	f8dc c000 	ldr.w	ip, [ip]
 8011a5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a62:	ea4c 0707 	orr.w	r7, ip, r7
 8011a66:	f849 7b04 	str.w	r7, [r9], #4
 8011a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a6e:	40cf      	lsrs	r7, r1
 8011a70:	e7da      	b.n	8011a28 <rshift+0x4c>
 8011a72:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a76:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a7a:	e7c3      	b.n	8011a04 <rshift+0x28>
 8011a7c:	4623      	mov	r3, r4
 8011a7e:	e7e1      	b.n	8011a44 <rshift+0x68>

08011a80 <__hexdig_fun>:
 8011a80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011a84:	2b09      	cmp	r3, #9
 8011a86:	d802      	bhi.n	8011a8e <__hexdig_fun+0xe>
 8011a88:	3820      	subs	r0, #32
 8011a8a:	b2c0      	uxtb	r0, r0
 8011a8c:	4770      	bx	lr
 8011a8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a92:	2b05      	cmp	r3, #5
 8011a94:	d801      	bhi.n	8011a9a <__hexdig_fun+0x1a>
 8011a96:	3847      	subs	r0, #71	; 0x47
 8011a98:	e7f7      	b.n	8011a8a <__hexdig_fun+0xa>
 8011a9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a9e:	2b05      	cmp	r3, #5
 8011aa0:	d801      	bhi.n	8011aa6 <__hexdig_fun+0x26>
 8011aa2:	3827      	subs	r0, #39	; 0x27
 8011aa4:	e7f1      	b.n	8011a8a <__hexdig_fun+0xa>
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	4770      	bx	lr
	...

08011aac <__gethex>:
 8011aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab0:	4617      	mov	r7, r2
 8011ab2:	680a      	ldr	r2, [r1, #0]
 8011ab4:	b085      	sub	sp, #20
 8011ab6:	f102 0b02 	add.w	fp, r2, #2
 8011aba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011abe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011ac2:	4681      	mov	r9, r0
 8011ac4:	468a      	mov	sl, r1
 8011ac6:	9302      	str	r3, [sp, #8]
 8011ac8:	32fe      	adds	r2, #254	; 0xfe
 8011aca:	eb02 030b 	add.w	r3, r2, fp
 8011ace:	46d8      	mov	r8, fp
 8011ad0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	2830      	cmp	r0, #48	; 0x30
 8011ad8:	d0f7      	beq.n	8011aca <__gethex+0x1e>
 8011ada:	f7ff ffd1 	bl	8011a80 <__hexdig_fun>
 8011ade:	4604      	mov	r4, r0
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d138      	bne.n	8011b56 <__gethex+0xaa>
 8011ae4:	49a7      	ldr	r1, [pc, #668]	; (8011d84 <__gethex+0x2d8>)
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	4640      	mov	r0, r8
 8011aea:	f7ff fe53 	bl	8011794 <strncmp>
 8011aee:	4606      	mov	r6, r0
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d169      	bne.n	8011bc8 <__gethex+0x11c>
 8011af4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011af8:	465d      	mov	r5, fp
 8011afa:	f7ff ffc1 	bl	8011a80 <__hexdig_fun>
 8011afe:	2800      	cmp	r0, #0
 8011b00:	d064      	beq.n	8011bcc <__gethex+0x120>
 8011b02:	465a      	mov	r2, fp
 8011b04:	7810      	ldrb	r0, [r2, #0]
 8011b06:	2830      	cmp	r0, #48	; 0x30
 8011b08:	4690      	mov	r8, r2
 8011b0a:	f102 0201 	add.w	r2, r2, #1
 8011b0e:	d0f9      	beq.n	8011b04 <__gethex+0x58>
 8011b10:	f7ff ffb6 	bl	8011a80 <__hexdig_fun>
 8011b14:	2301      	movs	r3, #1
 8011b16:	fab0 f480 	clz	r4, r0
 8011b1a:	0964      	lsrs	r4, r4, #5
 8011b1c:	465e      	mov	r6, fp
 8011b1e:	9301      	str	r3, [sp, #4]
 8011b20:	4642      	mov	r2, r8
 8011b22:	4615      	mov	r5, r2
 8011b24:	3201      	adds	r2, #1
 8011b26:	7828      	ldrb	r0, [r5, #0]
 8011b28:	f7ff ffaa 	bl	8011a80 <__hexdig_fun>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d1f8      	bne.n	8011b22 <__gethex+0x76>
 8011b30:	4994      	ldr	r1, [pc, #592]	; (8011d84 <__gethex+0x2d8>)
 8011b32:	2201      	movs	r2, #1
 8011b34:	4628      	mov	r0, r5
 8011b36:	f7ff fe2d 	bl	8011794 <strncmp>
 8011b3a:	b978      	cbnz	r0, 8011b5c <__gethex+0xb0>
 8011b3c:	b946      	cbnz	r6, 8011b50 <__gethex+0xa4>
 8011b3e:	1c6e      	adds	r6, r5, #1
 8011b40:	4632      	mov	r2, r6
 8011b42:	4615      	mov	r5, r2
 8011b44:	3201      	adds	r2, #1
 8011b46:	7828      	ldrb	r0, [r5, #0]
 8011b48:	f7ff ff9a 	bl	8011a80 <__hexdig_fun>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d1f8      	bne.n	8011b42 <__gethex+0x96>
 8011b50:	1b73      	subs	r3, r6, r5
 8011b52:	009e      	lsls	r6, r3, #2
 8011b54:	e004      	b.n	8011b60 <__gethex+0xb4>
 8011b56:	2400      	movs	r4, #0
 8011b58:	4626      	mov	r6, r4
 8011b5a:	e7e1      	b.n	8011b20 <__gethex+0x74>
 8011b5c:	2e00      	cmp	r6, #0
 8011b5e:	d1f7      	bne.n	8011b50 <__gethex+0xa4>
 8011b60:	782b      	ldrb	r3, [r5, #0]
 8011b62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b66:	2b50      	cmp	r3, #80	; 0x50
 8011b68:	d13d      	bne.n	8011be6 <__gethex+0x13a>
 8011b6a:	786b      	ldrb	r3, [r5, #1]
 8011b6c:	2b2b      	cmp	r3, #43	; 0x2b
 8011b6e:	d02f      	beq.n	8011bd0 <__gethex+0x124>
 8011b70:	2b2d      	cmp	r3, #45	; 0x2d
 8011b72:	d031      	beq.n	8011bd8 <__gethex+0x12c>
 8011b74:	1c69      	adds	r1, r5, #1
 8011b76:	f04f 0b00 	mov.w	fp, #0
 8011b7a:	7808      	ldrb	r0, [r1, #0]
 8011b7c:	f7ff ff80 	bl	8011a80 <__hexdig_fun>
 8011b80:	1e42      	subs	r2, r0, #1
 8011b82:	b2d2      	uxtb	r2, r2
 8011b84:	2a18      	cmp	r2, #24
 8011b86:	d82e      	bhi.n	8011be6 <__gethex+0x13a>
 8011b88:	f1a0 0210 	sub.w	r2, r0, #16
 8011b8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b90:	f7ff ff76 	bl	8011a80 <__hexdig_fun>
 8011b94:	f100 3cff 	add.w	ip, r0, #4294967295
 8011b98:	fa5f fc8c 	uxtb.w	ip, ip
 8011b9c:	f1bc 0f18 	cmp.w	ip, #24
 8011ba0:	d91d      	bls.n	8011bde <__gethex+0x132>
 8011ba2:	f1bb 0f00 	cmp.w	fp, #0
 8011ba6:	d000      	beq.n	8011baa <__gethex+0xfe>
 8011ba8:	4252      	negs	r2, r2
 8011baa:	4416      	add	r6, r2
 8011bac:	f8ca 1000 	str.w	r1, [sl]
 8011bb0:	b1dc      	cbz	r4, 8011bea <__gethex+0x13e>
 8011bb2:	9b01      	ldr	r3, [sp, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	bf14      	ite	ne
 8011bb8:	f04f 0800 	movne.w	r8, #0
 8011bbc:	f04f 0806 	moveq.w	r8, #6
 8011bc0:	4640      	mov	r0, r8
 8011bc2:	b005      	add	sp, #20
 8011bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc8:	4645      	mov	r5, r8
 8011bca:	4626      	mov	r6, r4
 8011bcc:	2401      	movs	r4, #1
 8011bce:	e7c7      	b.n	8011b60 <__gethex+0xb4>
 8011bd0:	f04f 0b00 	mov.w	fp, #0
 8011bd4:	1ca9      	adds	r1, r5, #2
 8011bd6:	e7d0      	b.n	8011b7a <__gethex+0xce>
 8011bd8:	f04f 0b01 	mov.w	fp, #1
 8011bdc:	e7fa      	b.n	8011bd4 <__gethex+0x128>
 8011bde:	230a      	movs	r3, #10
 8011be0:	fb03 0002 	mla	r0, r3, r2, r0
 8011be4:	e7d0      	b.n	8011b88 <__gethex+0xdc>
 8011be6:	4629      	mov	r1, r5
 8011be8:	e7e0      	b.n	8011bac <__gethex+0x100>
 8011bea:	eba5 0308 	sub.w	r3, r5, r8
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	2b07      	cmp	r3, #7
 8011bf4:	dc0a      	bgt.n	8011c0c <__gethex+0x160>
 8011bf6:	4648      	mov	r0, r9
 8011bf8:	f000 fb06 	bl	8012208 <_Balloc>
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	b940      	cbnz	r0, 8011c12 <__gethex+0x166>
 8011c00:	4b61      	ldr	r3, [pc, #388]	; (8011d88 <__gethex+0x2dc>)
 8011c02:	4602      	mov	r2, r0
 8011c04:	21e4      	movs	r1, #228	; 0xe4
 8011c06:	4861      	ldr	r0, [pc, #388]	; (8011d8c <__gethex+0x2e0>)
 8011c08:	f001 fbfc 	bl	8013404 <__assert_func>
 8011c0c:	3101      	adds	r1, #1
 8011c0e:	105b      	asrs	r3, r3, #1
 8011c10:	e7ef      	b.n	8011bf2 <__gethex+0x146>
 8011c12:	f100 0a14 	add.w	sl, r0, #20
 8011c16:	2300      	movs	r3, #0
 8011c18:	495a      	ldr	r1, [pc, #360]	; (8011d84 <__gethex+0x2d8>)
 8011c1a:	f8cd a004 	str.w	sl, [sp, #4]
 8011c1e:	469b      	mov	fp, r3
 8011c20:	45a8      	cmp	r8, r5
 8011c22:	d342      	bcc.n	8011caa <__gethex+0x1fe>
 8011c24:	9801      	ldr	r0, [sp, #4]
 8011c26:	f840 bb04 	str.w	fp, [r0], #4
 8011c2a:	eba0 000a 	sub.w	r0, r0, sl
 8011c2e:	1080      	asrs	r0, r0, #2
 8011c30:	6120      	str	r0, [r4, #16]
 8011c32:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011c36:	4658      	mov	r0, fp
 8011c38:	f000 fbd8 	bl	80123ec <__hi0bits>
 8011c3c:	683d      	ldr	r5, [r7, #0]
 8011c3e:	eba8 0000 	sub.w	r0, r8, r0
 8011c42:	42a8      	cmp	r0, r5
 8011c44:	dd59      	ble.n	8011cfa <__gethex+0x24e>
 8011c46:	eba0 0805 	sub.w	r8, r0, r5
 8011c4a:	4641      	mov	r1, r8
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f000 ff67 	bl	8012b20 <__any_on>
 8011c52:	4683      	mov	fp, r0
 8011c54:	b1b8      	cbz	r0, 8011c86 <__gethex+0x1da>
 8011c56:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c5a:	1159      	asrs	r1, r3, #5
 8011c5c:	f003 021f 	and.w	r2, r3, #31
 8011c60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c64:	f04f 0b01 	mov.w	fp, #1
 8011c68:	fa0b f202 	lsl.w	r2, fp, r2
 8011c6c:	420a      	tst	r2, r1
 8011c6e:	d00a      	beq.n	8011c86 <__gethex+0x1da>
 8011c70:	455b      	cmp	r3, fp
 8011c72:	dd06      	ble.n	8011c82 <__gethex+0x1d6>
 8011c74:	f1a8 0102 	sub.w	r1, r8, #2
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 ff51 	bl	8012b20 <__any_on>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d138      	bne.n	8011cf4 <__gethex+0x248>
 8011c82:	f04f 0b02 	mov.w	fp, #2
 8011c86:	4641      	mov	r1, r8
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f7ff fea7 	bl	80119dc <rshift>
 8011c8e:	4446      	add	r6, r8
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	42b3      	cmp	r3, r6
 8011c94:	da41      	bge.n	8011d1a <__gethex+0x26e>
 8011c96:	4621      	mov	r1, r4
 8011c98:	4648      	mov	r0, r9
 8011c9a:	f000 faf5 	bl	8012288 <_Bfree>
 8011c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	6013      	str	r3, [r2, #0]
 8011ca4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011ca8:	e78a      	b.n	8011bc0 <__gethex+0x114>
 8011caa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011cae:	2a2e      	cmp	r2, #46	; 0x2e
 8011cb0:	d014      	beq.n	8011cdc <__gethex+0x230>
 8011cb2:	2b20      	cmp	r3, #32
 8011cb4:	d106      	bne.n	8011cc4 <__gethex+0x218>
 8011cb6:	9b01      	ldr	r3, [sp, #4]
 8011cb8:	f843 bb04 	str.w	fp, [r3], #4
 8011cbc:	f04f 0b00 	mov.w	fp, #0
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	465b      	mov	r3, fp
 8011cc4:	7828      	ldrb	r0, [r5, #0]
 8011cc6:	9303      	str	r3, [sp, #12]
 8011cc8:	f7ff feda 	bl	8011a80 <__hexdig_fun>
 8011ccc:	9b03      	ldr	r3, [sp, #12]
 8011cce:	f000 000f 	and.w	r0, r0, #15
 8011cd2:	4098      	lsls	r0, r3
 8011cd4:	ea4b 0b00 	orr.w	fp, fp, r0
 8011cd8:	3304      	adds	r3, #4
 8011cda:	e7a1      	b.n	8011c20 <__gethex+0x174>
 8011cdc:	45a8      	cmp	r8, r5
 8011cde:	d8e8      	bhi.n	8011cb2 <__gethex+0x206>
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	9303      	str	r3, [sp, #12]
 8011ce6:	f7ff fd55 	bl	8011794 <strncmp>
 8011cea:	4926      	ldr	r1, [pc, #152]	; (8011d84 <__gethex+0x2d8>)
 8011cec:	9b03      	ldr	r3, [sp, #12]
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d1df      	bne.n	8011cb2 <__gethex+0x206>
 8011cf2:	e795      	b.n	8011c20 <__gethex+0x174>
 8011cf4:	f04f 0b03 	mov.w	fp, #3
 8011cf8:	e7c5      	b.n	8011c86 <__gethex+0x1da>
 8011cfa:	da0b      	bge.n	8011d14 <__gethex+0x268>
 8011cfc:	eba5 0800 	sub.w	r8, r5, r0
 8011d00:	4621      	mov	r1, r4
 8011d02:	4642      	mov	r2, r8
 8011d04:	4648      	mov	r0, r9
 8011d06:	f000 fcd9 	bl	80126bc <__lshift>
 8011d0a:	eba6 0608 	sub.w	r6, r6, r8
 8011d0e:	4604      	mov	r4, r0
 8011d10:	f100 0a14 	add.w	sl, r0, #20
 8011d14:	f04f 0b00 	mov.w	fp, #0
 8011d18:	e7ba      	b.n	8011c90 <__gethex+0x1e4>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	42b3      	cmp	r3, r6
 8011d1e:	dd73      	ble.n	8011e08 <__gethex+0x35c>
 8011d20:	1b9e      	subs	r6, r3, r6
 8011d22:	42b5      	cmp	r5, r6
 8011d24:	dc34      	bgt.n	8011d90 <__gethex+0x2e4>
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2b02      	cmp	r3, #2
 8011d2a:	d023      	beq.n	8011d74 <__gethex+0x2c8>
 8011d2c:	2b03      	cmp	r3, #3
 8011d2e:	d025      	beq.n	8011d7c <__gethex+0x2d0>
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d115      	bne.n	8011d60 <__gethex+0x2b4>
 8011d34:	42b5      	cmp	r5, r6
 8011d36:	d113      	bne.n	8011d60 <__gethex+0x2b4>
 8011d38:	2d01      	cmp	r5, #1
 8011d3a:	d10b      	bne.n	8011d54 <__gethex+0x2a8>
 8011d3c:	9a02      	ldr	r2, [sp, #8]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6013      	str	r3, [r2, #0]
 8011d42:	2301      	movs	r3, #1
 8011d44:	6123      	str	r3, [r4, #16]
 8011d46:	f8ca 3000 	str.w	r3, [sl]
 8011d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d4c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011d50:	601c      	str	r4, [r3, #0]
 8011d52:	e735      	b.n	8011bc0 <__gethex+0x114>
 8011d54:	1e69      	subs	r1, r5, #1
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 fee2 	bl	8012b20 <__any_on>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d1ed      	bne.n	8011d3c <__gethex+0x290>
 8011d60:	4621      	mov	r1, r4
 8011d62:	4648      	mov	r0, r9
 8011d64:	f000 fa90 	bl	8012288 <_Bfree>
 8011d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011d72:	e725      	b.n	8011bc0 <__gethex+0x114>
 8011d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d1f2      	bne.n	8011d60 <__gethex+0x2b4>
 8011d7a:	e7df      	b.n	8011d3c <__gethex+0x290>
 8011d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d1dc      	bne.n	8011d3c <__gethex+0x290>
 8011d82:	e7ed      	b.n	8011d60 <__gethex+0x2b4>
 8011d84:	0802166b 	.word	0x0802166b
 8011d88:	080217d9 	.word	0x080217d9
 8011d8c:	080217ea 	.word	0x080217ea
 8011d90:	f106 38ff 	add.w	r8, r6, #4294967295
 8011d94:	f1bb 0f00 	cmp.w	fp, #0
 8011d98:	d133      	bne.n	8011e02 <__gethex+0x356>
 8011d9a:	f1b8 0f00 	cmp.w	r8, #0
 8011d9e:	d004      	beq.n	8011daa <__gethex+0x2fe>
 8011da0:	4641      	mov	r1, r8
 8011da2:	4620      	mov	r0, r4
 8011da4:	f000 febc 	bl	8012b20 <__any_on>
 8011da8:	4683      	mov	fp, r0
 8011daa:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011dae:	2301      	movs	r3, #1
 8011db0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011db4:	f008 081f 	and.w	r8, r8, #31
 8011db8:	fa03 f308 	lsl.w	r3, r3, r8
 8011dbc:	4213      	tst	r3, r2
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	bf18      	it	ne
 8011dc4:	f04b 0b02 	orrne.w	fp, fp, #2
 8011dc8:	1bad      	subs	r5, r5, r6
 8011dca:	f7ff fe07 	bl	80119dc <rshift>
 8011dce:	687e      	ldr	r6, [r7, #4]
 8011dd0:	f04f 0802 	mov.w	r8, #2
 8011dd4:	f1bb 0f00 	cmp.w	fp, #0
 8011dd8:	d04a      	beq.n	8011e70 <__gethex+0x3c4>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d016      	beq.n	8011e0e <__gethex+0x362>
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d018      	beq.n	8011e16 <__gethex+0x36a>
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d109      	bne.n	8011dfc <__gethex+0x350>
 8011de8:	f01b 0f02 	tst.w	fp, #2
 8011dec:	d006      	beq.n	8011dfc <__gethex+0x350>
 8011dee:	f8da 3000 	ldr.w	r3, [sl]
 8011df2:	ea4b 0b03 	orr.w	fp, fp, r3
 8011df6:	f01b 0f01 	tst.w	fp, #1
 8011dfa:	d10f      	bne.n	8011e1c <__gethex+0x370>
 8011dfc:	f048 0810 	orr.w	r8, r8, #16
 8011e00:	e036      	b.n	8011e70 <__gethex+0x3c4>
 8011e02:	f04f 0b01 	mov.w	fp, #1
 8011e06:	e7d0      	b.n	8011daa <__gethex+0x2fe>
 8011e08:	f04f 0801 	mov.w	r8, #1
 8011e0c:	e7e2      	b.n	8011dd4 <__gethex+0x328>
 8011e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e10:	f1c3 0301 	rsb	r3, r3, #1
 8011e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d0ef      	beq.n	8011dfc <__gethex+0x350>
 8011e1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e20:	f104 0214 	add.w	r2, r4, #20
 8011e24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011e2e:	2300      	movs	r3, #0
 8011e30:	4694      	mov	ip, r2
 8011e32:	f852 1b04 	ldr.w	r1, [r2], #4
 8011e36:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011e3a:	d01e      	beq.n	8011e7a <__gethex+0x3ce>
 8011e3c:	3101      	adds	r1, #1
 8011e3e:	f8cc 1000 	str.w	r1, [ip]
 8011e42:	f1b8 0f02 	cmp.w	r8, #2
 8011e46:	f104 0214 	add.w	r2, r4, #20
 8011e4a:	d13d      	bne.n	8011ec8 <__gethex+0x41c>
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	42ab      	cmp	r3, r5
 8011e52:	d10b      	bne.n	8011e6c <__gethex+0x3c0>
 8011e54:	1169      	asrs	r1, r5, #5
 8011e56:	2301      	movs	r3, #1
 8011e58:	f005 051f 	and.w	r5, r5, #31
 8011e5c:	fa03 f505 	lsl.w	r5, r3, r5
 8011e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e64:	421d      	tst	r5, r3
 8011e66:	bf18      	it	ne
 8011e68:	f04f 0801 	movne.w	r8, #1
 8011e6c:	f048 0820 	orr.w	r8, r8, #32
 8011e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e72:	601c      	str	r4, [r3, #0]
 8011e74:	9b02      	ldr	r3, [sp, #8]
 8011e76:	601e      	str	r6, [r3, #0]
 8011e78:	e6a2      	b.n	8011bc0 <__gethex+0x114>
 8011e7a:	4290      	cmp	r0, r2
 8011e7c:	f842 3c04 	str.w	r3, [r2, #-4]
 8011e80:	d8d6      	bhi.n	8011e30 <__gethex+0x384>
 8011e82:	68a2      	ldr	r2, [r4, #8]
 8011e84:	4593      	cmp	fp, r2
 8011e86:	db17      	blt.n	8011eb8 <__gethex+0x40c>
 8011e88:	6861      	ldr	r1, [r4, #4]
 8011e8a:	4648      	mov	r0, r9
 8011e8c:	3101      	adds	r1, #1
 8011e8e:	f000 f9bb 	bl	8012208 <_Balloc>
 8011e92:	4682      	mov	sl, r0
 8011e94:	b918      	cbnz	r0, 8011e9e <__gethex+0x3f2>
 8011e96:	4b1b      	ldr	r3, [pc, #108]	; (8011f04 <__gethex+0x458>)
 8011e98:	4602      	mov	r2, r0
 8011e9a:	2184      	movs	r1, #132	; 0x84
 8011e9c:	e6b3      	b.n	8011c06 <__gethex+0x15a>
 8011e9e:	6922      	ldr	r2, [r4, #16]
 8011ea0:	3202      	adds	r2, #2
 8011ea2:	f104 010c 	add.w	r1, r4, #12
 8011ea6:	0092      	lsls	r2, r2, #2
 8011ea8:	300c      	adds	r0, #12
 8011eaa:	f7ff fd2c 	bl	8011906 <memcpy>
 8011eae:	4621      	mov	r1, r4
 8011eb0:	4648      	mov	r0, r9
 8011eb2:	f000 f9e9 	bl	8012288 <_Bfree>
 8011eb6:	4654      	mov	r4, sl
 8011eb8:	6922      	ldr	r2, [r4, #16]
 8011eba:	1c51      	adds	r1, r2, #1
 8011ebc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ec0:	6121      	str	r1, [r4, #16]
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	6151      	str	r1, [r2, #20]
 8011ec6:	e7bc      	b.n	8011e42 <__gethex+0x396>
 8011ec8:	6921      	ldr	r1, [r4, #16]
 8011eca:	4559      	cmp	r1, fp
 8011ecc:	dd0b      	ble.n	8011ee6 <__gethex+0x43a>
 8011ece:	2101      	movs	r1, #1
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f7ff fd83 	bl	80119dc <rshift>
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	3601      	adds	r6, #1
 8011eda:	42b3      	cmp	r3, r6
 8011edc:	f6ff aedb 	blt.w	8011c96 <__gethex+0x1ea>
 8011ee0:	f04f 0801 	mov.w	r8, #1
 8011ee4:	e7c2      	b.n	8011e6c <__gethex+0x3c0>
 8011ee6:	f015 051f 	ands.w	r5, r5, #31
 8011eea:	d0f9      	beq.n	8011ee0 <__gethex+0x434>
 8011eec:	9b01      	ldr	r3, [sp, #4]
 8011eee:	441a      	add	r2, r3
 8011ef0:	f1c5 0520 	rsb	r5, r5, #32
 8011ef4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011ef8:	f000 fa78 	bl	80123ec <__hi0bits>
 8011efc:	42a8      	cmp	r0, r5
 8011efe:	dbe6      	blt.n	8011ece <__gethex+0x422>
 8011f00:	e7ee      	b.n	8011ee0 <__gethex+0x434>
 8011f02:	bf00      	nop
 8011f04:	080217d9 	.word	0x080217d9

08011f08 <L_shift>:
 8011f08:	f1c2 0208 	rsb	r2, r2, #8
 8011f0c:	0092      	lsls	r2, r2, #2
 8011f0e:	b570      	push	{r4, r5, r6, lr}
 8011f10:	f1c2 0620 	rsb	r6, r2, #32
 8011f14:	6843      	ldr	r3, [r0, #4]
 8011f16:	6804      	ldr	r4, [r0, #0]
 8011f18:	fa03 f506 	lsl.w	r5, r3, r6
 8011f1c:	432c      	orrs	r4, r5
 8011f1e:	40d3      	lsrs	r3, r2
 8011f20:	6004      	str	r4, [r0, #0]
 8011f22:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f26:	4288      	cmp	r0, r1
 8011f28:	d3f4      	bcc.n	8011f14 <L_shift+0xc>
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}

08011f2c <__match>:
 8011f2c:	b530      	push	{r4, r5, lr}
 8011f2e:	6803      	ldr	r3, [r0, #0]
 8011f30:	3301      	adds	r3, #1
 8011f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f36:	b914      	cbnz	r4, 8011f3e <__match+0x12>
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	2001      	movs	r0, #1
 8011f3c:	bd30      	pop	{r4, r5, pc}
 8011f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011f46:	2d19      	cmp	r5, #25
 8011f48:	bf98      	it	ls
 8011f4a:	3220      	addls	r2, #32
 8011f4c:	42a2      	cmp	r2, r4
 8011f4e:	d0f0      	beq.n	8011f32 <__match+0x6>
 8011f50:	2000      	movs	r0, #0
 8011f52:	e7f3      	b.n	8011f3c <__match+0x10>

08011f54 <__hexnan>:
 8011f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f58:	680b      	ldr	r3, [r1, #0]
 8011f5a:	6801      	ldr	r1, [r0, #0]
 8011f5c:	115e      	asrs	r6, r3, #5
 8011f5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f62:	f013 031f 	ands.w	r3, r3, #31
 8011f66:	b087      	sub	sp, #28
 8011f68:	bf18      	it	ne
 8011f6a:	3604      	addne	r6, #4
 8011f6c:	2500      	movs	r5, #0
 8011f6e:	1f37      	subs	r7, r6, #4
 8011f70:	4682      	mov	sl, r0
 8011f72:	4690      	mov	r8, r2
 8011f74:	9301      	str	r3, [sp, #4]
 8011f76:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f7a:	46b9      	mov	r9, r7
 8011f7c:	463c      	mov	r4, r7
 8011f7e:	9502      	str	r5, [sp, #8]
 8011f80:	46ab      	mov	fp, r5
 8011f82:	784a      	ldrb	r2, [r1, #1]
 8011f84:	1c4b      	adds	r3, r1, #1
 8011f86:	9303      	str	r3, [sp, #12]
 8011f88:	b342      	cbz	r2, 8011fdc <__hexnan+0x88>
 8011f8a:	4610      	mov	r0, r2
 8011f8c:	9105      	str	r1, [sp, #20]
 8011f8e:	9204      	str	r2, [sp, #16]
 8011f90:	f7ff fd76 	bl	8011a80 <__hexdig_fun>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d14f      	bne.n	8012038 <__hexnan+0xe4>
 8011f98:	9a04      	ldr	r2, [sp, #16]
 8011f9a:	9905      	ldr	r1, [sp, #20]
 8011f9c:	2a20      	cmp	r2, #32
 8011f9e:	d818      	bhi.n	8011fd2 <__hexnan+0x7e>
 8011fa0:	9b02      	ldr	r3, [sp, #8]
 8011fa2:	459b      	cmp	fp, r3
 8011fa4:	dd13      	ble.n	8011fce <__hexnan+0x7a>
 8011fa6:	454c      	cmp	r4, r9
 8011fa8:	d206      	bcs.n	8011fb8 <__hexnan+0x64>
 8011faa:	2d07      	cmp	r5, #7
 8011fac:	dc04      	bgt.n	8011fb8 <__hexnan+0x64>
 8011fae:	462a      	mov	r2, r5
 8011fb0:	4649      	mov	r1, r9
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f7ff ffa8 	bl	8011f08 <L_shift>
 8011fb8:	4544      	cmp	r4, r8
 8011fba:	d950      	bls.n	801205e <__hexnan+0x10a>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	f1a4 0904 	sub.w	r9, r4, #4
 8011fc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fc6:	f8cd b008 	str.w	fp, [sp, #8]
 8011fca:	464c      	mov	r4, r9
 8011fcc:	461d      	mov	r5, r3
 8011fce:	9903      	ldr	r1, [sp, #12]
 8011fd0:	e7d7      	b.n	8011f82 <__hexnan+0x2e>
 8011fd2:	2a29      	cmp	r2, #41	; 0x29
 8011fd4:	d155      	bne.n	8012082 <__hexnan+0x12e>
 8011fd6:	3102      	adds	r1, #2
 8011fd8:	f8ca 1000 	str.w	r1, [sl]
 8011fdc:	f1bb 0f00 	cmp.w	fp, #0
 8011fe0:	d04f      	beq.n	8012082 <__hexnan+0x12e>
 8011fe2:	454c      	cmp	r4, r9
 8011fe4:	d206      	bcs.n	8011ff4 <__hexnan+0xa0>
 8011fe6:	2d07      	cmp	r5, #7
 8011fe8:	dc04      	bgt.n	8011ff4 <__hexnan+0xa0>
 8011fea:	462a      	mov	r2, r5
 8011fec:	4649      	mov	r1, r9
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f7ff ff8a 	bl	8011f08 <L_shift>
 8011ff4:	4544      	cmp	r4, r8
 8011ff6:	d934      	bls.n	8012062 <__hexnan+0x10e>
 8011ff8:	f1a8 0204 	sub.w	r2, r8, #4
 8011ffc:	4623      	mov	r3, r4
 8011ffe:	f853 1b04 	ldr.w	r1, [r3], #4
 8012002:	f842 1f04 	str.w	r1, [r2, #4]!
 8012006:	429f      	cmp	r7, r3
 8012008:	d2f9      	bcs.n	8011ffe <__hexnan+0xaa>
 801200a:	1b3b      	subs	r3, r7, r4
 801200c:	f023 0303 	bic.w	r3, r3, #3
 8012010:	3304      	adds	r3, #4
 8012012:	3e03      	subs	r6, #3
 8012014:	3401      	adds	r4, #1
 8012016:	42a6      	cmp	r6, r4
 8012018:	bf38      	it	cc
 801201a:	2304      	movcc	r3, #4
 801201c:	4443      	add	r3, r8
 801201e:	2200      	movs	r2, #0
 8012020:	f843 2b04 	str.w	r2, [r3], #4
 8012024:	429f      	cmp	r7, r3
 8012026:	d2fb      	bcs.n	8012020 <__hexnan+0xcc>
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	b91b      	cbnz	r3, 8012034 <__hexnan+0xe0>
 801202c:	4547      	cmp	r7, r8
 801202e:	d126      	bne.n	801207e <__hexnan+0x12a>
 8012030:	2301      	movs	r3, #1
 8012032:	603b      	str	r3, [r7, #0]
 8012034:	2005      	movs	r0, #5
 8012036:	e025      	b.n	8012084 <__hexnan+0x130>
 8012038:	3501      	adds	r5, #1
 801203a:	2d08      	cmp	r5, #8
 801203c:	f10b 0b01 	add.w	fp, fp, #1
 8012040:	dd06      	ble.n	8012050 <__hexnan+0xfc>
 8012042:	4544      	cmp	r4, r8
 8012044:	d9c3      	bls.n	8011fce <__hexnan+0x7a>
 8012046:	2300      	movs	r3, #0
 8012048:	f844 3c04 	str.w	r3, [r4, #-4]
 801204c:	2501      	movs	r5, #1
 801204e:	3c04      	subs	r4, #4
 8012050:	6822      	ldr	r2, [r4, #0]
 8012052:	f000 000f 	and.w	r0, r0, #15
 8012056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801205a:	6020      	str	r0, [r4, #0]
 801205c:	e7b7      	b.n	8011fce <__hexnan+0x7a>
 801205e:	2508      	movs	r5, #8
 8012060:	e7b5      	b.n	8011fce <__hexnan+0x7a>
 8012062:	9b01      	ldr	r3, [sp, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d0df      	beq.n	8012028 <__hexnan+0xd4>
 8012068:	f1c3 0320 	rsb	r3, r3, #32
 801206c:	f04f 32ff 	mov.w	r2, #4294967295
 8012070:	40da      	lsrs	r2, r3
 8012072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012076:	4013      	ands	r3, r2
 8012078:	f846 3c04 	str.w	r3, [r6, #-4]
 801207c:	e7d4      	b.n	8012028 <__hexnan+0xd4>
 801207e:	3f04      	subs	r7, #4
 8012080:	e7d2      	b.n	8012028 <__hexnan+0xd4>
 8012082:	2004      	movs	r0, #4
 8012084:	b007      	add	sp, #28
 8012086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801208c <sbrk_aligned>:
 801208c:	b570      	push	{r4, r5, r6, lr}
 801208e:	4e0e      	ldr	r6, [pc, #56]	; (80120c8 <sbrk_aligned+0x3c>)
 8012090:	460c      	mov	r4, r1
 8012092:	6831      	ldr	r1, [r6, #0]
 8012094:	4605      	mov	r5, r0
 8012096:	b911      	cbnz	r1, 801209e <sbrk_aligned+0x12>
 8012098:	f001 f9a4 	bl	80133e4 <_sbrk_r>
 801209c:	6030      	str	r0, [r6, #0]
 801209e:	4621      	mov	r1, r4
 80120a0:	4628      	mov	r0, r5
 80120a2:	f001 f99f 	bl	80133e4 <_sbrk_r>
 80120a6:	1c43      	adds	r3, r0, #1
 80120a8:	d00a      	beq.n	80120c0 <sbrk_aligned+0x34>
 80120aa:	1cc4      	adds	r4, r0, #3
 80120ac:	f024 0403 	bic.w	r4, r4, #3
 80120b0:	42a0      	cmp	r0, r4
 80120b2:	d007      	beq.n	80120c4 <sbrk_aligned+0x38>
 80120b4:	1a21      	subs	r1, r4, r0
 80120b6:	4628      	mov	r0, r5
 80120b8:	f001 f994 	bl	80133e4 <_sbrk_r>
 80120bc:	3001      	adds	r0, #1
 80120be:	d101      	bne.n	80120c4 <sbrk_aligned+0x38>
 80120c0:	f04f 34ff 	mov.w	r4, #4294967295
 80120c4:	4620      	mov	r0, r4
 80120c6:	bd70      	pop	{r4, r5, r6, pc}
 80120c8:	20002c54 	.word	0x20002c54

080120cc <_malloc_r>:
 80120cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120d0:	1ccd      	adds	r5, r1, #3
 80120d2:	f025 0503 	bic.w	r5, r5, #3
 80120d6:	3508      	adds	r5, #8
 80120d8:	2d0c      	cmp	r5, #12
 80120da:	bf38      	it	cc
 80120dc:	250c      	movcc	r5, #12
 80120de:	2d00      	cmp	r5, #0
 80120e0:	4607      	mov	r7, r0
 80120e2:	db01      	blt.n	80120e8 <_malloc_r+0x1c>
 80120e4:	42a9      	cmp	r1, r5
 80120e6:	d905      	bls.n	80120f4 <_malloc_r+0x28>
 80120e8:	230c      	movs	r3, #12
 80120ea:	603b      	str	r3, [r7, #0]
 80120ec:	2600      	movs	r6, #0
 80120ee:	4630      	mov	r0, r6
 80120f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80121c8 <_malloc_r+0xfc>
 80120f8:	f000 f87a 	bl	80121f0 <__malloc_lock>
 80120fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012100:	461c      	mov	r4, r3
 8012102:	bb5c      	cbnz	r4, 801215c <_malloc_r+0x90>
 8012104:	4629      	mov	r1, r5
 8012106:	4638      	mov	r0, r7
 8012108:	f7ff ffc0 	bl	801208c <sbrk_aligned>
 801210c:	1c43      	adds	r3, r0, #1
 801210e:	4604      	mov	r4, r0
 8012110:	d155      	bne.n	80121be <_malloc_r+0xf2>
 8012112:	f8d8 4000 	ldr.w	r4, [r8]
 8012116:	4626      	mov	r6, r4
 8012118:	2e00      	cmp	r6, #0
 801211a:	d145      	bne.n	80121a8 <_malloc_r+0xdc>
 801211c:	2c00      	cmp	r4, #0
 801211e:	d048      	beq.n	80121b2 <_malloc_r+0xe6>
 8012120:	6823      	ldr	r3, [r4, #0]
 8012122:	4631      	mov	r1, r6
 8012124:	4638      	mov	r0, r7
 8012126:	eb04 0903 	add.w	r9, r4, r3
 801212a:	f001 f95b 	bl	80133e4 <_sbrk_r>
 801212e:	4581      	cmp	r9, r0
 8012130:	d13f      	bne.n	80121b2 <_malloc_r+0xe6>
 8012132:	6821      	ldr	r1, [r4, #0]
 8012134:	1a6d      	subs	r5, r5, r1
 8012136:	4629      	mov	r1, r5
 8012138:	4638      	mov	r0, r7
 801213a:	f7ff ffa7 	bl	801208c <sbrk_aligned>
 801213e:	3001      	adds	r0, #1
 8012140:	d037      	beq.n	80121b2 <_malloc_r+0xe6>
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	442b      	add	r3, r5
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	f8d8 3000 	ldr.w	r3, [r8]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d038      	beq.n	80121c2 <_malloc_r+0xf6>
 8012150:	685a      	ldr	r2, [r3, #4]
 8012152:	42a2      	cmp	r2, r4
 8012154:	d12b      	bne.n	80121ae <_malloc_r+0xe2>
 8012156:	2200      	movs	r2, #0
 8012158:	605a      	str	r2, [r3, #4]
 801215a:	e00f      	b.n	801217c <_malloc_r+0xb0>
 801215c:	6822      	ldr	r2, [r4, #0]
 801215e:	1b52      	subs	r2, r2, r5
 8012160:	d41f      	bmi.n	80121a2 <_malloc_r+0xd6>
 8012162:	2a0b      	cmp	r2, #11
 8012164:	d917      	bls.n	8012196 <_malloc_r+0xca>
 8012166:	1961      	adds	r1, r4, r5
 8012168:	42a3      	cmp	r3, r4
 801216a:	6025      	str	r5, [r4, #0]
 801216c:	bf18      	it	ne
 801216e:	6059      	strne	r1, [r3, #4]
 8012170:	6863      	ldr	r3, [r4, #4]
 8012172:	bf08      	it	eq
 8012174:	f8c8 1000 	streq.w	r1, [r8]
 8012178:	5162      	str	r2, [r4, r5]
 801217a:	604b      	str	r3, [r1, #4]
 801217c:	4638      	mov	r0, r7
 801217e:	f104 060b 	add.w	r6, r4, #11
 8012182:	f000 f83b 	bl	80121fc <__malloc_unlock>
 8012186:	f026 0607 	bic.w	r6, r6, #7
 801218a:	1d23      	adds	r3, r4, #4
 801218c:	1af2      	subs	r2, r6, r3
 801218e:	d0ae      	beq.n	80120ee <_malloc_r+0x22>
 8012190:	1b9b      	subs	r3, r3, r6
 8012192:	50a3      	str	r3, [r4, r2]
 8012194:	e7ab      	b.n	80120ee <_malloc_r+0x22>
 8012196:	42a3      	cmp	r3, r4
 8012198:	6862      	ldr	r2, [r4, #4]
 801219a:	d1dd      	bne.n	8012158 <_malloc_r+0x8c>
 801219c:	f8c8 2000 	str.w	r2, [r8]
 80121a0:	e7ec      	b.n	801217c <_malloc_r+0xb0>
 80121a2:	4623      	mov	r3, r4
 80121a4:	6864      	ldr	r4, [r4, #4]
 80121a6:	e7ac      	b.n	8012102 <_malloc_r+0x36>
 80121a8:	4634      	mov	r4, r6
 80121aa:	6876      	ldr	r6, [r6, #4]
 80121ac:	e7b4      	b.n	8012118 <_malloc_r+0x4c>
 80121ae:	4613      	mov	r3, r2
 80121b0:	e7cc      	b.n	801214c <_malloc_r+0x80>
 80121b2:	230c      	movs	r3, #12
 80121b4:	603b      	str	r3, [r7, #0]
 80121b6:	4638      	mov	r0, r7
 80121b8:	f000 f820 	bl	80121fc <__malloc_unlock>
 80121bc:	e797      	b.n	80120ee <_malloc_r+0x22>
 80121be:	6025      	str	r5, [r4, #0]
 80121c0:	e7dc      	b.n	801217c <_malloc_r+0xb0>
 80121c2:	605b      	str	r3, [r3, #4]
 80121c4:	deff      	udf	#255	; 0xff
 80121c6:	bf00      	nop
 80121c8:	20002c50 	.word	0x20002c50

080121cc <__ascii_mbtowc>:
 80121cc:	b082      	sub	sp, #8
 80121ce:	b901      	cbnz	r1, 80121d2 <__ascii_mbtowc+0x6>
 80121d0:	a901      	add	r1, sp, #4
 80121d2:	b142      	cbz	r2, 80121e6 <__ascii_mbtowc+0x1a>
 80121d4:	b14b      	cbz	r3, 80121ea <__ascii_mbtowc+0x1e>
 80121d6:	7813      	ldrb	r3, [r2, #0]
 80121d8:	600b      	str	r3, [r1, #0]
 80121da:	7812      	ldrb	r2, [r2, #0]
 80121dc:	1e10      	subs	r0, r2, #0
 80121de:	bf18      	it	ne
 80121e0:	2001      	movne	r0, #1
 80121e2:	b002      	add	sp, #8
 80121e4:	4770      	bx	lr
 80121e6:	4610      	mov	r0, r2
 80121e8:	e7fb      	b.n	80121e2 <__ascii_mbtowc+0x16>
 80121ea:	f06f 0001 	mvn.w	r0, #1
 80121ee:	e7f8      	b.n	80121e2 <__ascii_mbtowc+0x16>

080121f0 <__malloc_lock>:
 80121f0:	4801      	ldr	r0, [pc, #4]	; (80121f8 <__malloc_lock+0x8>)
 80121f2:	f7ff bb7e 	b.w	80118f2 <__retarget_lock_acquire_recursive>
 80121f6:	bf00      	nop
 80121f8:	20002c4c 	.word	0x20002c4c

080121fc <__malloc_unlock>:
 80121fc:	4801      	ldr	r0, [pc, #4]	; (8012204 <__malloc_unlock+0x8>)
 80121fe:	f7ff bb79 	b.w	80118f4 <__retarget_lock_release_recursive>
 8012202:	bf00      	nop
 8012204:	20002c4c 	.word	0x20002c4c

08012208 <_Balloc>:
 8012208:	b570      	push	{r4, r5, r6, lr}
 801220a:	69c6      	ldr	r6, [r0, #28]
 801220c:	4604      	mov	r4, r0
 801220e:	460d      	mov	r5, r1
 8012210:	b976      	cbnz	r6, 8012230 <_Balloc+0x28>
 8012212:	2010      	movs	r0, #16
 8012214:	f001 f92a 	bl	801346c <malloc>
 8012218:	4602      	mov	r2, r0
 801221a:	61e0      	str	r0, [r4, #28]
 801221c:	b920      	cbnz	r0, 8012228 <_Balloc+0x20>
 801221e:	4b18      	ldr	r3, [pc, #96]	; (8012280 <_Balloc+0x78>)
 8012220:	4818      	ldr	r0, [pc, #96]	; (8012284 <_Balloc+0x7c>)
 8012222:	216b      	movs	r1, #107	; 0x6b
 8012224:	f001 f8ee 	bl	8013404 <__assert_func>
 8012228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801222c:	6006      	str	r6, [r0, #0]
 801222e:	60c6      	str	r6, [r0, #12]
 8012230:	69e6      	ldr	r6, [r4, #28]
 8012232:	68f3      	ldr	r3, [r6, #12]
 8012234:	b183      	cbz	r3, 8012258 <_Balloc+0x50>
 8012236:	69e3      	ldr	r3, [r4, #28]
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801223e:	b9b8      	cbnz	r0, 8012270 <_Balloc+0x68>
 8012240:	2101      	movs	r1, #1
 8012242:	fa01 f605 	lsl.w	r6, r1, r5
 8012246:	1d72      	adds	r2, r6, #5
 8012248:	0092      	lsls	r2, r2, #2
 801224a:	4620      	mov	r0, r4
 801224c:	f001 f8f8 	bl	8013440 <_calloc_r>
 8012250:	b160      	cbz	r0, 801226c <_Balloc+0x64>
 8012252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012256:	e00e      	b.n	8012276 <_Balloc+0x6e>
 8012258:	2221      	movs	r2, #33	; 0x21
 801225a:	2104      	movs	r1, #4
 801225c:	4620      	mov	r0, r4
 801225e:	f001 f8ef 	bl	8013440 <_calloc_r>
 8012262:	69e3      	ldr	r3, [r4, #28]
 8012264:	60f0      	str	r0, [r6, #12]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1e4      	bne.n	8012236 <_Balloc+0x2e>
 801226c:	2000      	movs	r0, #0
 801226e:	bd70      	pop	{r4, r5, r6, pc}
 8012270:	6802      	ldr	r2, [r0, #0]
 8012272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012276:	2300      	movs	r3, #0
 8012278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801227c:	e7f7      	b.n	801226e <_Balloc+0x66>
 801227e:	bf00      	nop
 8012280:	0802184a 	.word	0x0802184a
 8012284:	08021861 	.word	0x08021861

08012288 <_Bfree>:
 8012288:	b570      	push	{r4, r5, r6, lr}
 801228a:	69c6      	ldr	r6, [r0, #28]
 801228c:	4605      	mov	r5, r0
 801228e:	460c      	mov	r4, r1
 8012290:	b976      	cbnz	r6, 80122b0 <_Bfree+0x28>
 8012292:	2010      	movs	r0, #16
 8012294:	f001 f8ea 	bl	801346c <malloc>
 8012298:	4602      	mov	r2, r0
 801229a:	61e8      	str	r0, [r5, #28]
 801229c:	b920      	cbnz	r0, 80122a8 <_Bfree+0x20>
 801229e:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <_Bfree+0x3c>)
 80122a0:	4809      	ldr	r0, [pc, #36]	; (80122c8 <_Bfree+0x40>)
 80122a2:	218f      	movs	r1, #143	; 0x8f
 80122a4:	f001 f8ae 	bl	8013404 <__assert_func>
 80122a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122ac:	6006      	str	r6, [r0, #0]
 80122ae:	60c6      	str	r6, [r0, #12]
 80122b0:	b13c      	cbz	r4, 80122c2 <_Bfree+0x3a>
 80122b2:	69eb      	ldr	r3, [r5, #28]
 80122b4:	6862      	ldr	r2, [r4, #4]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122bc:	6021      	str	r1, [r4, #0]
 80122be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122c2:	bd70      	pop	{r4, r5, r6, pc}
 80122c4:	0802184a 	.word	0x0802184a
 80122c8:	08021861 	.word	0x08021861

080122cc <__multadd>:
 80122cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d0:	690d      	ldr	r5, [r1, #16]
 80122d2:	4607      	mov	r7, r0
 80122d4:	460c      	mov	r4, r1
 80122d6:	461e      	mov	r6, r3
 80122d8:	f101 0c14 	add.w	ip, r1, #20
 80122dc:	2000      	movs	r0, #0
 80122de:	f8dc 3000 	ldr.w	r3, [ip]
 80122e2:	b299      	uxth	r1, r3
 80122e4:	fb02 6101 	mla	r1, r2, r1, r6
 80122e8:	0c1e      	lsrs	r6, r3, #16
 80122ea:	0c0b      	lsrs	r3, r1, #16
 80122ec:	fb02 3306 	mla	r3, r2, r6, r3
 80122f0:	b289      	uxth	r1, r1
 80122f2:	3001      	adds	r0, #1
 80122f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122f8:	4285      	cmp	r5, r0
 80122fa:	f84c 1b04 	str.w	r1, [ip], #4
 80122fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012302:	dcec      	bgt.n	80122de <__multadd+0x12>
 8012304:	b30e      	cbz	r6, 801234a <__multadd+0x7e>
 8012306:	68a3      	ldr	r3, [r4, #8]
 8012308:	42ab      	cmp	r3, r5
 801230a:	dc19      	bgt.n	8012340 <__multadd+0x74>
 801230c:	6861      	ldr	r1, [r4, #4]
 801230e:	4638      	mov	r0, r7
 8012310:	3101      	adds	r1, #1
 8012312:	f7ff ff79 	bl	8012208 <_Balloc>
 8012316:	4680      	mov	r8, r0
 8012318:	b928      	cbnz	r0, 8012326 <__multadd+0x5a>
 801231a:	4602      	mov	r2, r0
 801231c:	4b0c      	ldr	r3, [pc, #48]	; (8012350 <__multadd+0x84>)
 801231e:	480d      	ldr	r0, [pc, #52]	; (8012354 <__multadd+0x88>)
 8012320:	21ba      	movs	r1, #186	; 0xba
 8012322:	f001 f86f 	bl	8013404 <__assert_func>
 8012326:	6922      	ldr	r2, [r4, #16]
 8012328:	3202      	adds	r2, #2
 801232a:	f104 010c 	add.w	r1, r4, #12
 801232e:	0092      	lsls	r2, r2, #2
 8012330:	300c      	adds	r0, #12
 8012332:	f7ff fae8 	bl	8011906 <memcpy>
 8012336:	4621      	mov	r1, r4
 8012338:	4638      	mov	r0, r7
 801233a:	f7ff ffa5 	bl	8012288 <_Bfree>
 801233e:	4644      	mov	r4, r8
 8012340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012344:	3501      	adds	r5, #1
 8012346:	615e      	str	r6, [r3, #20]
 8012348:	6125      	str	r5, [r4, #16]
 801234a:	4620      	mov	r0, r4
 801234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012350:	080217d9 	.word	0x080217d9
 8012354:	08021861 	.word	0x08021861

08012358 <__s2b>:
 8012358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801235c:	460c      	mov	r4, r1
 801235e:	4615      	mov	r5, r2
 8012360:	461f      	mov	r7, r3
 8012362:	2209      	movs	r2, #9
 8012364:	3308      	adds	r3, #8
 8012366:	4606      	mov	r6, r0
 8012368:	fb93 f3f2 	sdiv	r3, r3, r2
 801236c:	2100      	movs	r1, #0
 801236e:	2201      	movs	r2, #1
 8012370:	429a      	cmp	r2, r3
 8012372:	db09      	blt.n	8012388 <__s2b+0x30>
 8012374:	4630      	mov	r0, r6
 8012376:	f7ff ff47 	bl	8012208 <_Balloc>
 801237a:	b940      	cbnz	r0, 801238e <__s2b+0x36>
 801237c:	4602      	mov	r2, r0
 801237e:	4b19      	ldr	r3, [pc, #100]	; (80123e4 <__s2b+0x8c>)
 8012380:	4819      	ldr	r0, [pc, #100]	; (80123e8 <__s2b+0x90>)
 8012382:	21d3      	movs	r1, #211	; 0xd3
 8012384:	f001 f83e 	bl	8013404 <__assert_func>
 8012388:	0052      	lsls	r2, r2, #1
 801238a:	3101      	adds	r1, #1
 801238c:	e7f0      	b.n	8012370 <__s2b+0x18>
 801238e:	9b08      	ldr	r3, [sp, #32]
 8012390:	6143      	str	r3, [r0, #20]
 8012392:	2d09      	cmp	r5, #9
 8012394:	f04f 0301 	mov.w	r3, #1
 8012398:	6103      	str	r3, [r0, #16]
 801239a:	dd16      	ble.n	80123ca <__s2b+0x72>
 801239c:	f104 0909 	add.w	r9, r4, #9
 80123a0:	46c8      	mov	r8, r9
 80123a2:	442c      	add	r4, r5
 80123a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80123a8:	4601      	mov	r1, r0
 80123aa:	3b30      	subs	r3, #48	; 0x30
 80123ac:	220a      	movs	r2, #10
 80123ae:	4630      	mov	r0, r6
 80123b0:	f7ff ff8c 	bl	80122cc <__multadd>
 80123b4:	45a0      	cmp	r8, r4
 80123b6:	d1f5      	bne.n	80123a4 <__s2b+0x4c>
 80123b8:	f1a5 0408 	sub.w	r4, r5, #8
 80123bc:	444c      	add	r4, r9
 80123be:	1b2d      	subs	r5, r5, r4
 80123c0:	1963      	adds	r3, r4, r5
 80123c2:	42bb      	cmp	r3, r7
 80123c4:	db04      	blt.n	80123d0 <__s2b+0x78>
 80123c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ca:	340a      	adds	r4, #10
 80123cc:	2509      	movs	r5, #9
 80123ce:	e7f6      	b.n	80123be <__s2b+0x66>
 80123d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123d4:	4601      	mov	r1, r0
 80123d6:	3b30      	subs	r3, #48	; 0x30
 80123d8:	220a      	movs	r2, #10
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ff ff76 	bl	80122cc <__multadd>
 80123e0:	e7ee      	b.n	80123c0 <__s2b+0x68>
 80123e2:	bf00      	nop
 80123e4:	080217d9 	.word	0x080217d9
 80123e8:	08021861 	.word	0x08021861

080123ec <__hi0bits>:
 80123ec:	0c03      	lsrs	r3, r0, #16
 80123ee:	041b      	lsls	r3, r3, #16
 80123f0:	b9d3      	cbnz	r3, 8012428 <__hi0bits+0x3c>
 80123f2:	0400      	lsls	r0, r0, #16
 80123f4:	2310      	movs	r3, #16
 80123f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80123fa:	bf04      	itt	eq
 80123fc:	0200      	lsleq	r0, r0, #8
 80123fe:	3308      	addeq	r3, #8
 8012400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012404:	bf04      	itt	eq
 8012406:	0100      	lsleq	r0, r0, #4
 8012408:	3304      	addeq	r3, #4
 801240a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801240e:	bf04      	itt	eq
 8012410:	0080      	lsleq	r0, r0, #2
 8012412:	3302      	addeq	r3, #2
 8012414:	2800      	cmp	r0, #0
 8012416:	db05      	blt.n	8012424 <__hi0bits+0x38>
 8012418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801241c:	f103 0301 	add.w	r3, r3, #1
 8012420:	bf08      	it	eq
 8012422:	2320      	moveq	r3, #32
 8012424:	4618      	mov	r0, r3
 8012426:	4770      	bx	lr
 8012428:	2300      	movs	r3, #0
 801242a:	e7e4      	b.n	80123f6 <__hi0bits+0xa>

0801242c <__lo0bits>:
 801242c:	6803      	ldr	r3, [r0, #0]
 801242e:	f013 0207 	ands.w	r2, r3, #7
 8012432:	d00c      	beq.n	801244e <__lo0bits+0x22>
 8012434:	07d9      	lsls	r1, r3, #31
 8012436:	d422      	bmi.n	801247e <__lo0bits+0x52>
 8012438:	079a      	lsls	r2, r3, #30
 801243a:	bf49      	itett	mi
 801243c:	085b      	lsrmi	r3, r3, #1
 801243e:	089b      	lsrpl	r3, r3, #2
 8012440:	6003      	strmi	r3, [r0, #0]
 8012442:	2201      	movmi	r2, #1
 8012444:	bf5c      	itt	pl
 8012446:	6003      	strpl	r3, [r0, #0]
 8012448:	2202      	movpl	r2, #2
 801244a:	4610      	mov	r0, r2
 801244c:	4770      	bx	lr
 801244e:	b299      	uxth	r1, r3
 8012450:	b909      	cbnz	r1, 8012456 <__lo0bits+0x2a>
 8012452:	0c1b      	lsrs	r3, r3, #16
 8012454:	2210      	movs	r2, #16
 8012456:	b2d9      	uxtb	r1, r3
 8012458:	b909      	cbnz	r1, 801245e <__lo0bits+0x32>
 801245a:	3208      	adds	r2, #8
 801245c:	0a1b      	lsrs	r3, r3, #8
 801245e:	0719      	lsls	r1, r3, #28
 8012460:	bf04      	itt	eq
 8012462:	091b      	lsreq	r3, r3, #4
 8012464:	3204      	addeq	r2, #4
 8012466:	0799      	lsls	r1, r3, #30
 8012468:	bf04      	itt	eq
 801246a:	089b      	lsreq	r3, r3, #2
 801246c:	3202      	addeq	r2, #2
 801246e:	07d9      	lsls	r1, r3, #31
 8012470:	d403      	bmi.n	801247a <__lo0bits+0x4e>
 8012472:	085b      	lsrs	r3, r3, #1
 8012474:	f102 0201 	add.w	r2, r2, #1
 8012478:	d003      	beq.n	8012482 <__lo0bits+0x56>
 801247a:	6003      	str	r3, [r0, #0]
 801247c:	e7e5      	b.n	801244a <__lo0bits+0x1e>
 801247e:	2200      	movs	r2, #0
 8012480:	e7e3      	b.n	801244a <__lo0bits+0x1e>
 8012482:	2220      	movs	r2, #32
 8012484:	e7e1      	b.n	801244a <__lo0bits+0x1e>
	...

08012488 <__i2b>:
 8012488:	b510      	push	{r4, lr}
 801248a:	460c      	mov	r4, r1
 801248c:	2101      	movs	r1, #1
 801248e:	f7ff febb 	bl	8012208 <_Balloc>
 8012492:	4602      	mov	r2, r0
 8012494:	b928      	cbnz	r0, 80124a2 <__i2b+0x1a>
 8012496:	4b05      	ldr	r3, [pc, #20]	; (80124ac <__i2b+0x24>)
 8012498:	4805      	ldr	r0, [pc, #20]	; (80124b0 <__i2b+0x28>)
 801249a:	f240 1145 	movw	r1, #325	; 0x145
 801249e:	f000 ffb1 	bl	8013404 <__assert_func>
 80124a2:	2301      	movs	r3, #1
 80124a4:	6144      	str	r4, [r0, #20]
 80124a6:	6103      	str	r3, [r0, #16]
 80124a8:	bd10      	pop	{r4, pc}
 80124aa:	bf00      	nop
 80124ac:	080217d9 	.word	0x080217d9
 80124b0:	08021861 	.word	0x08021861

080124b4 <__multiply>:
 80124b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	4691      	mov	r9, r2
 80124ba:	690a      	ldr	r2, [r1, #16]
 80124bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	bfb8      	it	lt
 80124c4:	460b      	movlt	r3, r1
 80124c6:	460c      	mov	r4, r1
 80124c8:	bfbc      	itt	lt
 80124ca:	464c      	movlt	r4, r9
 80124cc:	4699      	movlt	r9, r3
 80124ce:	6927      	ldr	r7, [r4, #16]
 80124d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124d4:	68a3      	ldr	r3, [r4, #8]
 80124d6:	6861      	ldr	r1, [r4, #4]
 80124d8:	eb07 060a 	add.w	r6, r7, sl
 80124dc:	42b3      	cmp	r3, r6
 80124de:	b085      	sub	sp, #20
 80124e0:	bfb8      	it	lt
 80124e2:	3101      	addlt	r1, #1
 80124e4:	f7ff fe90 	bl	8012208 <_Balloc>
 80124e8:	b930      	cbnz	r0, 80124f8 <__multiply+0x44>
 80124ea:	4602      	mov	r2, r0
 80124ec:	4b44      	ldr	r3, [pc, #272]	; (8012600 <__multiply+0x14c>)
 80124ee:	4845      	ldr	r0, [pc, #276]	; (8012604 <__multiply+0x150>)
 80124f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80124f4:	f000 ff86 	bl	8013404 <__assert_func>
 80124f8:	f100 0514 	add.w	r5, r0, #20
 80124fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012500:	462b      	mov	r3, r5
 8012502:	2200      	movs	r2, #0
 8012504:	4543      	cmp	r3, r8
 8012506:	d321      	bcc.n	801254c <__multiply+0x98>
 8012508:	f104 0314 	add.w	r3, r4, #20
 801250c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012510:	f109 0314 	add.w	r3, r9, #20
 8012514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012518:	9202      	str	r2, [sp, #8]
 801251a:	1b3a      	subs	r2, r7, r4
 801251c:	3a15      	subs	r2, #21
 801251e:	f022 0203 	bic.w	r2, r2, #3
 8012522:	3204      	adds	r2, #4
 8012524:	f104 0115 	add.w	r1, r4, #21
 8012528:	428f      	cmp	r7, r1
 801252a:	bf38      	it	cc
 801252c:	2204      	movcc	r2, #4
 801252e:	9201      	str	r2, [sp, #4]
 8012530:	9a02      	ldr	r2, [sp, #8]
 8012532:	9303      	str	r3, [sp, #12]
 8012534:	429a      	cmp	r2, r3
 8012536:	d80c      	bhi.n	8012552 <__multiply+0x9e>
 8012538:	2e00      	cmp	r6, #0
 801253a:	dd03      	ble.n	8012544 <__multiply+0x90>
 801253c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012540:	2b00      	cmp	r3, #0
 8012542:	d05b      	beq.n	80125fc <__multiply+0x148>
 8012544:	6106      	str	r6, [r0, #16]
 8012546:	b005      	add	sp, #20
 8012548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254c:	f843 2b04 	str.w	r2, [r3], #4
 8012550:	e7d8      	b.n	8012504 <__multiply+0x50>
 8012552:	f8b3 a000 	ldrh.w	sl, [r3]
 8012556:	f1ba 0f00 	cmp.w	sl, #0
 801255a:	d024      	beq.n	80125a6 <__multiply+0xf2>
 801255c:	f104 0e14 	add.w	lr, r4, #20
 8012560:	46a9      	mov	r9, r5
 8012562:	f04f 0c00 	mov.w	ip, #0
 8012566:	f85e 2b04 	ldr.w	r2, [lr], #4
 801256a:	f8d9 1000 	ldr.w	r1, [r9]
 801256e:	fa1f fb82 	uxth.w	fp, r2
 8012572:	b289      	uxth	r1, r1
 8012574:	fb0a 110b 	mla	r1, sl, fp, r1
 8012578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801257c:	f8d9 2000 	ldr.w	r2, [r9]
 8012580:	4461      	add	r1, ip
 8012582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012586:	fb0a c20b 	mla	r2, sl, fp, ip
 801258a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801258e:	b289      	uxth	r1, r1
 8012590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012594:	4577      	cmp	r7, lr
 8012596:	f849 1b04 	str.w	r1, [r9], #4
 801259a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801259e:	d8e2      	bhi.n	8012566 <__multiply+0xb2>
 80125a0:	9a01      	ldr	r2, [sp, #4]
 80125a2:	f845 c002 	str.w	ip, [r5, r2]
 80125a6:	9a03      	ldr	r2, [sp, #12]
 80125a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125ac:	3304      	adds	r3, #4
 80125ae:	f1b9 0f00 	cmp.w	r9, #0
 80125b2:	d021      	beq.n	80125f8 <__multiply+0x144>
 80125b4:	6829      	ldr	r1, [r5, #0]
 80125b6:	f104 0c14 	add.w	ip, r4, #20
 80125ba:	46ae      	mov	lr, r5
 80125bc:	f04f 0a00 	mov.w	sl, #0
 80125c0:	f8bc b000 	ldrh.w	fp, [ip]
 80125c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80125c8:	fb09 220b 	mla	r2, r9, fp, r2
 80125cc:	4452      	add	r2, sl
 80125ce:	b289      	uxth	r1, r1
 80125d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125d4:	f84e 1b04 	str.w	r1, [lr], #4
 80125d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80125dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125e0:	f8be 1000 	ldrh.w	r1, [lr]
 80125e4:	fb09 110a 	mla	r1, r9, sl, r1
 80125e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80125ec:	4567      	cmp	r7, ip
 80125ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125f2:	d8e5      	bhi.n	80125c0 <__multiply+0x10c>
 80125f4:	9a01      	ldr	r2, [sp, #4]
 80125f6:	50a9      	str	r1, [r5, r2]
 80125f8:	3504      	adds	r5, #4
 80125fa:	e799      	b.n	8012530 <__multiply+0x7c>
 80125fc:	3e01      	subs	r6, #1
 80125fe:	e79b      	b.n	8012538 <__multiply+0x84>
 8012600:	080217d9 	.word	0x080217d9
 8012604:	08021861 	.word	0x08021861

08012608 <__pow5mult>:
 8012608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801260c:	4615      	mov	r5, r2
 801260e:	f012 0203 	ands.w	r2, r2, #3
 8012612:	4606      	mov	r6, r0
 8012614:	460f      	mov	r7, r1
 8012616:	d007      	beq.n	8012628 <__pow5mult+0x20>
 8012618:	4c25      	ldr	r4, [pc, #148]	; (80126b0 <__pow5mult+0xa8>)
 801261a:	3a01      	subs	r2, #1
 801261c:	2300      	movs	r3, #0
 801261e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012622:	f7ff fe53 	bl	80122cc <__multadd>
 8012626:	4607      	mov	r7, r0
 8012628:	10ad      	asrs	r5, r5, #2
 801262a:	d03d      	beq.n	80126a8 <__pow5mult+0xa0>
 801262c:	69f4      	ldr	r4, [r6, #28]
 801262e:	b97c      	cbnz	r4, 8012650 <__pow5mult+0x48>
 8012630:	2010      	movs	r0, #16
 8012632:	f000 ff1b 	bl	801346c <malloc>
 8012636:	4602      	mov	r2, r0
 8012638:	61f0      	str	r0, [r6, #28]
 801263a:	b928      	cbnz	r0, 8012648 <__pow5mult+0x40>
 801263c:	4b1d      	ldr	r3, [pc, #116]	; (80126b4 <__pow5mult+0xac>)
 801263e:	481e      	ldr	r0, [pc, #120]	; (80126b8 <__pow5mult+0xb0>)
 8012640:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012644:	f000 fede 	bl	8013404 <__assert_func>
 8012648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801264c:	6004      	str	r4, [r0, #0]
 801264e:	60c4      	str	r4, [r0, #12]
 8012650:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012658:	b94c      	cbnz	r4, 801266e <__pow5mult+0x66>
 801265a:	f240 2171 	movw	r1, #625	; 0x271
 801265e:	4630      	mov	r0, r6
 8012660:	f7ff ff12 	bl	8012488 <__i2b>
 8012664:	2300      	movs	r3, #0
 8012666:	f8c8 0008 	str.w	r0, [r8, #8]
 801266a:	4604      	mov	r4, r0
 801266c:	6003      	str	r3, [r0, #0]
 801266e:	f04f 0900 	mov.w	r9, #0
 8012672:	07eb      	lsls	r3, r5, #31
 8012674:	d50a      	bpl.n	801268c <__pow5mult+0x84>
 8012676:	4639      	mov	r1, r7
 8012678:	4622      	mov	r2, r4
 801267a:	4630      	mov	r0, r6
 801267c:	f7ff ff1a 	bl	80124b4 <__multiply>
 8012680:	4639      	mov	r1, r7
 8012682:	4680      	mov	r8, r0
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff fdff 	bl	8012288 <_Bfree>
 801268a:	4647      	mov	r7, r8
 801268c:	106d      	asrs	r5, r5, #1
 801268e:	d00b      	beq.n	80126a8 <__pow5mult+0xa0>
 8012690:	6820      	ldr	r0, [r4, #0]
 8012692:	b938      	cbnz	r0, 80126a4 <__pow5mult+0x9c>
 8012694:	4622      	mov	r2, r4
 8012696:	4621      	mov	r1, r4
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff ff0b 	bl	80124b4 <__multiply>
 801269e:	6020      	str	r0, [r4, #0]
 80126a0:	f8c0 9000 	str.w	r9, [r0]
 80126a4:	4604      	mov	r4, r0
 80126a6:	e7e4      	b.n	8012672 <__pow5mult+0x6a>
 80126a8:	4638      	mov	r0, r7
 80126aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ae:	bf00      	nop
 80126b0:	080219b0 	.word	0x080219b0
 80126b4:	0802184a 	.word	0x0802184a
 80126b8:	08021861 	.word	0x08021861

080126bc <__lshift>:
 80126bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c0:	460c      	mov	r4, r1
 80126c2:	6849      	ldr	r1, [r1, #4]
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126ca:	68a3      	ldr	r3, [r4, #8]
 80126cc:	4607      	mov	r7, r0
 80126ce:	4691      	mov	r9, r2
 80126d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126d4:	f108 0601 	add.w	r6, r8, #1
 80126d8:	42b3      	cmp	r3, r6
 80126da:	db0b      	blt.n	80126f4 <__lshift+0x38>
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff fd93 	bl	8012208 <_Balloc>
 80126e2:	4605      	mov	r5, r0
 80126e4:	b948      	cbnz	r0, 80126fa <__lshift+0x3e>
 80126e6:	4602      	mov	r2, r0
 80126e8:	4b28      	ldr	r3, [pc, #160]	; (801278c <__lshift+0xd0>)
 80126ea:	4829      	ldr	r0, [pc, #164]	; (8012790 <__lshift+0xd4>)
 80126ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80126f0:	f000 fe88 	bl	8013404 <__assert_func>
 80126f4:	3101      	adds	r1, #1
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	e7ee      	b.n	80126d8 <__lshift+0x1c>
 80126fa:	2300      	movs	r3, #0
 80126fc:	f100 0114 	add.w	r1, r0, #20
 8012700:	f100 0210 	add.w	r2, r0, #16
 8012704:	4618      	mov	r0, r3
 8012706:	4553      	cmp	r3, sl
 8012708:	db33      	blt.n	8012772 <__lshift+0xb6>
 801270a:	6920      	ldr	r0, [r4, #16]
 801270c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012710:	f104 0314 	add.w	r3, r4, #20
 8012714:	f019 091f 	ands.w	r9, r9, #31
 8012718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801271c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012720:	d02b      	beq.n	801277a <__lshift+0xbe>
 8012722:	f1c9 0e20 	rsb	lr, r9, #32
 8012726:	468a      	mov	sl, r1
 8012728:	2200      	movs	r2, #0
 801272a:	6818      	ldr	r0, [r3, #0]
 801272c:	fa00 f009 	lsl.w	r0, r0, r9
 8012730:	4310      	orrs	r0, r2
 8012732:	f84a 0b04 	str.w	r0, [sl], #4
 8012736:	f853 2b04 	ldr.w	r2, [r3], #4
 801273a:	459c      	cmp	ip, r3
 801273c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012740:	d8f3      	bhi.n	801272a <__lshift+0x6e>
 8012742:	ebac 0304 	sub.w	r3, ip, r4
 8012746:	3b15      	subs	r3, #21
 8012748:	f023 0303 	bic.w	r3, r3, #3
 801274c:	3304      	adds	r3, #4
 801274e:	f104 0015 	add.w	r0, r4, #21
 8012752:	4584      	cmp	ip, r0
 8012754:	bf38      	it	cc
 8012756:	2304      	movcc	r3, #4
 8012758:	50ca      	str	r2, [r1, r3]
 801275a:	b10a      	cbz	r2, 8012760 <__lshift+0xa4>
 801275c:	f108 0602 	add.w	r6, r8, #2
 8012760:	3e01      	subs	r6, #1
 8012762:	4638      	mov	r0, r7
 8012764:	612e      	str	r6, [r5, #16]
 8012766:	4621      	mov	r1, r4
 8012768:	f7ff fd8e 	bl	8012288 <_Bfree>
 801276c:	4628      	mov	r0, r5
 801276e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012772:	f842 0f04 	str.w	r0, [r2, #4]!
 8012776:	3301      	adds	r3, #1
 8012778:	e7c5      	b.n	8012706 <__lshift+0x4a>
 801277a:	3904      	subs	r1, #4
 801277c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012780:	f841 2f04 	str.w	r2, [r1, #4]!
 8012784:	459c      	cmp	ip, r3
 8012786:	d8f9      	bhi.n	801277c <__lshift+0xc0>
 8012788:	e7ea      	b.n	8012760 <__lshift+0xa4>
 801278a:	bf00      	nop
 801278c:	080217d9 	.word	0x080217d9
 8012790:	08021861 	.word	0x08021861

08012794 <__mcmp>:
 8012794:	b530      	push	{r4, r5, lr}
 8012796:	6902      	ldr	r2, [r0, #16]
 8012798:	690c      	ldr	r4, [r1, #16]
 801279a:	1b12      	subs	r2, r2, r4
 801279c:	d10e      	bne.n	80127bc <__mcmp+0x28>
 801279e:	f100 0314 	add.w	r3, r0, #20
 80127a2:	3114      	adds	r1, #20
 80127a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127b4:	42a5      	cmp	r5, r4
 80127b6:	d003      	beq.n	80127c0 <__mcmp+0x2c>
 80127b8:	d305      	bcc.n	80127c6 <__mcmp+0x32>
 80127ba:	2201      	movs	r2, #1
 80127bc:	4610      	mov	r0, r2
 80127be:	bd30      	pop	{r4, r5, pc}
 80127c0:	4283      	cmp	r3, r0
 80127c2:	d3f3      	bcc.n	80127ac <__mcmp+0x18>
 80127c4:	e7fa      	b.n	80127bc <__mcmp+0x28>
 80127c6:	f04f 32ff 	mov.w	r2, #4294967295
 80127ca:	e7f7      	b.n	80127bc <__mcmp+0x28>

080127cc <__mdiff>:
 80127cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	460c      	mov	r4, r1
 80127d2:	4606      	mov	r6, r0
 80127d4:	4611      	mov	r1, r2
 80127d6:	4620      	mov	r0, r4
 80127d8:	4690      	mov	r8, r2
 80127da:	f7ff ffdb 	bl	8012794 <__mcmp>
 80127de:	1e05      	subs	r5, r0, #0
 80127e0:	d110      	bne.n	8012804 <__mdiff+0x38>
 80127e2:	4629      	mov	r1, r5
 80127e4:	4630      	mov	r0, r6
 80127e6:	f7ff fd0f 	bl	8012208 <_Balloc>
 80127ea:	b930      	cbnz	r0, 80127fa <__mdiff+0x2e>
 80127ec:	4b3a      	ldr	r3, [pc, #232]	; (80128d8 <__mdiff+0x10c>)
 80127ee:	4602      	mov	r2, r0
 80127f0:	f240 2137 	movw	r1, #567	; 0x237
 80127f4:	4839      	ldr	r0, [pc, #228]	; (80128dc <__mdiff+0x110>)
 80127f6:	f000 fe05 	bl	8013404 <__assert_func>
 80127fa:	2301      	movs	r3, #1
 80127fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	bfa4      	itt	ge
 8012806:	4643      	movge	r3, r8
 8012808:	46a0      	movge	r8, r4
 801280a:	4630      	mov	r0, r6
 801280c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012810:	bfa6      	itte	ge
 8012812:	461c      	movge	r4, r3
 8012814:	2500      	movge	r5, #0
 8012816:	2501      	movlt	r5, #1
 8012818:	f7ff fcf6 	bl	8012208 <_Balloc>
 801281c:	b920      	cbnz	r0, 8012828 <__mdiff+0x5c>
 801281e:	4b2e      	ldr	r3, [pc, #184]	; (80128d8 <__mdiff+0x10c>)
 8012820:	4602      	mov	r2, r0
 8012822:	f240 2145 	movw	r1, #581	; 0x245
 8012826:	e7e5      	b.n	80127f4 <__mdiff+0x28>
 8012828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801282c:	6926      	ldr	r6, [r4, #16]
 801282e:	60c5      	str	r5, [r0, #12]
 8012830:	f104 0914 	add.w	r9, r4, #20
 8012834:	f108 0514 	add.w	r5, r8, #20
 8012838:	f100 0e14 	add.w	lr, r0, #20
 801283c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012844:	f108 0210 	add.w	r2, r8, #16
 8012848:	46f2      	mov	sl, lr
 801284a:	2100      	movs	r1, #0
 801284c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012854:	fa11 f88b 	uxtah	r8, r1, fp
 8012858:	b299      	uxth	r1, r3
 801285a:	0c1b      	lsrs	r3, r3, #16
 801285c:	eba8 0801 	sub.w	r8, r8, r1
 8012860:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012864:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012868:	fa1f f888 	uxth.w	r8, r8
 801286c:	1419      	asrs	r1, r3, #16
 801286e:	454e      	cmp	r6, r9
 8012870:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012874:	f84a 3b04 	str.w	r3, [sl], #4
 8012878:	d8e8      	bhi.n	801284c <__mdiff+0x80>
 801287a:	1b33      	subs	r3, r6, r4
 801287c:	3b15      	subs	r3, #21
 801287e:	f023 0303 	bic.w	r3, r3, #3
 8012882:	3304      	adds	r3, #4
 8012884:	3415      	adds	r4, #21
 8012886:	42a6      	cmp	r6, r4
 8012888:	bf38      	it	cc
 801288a:	2304      	movcc	r3, #4
 801288c:	441d      	add	r5, r3
 801288e:	4473      	add	r3, lr
 8012890:	469e      	mov	lr, r3
 8012892:	462e      	mov	r6, r5
 8012894:	4566      	cmp	r6, ip
 8012896:	d30e      	bcc.n	80128b6 <__mdiff+0xea>
 8012898:	f10c 0203 	add.w	r2, ip, #3
 801289c:	1b52      	subs	r2, r2, r5
 801289e:	f022 0203 	bic.w	r2, r2, #3
 80128a2:	3d03      	subs	r5, #3
 80128a4:	45ac      	cmp	ip, r5
 80128a6:	bf38      	it	cc
 80128a8:	2200      	movcc	r2, #0
 80128aa:	4413      	add	r3, r2
 80128ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80128b0:	b17a      	cbz	r2, 80128d2 <__mdiff+0x106>
 80128b2:	6107      	str	r7, [r0, #16]
 80128b4:	e7a4      	b.n	8012800 <__mdiff+0x34>
 80128b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80128ba:	fa11 f288 	uxtah	r2, r1, r8
 80128be:	1414      	asrs	r4, r2, #16
 80128c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128c4:	b292      	uxth	r2, r2
 80128c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128ca:	f84e 2b04 	str.w	r2, [lr], #4
 80128ce:	1421      	asrs	r1, r4, #16
 80128d0:	e7e0      	b.n	8012894 <__mdiff+0xc8>
 80128d2:	3f01      	subs	r7, #1
 80128d4:	e7ea      	b.n	80128ac <__mdiff+0xe0>
 80128d6:	bf00      	nop
 80128d8:	080217d9 	.word	0x080217d9
 80128dc:	08021861 	.word	0x08021861

080128e0 <__ulp>:
 80128e0:	b082      	sub	sp, #8
 80128e2:	ed8d 0b00 	vstr	d0, [sp]
 80128e6:	9a01      	ldr	r2, [sp, #4]
 80128e8:	4b0f      	ldr	r3, [pc, #60]	; (8012928 <__ulp+0x48>)
 80128ea:	4013      	ands	r3, r2
 80128ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	dc08      	bgt.n	8012906 <__ulp+0x26>
 80128f4:	425b      	negs	r3, r3
 80128f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80128fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80128fe:	da04      	bge.n	801290a <__ulp+0x2a>
 8012900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012904:	4113      	asrs	r3, r2
 8012906:	2200      	movs	r2, #0
 8012908:	e008      	b.n	801291c <__ulp+0x3c>
 801290a:	f1a2 0314 	sub.w	r3, r2, #20
 801290e:	2b1e      	cmp	r3, #30
 8012910:	bfda      	itte	le
 8012912:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012916:	40da      	lsrle	r2, r3
 8012918:	2201      	movgt	r2, #1
 801291a:	2300      	movs	r3, #0
 801291c:	4619      	mov	r1, r3
 801291e:	4610      	mov	r0, r2
 8012920:	ec41 0b10 	vmov	d0, r0, r1
 8012924:	b002      	add	sp, #8
 8012926:	4770      	bx	lr
 8012928:	7ff00000 	.word	0x7ff00000

0801292c <__b2d>:
 801292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012930:	6906      	ldr	r6, [r0, #16]
 8012932:	f100 0814 	add.w	r8, r0, #20
 8012936:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801293a:	1f37      	subs	r7, r6, #4
 801293c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012940:	4610      	mov	r0, r2
 8012942:	f7ff fd53 	bl	80123ec <__hi0bits>
 8012946:	f1c0 0320 	rsb	r3, r0, #32
 801294a:	280a      	cmp	r0, #10
 801294c:	600b      	str	r3, [r1, #0]
 801294e:	491b      	ldr	r1, [pc, #108]	; (80129bc <__b2d+0x90>)
 8012950:	dc15      	bgt.n	801297e <__b2d+0x52>
 8012952:	f1c0 0c0b 	rsb	ip, r0, #11
 8012956:	fa22 f30c 	lsr.w	r3, r2, ip
 801295a:	45b8      	cmp	r8, r7
 801295c:	ea43 0501 	orr.w	r5, r3, r1
 8012960:	bf34      	ite	cc
 8012962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012966:	2300      	movcs	r3, #0
 8012968:	3015      	adds	r0, #21
 801296a:	fa02 f000 	lsl.w	r0, r2, r0
 801296e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012972:	4303      	orrs	r3, r0
 8012974:	461c      	mov	r4, r3
 8012976:	ec45 4b10 	vmov	d0, r4, r5
 801297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801297e:	45b8      	cmp	r8, r7
 8012980:	bf3a      	itte	cc
 8012982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012986:	f1a6 0708 	subcc.w	r7, r6, #8
 801298a:	2300      	movcs	r3, #0
 801298c:	380b      	subs	r0, #11
 801298e:	d012      	beq.n	80129b6 <__b2d+0x8a>
 8012990:	f1c0 0120 	rsb	r1, r0, #32
 8012994:	fa23 f401 	lsr.w	r4, r3, r1
 8012998:	4082      	lsls	r2, r0
 801299a:	4322      	orrs	r2, r4
 801299c:	4547      	cmp	r7, r8
 801299e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80129a2:	bf8c      	ite	hi
 80129a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80129a8:	2200      	movls	r2, #0
 80129aa:	4083      	lsls	r3, r0
 80129ac:	40ca      	lsrs	r2, r1
 80129ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80129b2:	4313      	orrs	r3, r2
 80129b4:	e7de      	b.n	8012974 <__b2d+0x48>
 80129b6:	ea42 0501 	orr.w	r5, r2, r1
 80129ba:	e7db      	b.n	8012974 <__b2d+0x48>
 80129bc:	3ff00000 	.word	0x3ff00000

080129c0 <__d2b>:
 80129c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129c4:	460f      	mov	r7, r1
 80129c6:	2101      	movs	r1, #1
 80129c8:	ec59 8b10 	vmov	r8, r9, d0
 80129cc:	4616      	mov	r6, r2
 80129ce:	f7ff fc1b 	bl	8012208 <_Balloc>
 80129d2:	4604      	mov	r4, r0
 80129d4:	b930      	cbnz	r0, 80129e4 <__d2b+0x24>
 80129d6:	4602      	mov	r2, r0
 80129d8:	4b24      	ldr	r3, [pc, #144]	; (8012a6c <__d2b+0xac>)
 80129da:	4825      	ldr	r0, [pc, #148]	; (8012a70 <__d2b+0xb0>)
 80129dc:	f240 310f 	movw	r1, #783	; 0x30f
 80129e0:	f000 fd10 	bl	8013404 <__assert_func>
 80129e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80129e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80129ec:	bb2d      	cbnz	r5, 8012a3a <__d2b+0x7a>
 80129ee:	9301      	str	r3, [sp, #4]
 80129f0:	f1b8 0300 	subs.w	r3, r8, #0
 80129f4:	d026      	beq.n	8012a44 <__d2b+0x84>
 80129f6:	4668      	mov	r0, sp
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	f7ff fd17 	bl	801242c <__lo0bits>
 80129fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012a02:	b1e8      	cbz	r0, 8012a40 <__d2b+0x80>
 8012a04:	f1c0 0320 	rsb	r3, r0, #32
 8012a08:	fa02 f303 	lsl.w	r3, r2, r3
 8012a0c:	430b      	orrs	r3, r1
 8012a0e:	40c2      	lsrs	r2, r0
 8012a10:	6163      	str	r3, [r4, #20]
 8012a12:	9201      	str	r2, [sp, #4]
 8012a14:	9b01      	ldr	r3, [sp, #4]
 8012a16:	61a3      	str	r3, [r4, #24]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	bf14      	ite	ne
 8012a1c:	2202      	movne	r2, #2
 8012a1e:	2201      	moveq	r2, #1
 8012a20:	6122      	str	r2, [r4, #16]
 8012a22:	b1bd      	cbz	r5, 8012a54 <__d2b+0x94>
 8012a24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a28:	4405      	add	r5, r0
 8012a2a:	603d      	str	r5, [r7, #0]
 8012a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a30:	6030      	str	r0, [r6, #0]
 8012a32:	4620      	mov	r0, r4
 8012a34:	b003      	add	sp, #12
 8012a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a3e:	e7d6      	b.n	80129ee <__d2b+0x2e>
 8012a40:	6161      	str	r1, [r4, #20]
 8012a42:	e7e7      	b.n	8012a14 <__d2b+0x54>
 8012a44:	a801      	add	r0, sp, #4
 8012a46:	f7ff fcf1 	bl	801242c <__lo0bits>
 8012a4a:	9b01      	ldr	r3, [sp, #4]
 8012a4c:	6163      	str	r3, [r4, #20]
 8012a4e:	3020      	adds	r0, #32
 8012a50:	2201      	movs	r2, #1
 8012a52:	e7e5      	b.n	8012a20 <__d2b+0x60>
 8012a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a5c:	6038      	str	r0, [r7, #0]
 8012a5e:	6918      	ldr	r0, [r3, #16]
 8012a60:	f7ff fcc4 	bl	80123ec <__hi0bits>
 8012a64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a68:	e7e2      	b.n	8012a30 <__d2b+0x70>
 8012a6a:	bf00      	nop
 8012a6c:	080217d9 	.word	0x080217d9
 8012a70:	08021861 	.word	0x08021861

08012a74 <__ratio>:
 8012a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a78:	4688      	mov	r8, r1
 8012a7a:	4669      	mov	r1, sp
 8012a7c:	4681      	mov	r9, r0
 8012a7e:	f7ff ff55 	bl	801292c <__b2d>
 8012a82:	a901      	add	r1, sp, #4
 8012a84:	4640      	mov	r0, r8
 8012a86:	ec55 4b10 	vmov	r4, r5, d0
 8012a8a:	f7ff ff4f 	bl	801292c <__b2d>
 8012a8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a96:	eba3 0c02 	sub.w	ip, r3, r2
 8012a9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a9e:	1a9b      	subs	r3, r3, r2
 8012aa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012aa4:	ec51 0b10 	vmov	r0, r1, d0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	bfd6      	itet	le
 8012aac:	460a      	movle	r2, r1
 8012aae:	462a      	movgt	r2, r5
 8012ab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ab4:	468b      	mov	fp, r1
 8012ab6:	462f      	mov	r7, r5
 8012ab8:	bfd4      	ite	le
 8012aba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012abe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	ee10 2a10 	vmov	r2, s0
 8012ac8:	465b      	mov	r3, fp
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ed fec6 	bl	800085c <__aeabi_ddiv>
 8012ad0:	ec41 0b10 	vmov	d0, r0, r1
 8012ad4:	b003      	add	sp, #12
 8012ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ada <__copybits>:
 8012ada:	3901      	subs	r1, #1
 8012adc:	b570      	push	{r4, r5, r6, lr}
 8012ade:	1149      	asrs	r1, r1, #5
 8012ae0:	6914      	ldr	r4, [r2, #16]
 8012ae2:	3101      	adds	r1, #1
 8012ae4:	f102 0314 	add.w	r3, r2, #20
 8012ae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012af0:	1f05      	subs	r5, r0, #4
 8012af2:	42a3      	cmp	r3, r4
 8012af4:	d30c      	bcc.n	8012b10 <__copybits+0x36>
 8012af6:	1aa3      	subs	r3, r4, r2
 8012af8:	3b11      	subs	r3, #17
 8012afa:	f023 0303 	bic.w	r3, r3, #3
 8012afe:	3211      	adds	r2, #17
 8012b00:	42a2      	cmp	r2, r4
 8012b02:	bf88      	it	hi
 8012b04:	2300      	movhi	r3, #0
 8012b06:	4418      	add	r0, r3
 8012b08:	2300      	movs	r3, #0
 8012b0a:	4288      	cmp	r0, r1
 8012b0c:	d305      	bcc.n	8012b1a <__copybits+0x40>
 8012b0e:	bd70      	pop	{r4, r5, r6, pc}
 8012b10:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b14:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b18:	e7eb      	b.n	8012af2 <__copybits+0x18>
 8012b1a:	f840 3b04 	str.w	r3, [r0], #4
 8012b1e:	e7f4      	b.n	8012b0a <__copybits+0x30>

08012b20 <__any_on>:
 8012b20:	f100 0214 	add.w	r2, r0, #20
 8012b24:	6900      	ldr	r0, [r0, #16]
 8012b26:	114b      	asrs	r3, r1, #5
 8012b28:	4298      	cmp	r0, r3
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	db11      	blt.n	8012b52 <__any_on+0x32>
 8012b2e:	dd0a      	ble.n	8012b46 <__any_on+0x26>
 8012b30:	f011 011f 	ands.w	r1, r1, #31
 8012b34:	d007      	beq.n	8012b46 <__any_on+0x26>
 8012b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b3a:	fa24 f001 	lsr.w	r0, r4, r1
 8012b3e:	fa00 f101 	lsl.w	r1, r0, r1
 8012b42:	428c      	cmp	r4, r1
 8012b44:	d10b      	bne.n	8012b5e <__any_on+0x3e>
 8012b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d803      	bhi.n	8012b56 <__any_on+0x36>
 8012b4e:	2000      	movs	r0, #0
 8012b50:	bd10      	pop	{r4, pc}
 8012b52:	4603      	mov	r3, r0
 8012b54:	e7f7      	b.n	8012b46 <__any_on+0x26>
 8012b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b5a:	2900      	cmp	r1, #0
 8012b5c:	d0f5      	beq.n	8012b4a <__any_on+0x2a>
 8012b5e:	2001      	movs	r0, #1
 8012b60:	e7f6      	b.n	8012b50 <__any_on+0x30>

08012b62 <__ascii_wctomb>:
 8012b62:	b149      	cbz	r1, 8012b78 <__ascii_wctomb+0x16>
 8012b64:	2aff      	cmp	r2, #255	; 0xff
 8012b66:	bf85      	ittet	hi
 8012b68:	238a      	movhi	r3, #138	; 0x8a
 8012b6a:	6003      	strhi	r3, [r0, #0]
 8012b6c:	700a      	strbls	r2, [r1, #0]
 8012b6e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012b72:	bf98      	it	ls
 8012b74:	2001      	movls	r0, #1
 8012b76:	4770      	bx	lr
 8012b78:	4608      	mov	r0, r1
 8012b7a:	4770      	bx	lr

08012b7c <__ssputs_r>:
 8012b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b80:	688e      	ldr	r6, [r1, #8]
 8012b82:	461f      	mov	r7, r3
 8012b84:	42be      	cmp	r6, r7
 8012b86:	680b      	ldr	r3, [r1, #0]
 8012b88:	4682      	mov	sl, r0
 8012b8a:	460c      	mov	r4, r1
 8012b8c:	4690      	mov	r8, r2
 8012b8e:	d82c      	bhi.n	8012bea <__ssputs_r+0x6e>
 8012b90:	898a      	ldrh	r2, [r1, #12]
 8012b92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b96:	d026      	beq.n	8012be6 <__ssputs_r+0x6a>
 8012b98:	6965      	ldr	r5, [r4, #20]
 8012b9a:	6909      	ldr	r1, [r1, #16]
 8012b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ba0:	eba3 0901 	sub.w	r9, r3, r1
 8012ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ba8:	1c7b      	adds	r3, r7, #1
 8012baa:	444b      	add	r3, r9
 8012bac:	106d      	asrs	r5, r5, #1
 8012bae:	429d      	cmp	r5, r3
 8012bb0:	bf38      	it	cc
 8012bb2:	461d      	movcc	r5, r3
 8012bb4:	0553      	lsls	r3, r2, #21
 8012bb6:	d527      	bpl.n	8012c08 <__ssputs_r+0x8c>
 8012bb8:	4629      	mov	r1, r5
 8012bba:	f7ff fa87 	bl	80120cc <_malloc_r>
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	b360      	cbz	r0, 8012c1c <__ssputs_r+0xa0>
 8012bc2:	6921      	ldr	r1, [r4, #16]
 8012bc4:	464a      	mov	r2, r9
 8012bc6:	f7fe fe9e 	bl	8011906 <memcpy>
 8012bca:	89a3      	ldrh	r3, [r4, #12]
 8012bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bd4:	81a3      	strh	r3, [r4, #12]
 8012bd6:	6126      	str	r6, [r4, #16]
 8012bd8:	6165      	str	r5, [r4, #20]
 8012bda:	444e      	add	r6, r9
 8012bdc:	eba5 0509 	sub.w	r5, r5, r9
 8012be0:	6026      	str	r6, [r4, #0]
 8012be2:	60a5      	str	r5, [r4, #8]
 8012be4:	463e      	mov	r6, r7
 8012be6:	42be      	cmp	r6, r7
 8012be8:	d900      	bls.n	8012bec <__ssputs_r+0x70>
 8012bea:	463e      	mov	r6, r7
 8012bec:	6820      	ldr	r0, [r4, #0]
 8012bee:	4632      	mov	r2, r6
 8012bf0:	4641      	mov	r1, r8
 8012bf2:	f000 fbbb 	bl	801336c <memmove>
 8012bf6:	68a3      	ldr	r3, [r4, #8]
 8012bf8:	1b9b      	subs	r3, r3, r6
 8012bfa:	60a3      	str	r3, [r4, #8]
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	4433      	add	r3, r6
 8012c00:	6023      	str	r3, [r4, #0]
 8012c02:	2000      	movs	r0, #0
 8012c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c08:	462a      	mov	r2, r5
 8012c0a:	f000 fc37 	bl	801347c <_realloc_r>
 8012c0e:	4606      	mov	r6, r0
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d1e0      	bne.n	8012bd6 <__ssputs_r+0x5a>
 8012c14:	6921      	ldr	r1, [r4, #16]
 8012c16:	4650      	mov	r0, sl
 8012c18:	f7fe fe94 	bl	8011944 <_free_r>
 8012c1c:	230c      	movs	r3, #12
 8012c1e:	f8ca 3000 	str.w	r3, [sl]
 8012c22:	89a3      	ldrh	r3, [r4, #12]
 8012c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c28:	81a3      	strh	r3, [r4, #12]
 8012c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c2e:	e7e9      	b.n	8012c04 <__ssputs_r+0x88>

08012c30 <_svfiprintf_r>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	4698      	mov	r8, r3
 8012c36:	898b      	ldrh	r3, [r1, #12]
 8012c38:	061b      	lsls	r3, r3, #24
 8012c3a:	b09d      	sub	sp, #116	; 0x74
 8012c3c:	4607      	mov	r7, r0
 8012c3e:	460d      	mov	r5, r1
 8012c40:	4614      	mov	r4, r2
 8012c42:	d50e      	bpl.n	8012c62 <_svfiprintf_r+0x32>
 8012c44:	690b      	ldr	r3, [r1, #16]
 8012c46:	b963      	cbnz	r3, 8012c62 <_svfiprintf_r+0x32>
 8012c48:	2140      	movs	r1, #64	; 0x40
 8012c4a:	f7ff fa3f 	bl	80120cc <_malloc_r>
 8012c4e:	6028      	str	r0, [r5, #0]
 8012c50:	6128      	str	r0, [r5, #16]
 8012c52:	b920      	cbnz	r0, 8012c5e <_svfiprintf_r+0x2e>
 8012c54:	230c      	movs	r3, #12
 8012c56:	603b      	str	r3, [r7, #0]
 8012c58:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5c:	e0d0      	b.n	8012e00 <_svfiprintf_r+0x1d0>
 8012c5e:	2340      	movs	r3, #64	; 0x40
 8012c60:	616b      	str	r3, [r5, #20]
 8012c62:	2300      	movs	r3, #0
 8012c64:	9309      	str	r3, [sp, #36]	; 0x24
 8012c66:	2320      	movs	r3, #32
 8012c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c70:	2330      	movs	r3, #48	; 0x30
 8012c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012e18 <_svfiprintf_r+0x1e8>
 8012c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c7a:	f04f 0901 	mov.w	r9, #1
 8012c7e:	4623      	mov	r3, r4
 8012c80:	469a      	mov	sl, r3
 8012c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c86:	b10a      	cbz	r2, 8012c8c <_svfiprintf_r+0x5c>
 8012c88:	2a25      	cmp	r2, #37	; 0x25
 8012c8a:	d1f9      	bne.n	8012c80 <_svfiprintf_r+0x50>
 8012c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8012c90:	d00b      	beq.n	8012caa <_svfiprintf_r+0x7a>
 8012c92:	465b      	mov	r3, fp
 8012c94:	4622      	mov	r2, r4
 8012c96:	4629      	mov	r1, r5
 8012c98:	4638      	mov	r0, r7
 8012c9a:	f7ff ff6f 	bl	8012b7c <__ssputs_r>
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f000 80a9 	beq.w	8012df6 <_svfiprintf_r+0x1c6>
 8012ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ca6:	445a      	add	r2, fp
 8012ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8012caa:	f89a 3000 	ldrb.w	r3, [sl]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 80a1 	beq.w	8012df6 <_svfiprintf_r+0x1c6>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cbe:	f10a 0a01 	add.w	sl, sl, #1
 8012cc2:	9304      	str	r3, [sp, #16]
 8012cc4:	9307      	str	r3, [sp, #28]
 8012cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cca:	931a      	str	r3, [sp, #104]	; 0x68
 8012ccc:	4654      	mov	r4, sl
 8012cce:	2205      	movs	r2, #5
 8012cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cd4:	4850      	ldr	r0, [pc, #320]	; (8012e18 <_svfiprintf_r+0x1e8>)
 8012cd6:	f7ed fa8b 	bl	80001f0 <memchr>
 8012cda:	9a04      	ldr	r2, [sp, #16]
 8012cdc:	b9d8      	cbnz	r0, 8012d16 <_svfiprintf_r+0xe6>
 8012cde:	06d0      	lsls	r0, r2, #27
 8012ce0:	bf44      	itt	mi
 8012ce2:	2320      	movmi	r3, #32
 8012ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ce8:	0711      	lsls	r1, r2, #28
 8012cea:	bf44      	itt	mi
 8012cec:	232b      	movmi	r3, #43	; 0x2b
 8012cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8012cf8:	d015      	beq.n	8012d26 <_svfiprintf_r+0xf6>
 8012cfa:	9a07      	ldr	r2, [sp, #28]
 8012cfc:	4654      	mov	r4, sl
 8012cfe:	2000      	movs	r0, #0
 8012d00:	f04f 0c0a 	mov.w	ip, #10
 8012d04:	4621      	mov	r1, r4
 8012d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d0a:	3b30      	subs	r3, #48	; 0x30
 8012d0c:	2b09      	cmp	r3, #9
 8012d0e:	d94d      	bls.n	8012dac <_svfiprintf_r+0x17c>
 8012d10:	b1b0      	cbz	r0, 8012d40 <_svfiprintf_r+0x110>
 8012d12:	9207      	str	r2, [sp, #28]
 8012d14:	e014      	b.n	8012d40 <_svfiprintf_r+0x110>
 8012d16:	eba0 0308 	sub.w	r3, r0, r8
 8012d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	9304      	str	r3, [sp, #16]
 8012d22:	46a2      	mov	sl, r4
 8012d24:	e7d2      	b.n	8012ccc <_svfiprintf_r+0x9c>
 8012d26:	9b03      	ldr	r3, [sp, #12]
 8012d28:	1d19      	adds	r1, r3, #4
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	9103      	str	r1, [sp, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	bfbb      	ittet	lt
 8012d32:	425b      	neglt	r3, r3
 8012d34:	f042 0202 	orrlt.w	r2, r2, #2
 8012d38:	9307      	strge	r3, [sp, #28]
 8012d3a:	9307      	strlt	r3, [sp, #28]
 8012d3c:	bfb8      	it	lt
 8012d3e:	9204      	strlt	r2, [sp, #16]
 8012d40:	7823      	ldrb	r3, [r4, #0]
 8012d42:	2b2e      	cmp	r3, #46	; 0x2e
 8012d44:	d10c      	bne.n	8012d60 <_svfiprintf_r+0x130>
 8012d46:	7863      	ldrb	r3, [r4, #1]
 8012d48:	2b2a      	cmp	r3, #42	; 0x2a
 8012d4a:	d134      	bne.n	8012db6 <_svfiprintf_r+0x186>
 8012d4c:	9b03      	ldr	r3, [sp, #12]
 8012d4e:	1d1a      	adds	r2, r3, #4
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	9203      	str	r2, [sp, #12]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	bfb8      	it	lt
 8012d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d5c:	3402      	adds	r4, #2
 8012d5e:	9305      	str	r3, [sp, #20]
 8012d60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012e28 <_svfiprintf_r+0x1f8>
 8012d64:	7821      	ldrb	r1, [r4, #0]
 8012d66:	2203      	movs	r2, #3
 8012d68:	4650      	mov	r0, sl
 8012d6a:	f7ed fa41 	bl	80001f0 <memchr>
 8012d6e:	b138      	cbz	r0, 8012d80 <_svfiprintf_r+0x150>
 8012d70:	9b04      	ldr	r3, [sp, #16]
 8012d72:	eba0 000a 	sub.w	r0, r0, sl
 8012d76:	2240      	movs	r2, #64	; 0x40
 8012d78:	4082      	lsls	r2, r0
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	3401      	adds	r4, #1
 8012d7e:	9304      	str	r3, [sp, #16]
 8012d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d84:	4825      	ldr	r0, [pc, #148]	; (8012e1c <_svfiprintf_r+0x1ec>)
 8012d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d8a:	2206      	movs	r2, #6
 8012d8c:	f7ed fa30 	bl	80001f0 <memchr>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	d038      	beq.n	8012e06 <_svfiprintf_r+0x1d6>
 8012d94:	4b22      	ldr	r3, [pc, #136]	; (8012e20 <_svfiprintf_r+0x1f0>)
 8012d96:	bb1b      	cbnz	r3, 8012de0 <_svfiprintf_r+0x1b0>
 8012d98:	9b03      	ldr	r3, [sp, #12]
 8012d9a:	3307      	adds	r3, #7
 8012d9c:	f023 0307 	bic.w	r3, r3, #7
 8012da0:	3308      	adds	r3, #8
 8012da2:	9303      	str	r3, [sp, #12]
 8012da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da6:	4433      	add	r3, r6
 8012da8:	9309      	str	r3, [sp, #36]	; 0x24
 8012daa:	e768      	b.n	8012c7e <_svfiprintf_r+0x4e>
 8012dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8012db0:	460c      	mov	r4, r1
 8012db2:	2001      	movs	r0, #1
 8012db4:	e7a6      	b.n	8012d04 <_svfiprintf_r+0xd4>
 8012db6:	2300      	movs	r3, #0
 8012db8:	3401      	adds	r4, #1
 8012dba:	9305      	str	r3, [sp, #20]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	f04f 0c0a 	mov.w	ip, #10
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dc8:	3a30      	subs	r2, #48	; 0x30
 8012dca:	2a09      	cmp	r2, #9
 8012dcc:	d903      	bls.n	8012dd6 <_svfiprintf_r+0x1a6>
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d0c6      	beq.n	8012d60 <_svfiprintf_r+0x130>
 8012dd2:	9105      	str	r1, [sp, #20]
 8012dd4:	e7c4      	b.n	8012d60 <_svfiprintf_r+0x130>
 8012dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dda:	4604      	mov	r4, r0
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e7f0      	b.n	8012dc2 <_svfiprintf_r+0x192>
 8012de0:	ab03      	add	r3, sp, #12
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	462a      	mov	r2, r5
 8012de6:	4b0f      	ldr	r3, [pc, #60]	; (8012e24 <_svfiprintf_r+0x1f4>)
 8012de8:	a904      	add	r1, sp, #16
 8012dea:	4638      	mov	r0, r7
 8012dec:	f3af 8000 	nop.w
 8012df0:	1c42      	adds	r2, r0, #1
 8012df2:	4606      	mov	r6, r0
 8012df4:	d1d6      	bne.n	8012da4 <_svfiprintf_r+0x174>
 8012df6:	89ab      	ldrh	r3, [r5, #12]
 8012df8:	065b      	lsls	r3, r3, #25
 8012dfa:	f53f af2d 	bmi.w	8012c58 <_svfiprintf_r+0x28>
 8012dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e00:	b01d      	add	sp, #116	; 0x74
 8012e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e06:	ab03      	add	r3, sp, #12
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	462a      	mov	r2, r5
 8012e0c:	4b05      	ldr	r3, [pc, #20]	; (8012e24 <_svfiprintf_r+0x1f4>)
 8012e0e:	a904      	add	r1, sp, #16
 8012e10:	4638      	mov	r0, r7
 8012e12:	f000 f879 	bl	8012f08 <_printf_i>
 8012e16:	e7eb      	b.n	8012df0 <_svfiprintf_r+0x1c0>
 8012e18:	080219bc 	.word	0x080219bc
 8012e1c:	080219c6 	.word	0x080219c6
 8012e20:	00000000 	.word	0x00000000
 8012e24:	08012b7d 	.word	0x08012b7d
 8012e28:	080219c2 	.word	0x080219c2

08012e2c <_printf_common>:
 8012e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e30:	4616      	mov	r6, r2
 8012e32:	4699      	mov	r9, r3
 8012e34:	688a      	ldr	r2, [r1, #8]
 8012e36:	690b      	ldr	r3, [r1, #16]
 8012e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	bfb8      	it	lt
 8012e40:	4613      	movlt	r3, r2
 8012e42:	6033      	str	r3, [r6, #0]
 8012e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e48:	4607      	mov	r7, r0
 8012e4a:	460c      	mov	r4, r1
 8012e4c:	b10a      	cbz	r2, 8012e52 <_printf_common+0x26>
 8012e4e:	3301      	adds	r3, #1
 8012e50:	6033      	str	r3, [r6, #0]
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	0699      	lsls	r1, r3, #26
 8012e56:	bf42      	ittt	mi
 8012e58:	6833      	ldrmi	r3, [r6, #0]
 8012e5a:	3302      	addmi	r3, #2
 8012e5c:	6033      	strmi	r3, [r6, #0]
 8012e5e:	6825      	ldr	r5, [r4, #0]
 8012e60:	f015 0506 	ands.w	r5, r5, #6
 8012e64:	d106      	bne.n	8012e74 <_printf_common+0x48>
 8012e66:	f104 0a19 	add.w	sl, r4, #25
 8012e6a:	68e3      	ldr	r3, [r4, #12]
 8012e6c:	6832      	ldr	r2, [r6, #0]
 8012e6e:	1a9b      	subs	r3, r3, r2
 8012e70:	42ab      	cmp	r3, r5
 8012e72:	dc26      	bgt.n	8012ec2 <_printf_common+0x96>
 8012e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e78:	1e13      	subs	r3, r2, #0
 8012e7a:	6822      	ldr	r2, [r4, #0]
 8012e7c:	bf18      	it	ne
 8012e7e:	2301      	movne	r3, #1
 8012e80:	0692      	lsls	r2, r2, #26
 8012e82:	d42b      	bmi.n	8012edc <_printf_common+0xb0>
 8012e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e88:	4649      	mov	r1, r9
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	47c0      	blx	r8
 8012e8e:	3001      	adds	r0, #1
 8012e90:	d01e      	beq.n	8012ed0 <_printf_common+0xa4>
 8012e92:	6823      	ldr	r3, [r4, #0]
 8012e94:	6922      	ldr	r2, [r4, #16]
 8012e96:	f003 0306 	and.w	r3, r3, #6
 8012e9a:	2b04      	cmp	r3, #4
 8012e9c:	bf02      	ittt	eq
 8012e9e:	68e5      	ldreq	r5, [r4, #12]
 8012ea0:	6833      	ldreq	r3, [r6, #0]
 8012ea2:	1aed      	subeq	r5, r5, r3
 8012ea4:	68a3      	ldr	r3, [r4, #8]
 8012ea6:	bf0c      	ite	eq
 8012ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012eac:	2500      	movne	r5, #0
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	bfc4      	itt	gt
 8012eb2:	1a9b      	subgt	r3, r3, r2
 8012eb4:	18ed      	addgt	r5, r5, r3
 8012eb6:	2600      	movs	r6, #0
 8012eb8:	341a      	adds	r4, #26
 8012eba:	42b5      	cmp	r5, r6
 8012ebc:	d11a      	bne.n	8012ef4 <_printf_common+0xc8>
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	e008      	b.n	8012ed4 <_printf_common+0xa8>
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	4652      	mov	r2, sl
 8012ec6:	4649      	mov	r1, r9
 8012ec8:	4638      	mov	r0, r7
 8012eca:	47c0      	blx	r8
 8012ecc:	3001      	adds	r0, #1
 8012ece:	d103      	bne.n	8012ed8 <_printf_common+0xac>
 8012ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ed8:	3501      	adds	r5, #1
 8012eda:	e7c6      	b.n	8012e6a <_printf_common+0x3e>
 8012edc:	18e1      	adds	r1, r4, r3
 8012ede:	1c5a      	adds	r2, r3, #1
 8012ee0:	2030      	movs	r0, #48	; 0x30
 8012ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ee6:	4422      	add	r2, r4
 8012ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ef0:	3302      	adds	r3, #2
 8012ef2:	e7c7      	b.n	8012e84 <_printf_common+0x58>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	4649      	mov	r1, r9
 8012efa:	4638      	mov	r0, r7
 8012efc:	47c0      	blx	r8
 8012efe:	3001      	adds	r0, #1
 8012f00:	d0e6      	beq.n	8012ed0 <_printf_common+0xa4>
 8012f02:	3601      	adds	r6, #1
 8012f04:	e7d9      	b.n	8012eba <_printf_common+0x8e>
	...

08012f08 <_printf_i>:
 8012f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f0c:	7e0f      	ldrb	r7, [r1, #24]
 8012f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f10:	2f78      	cmp	r7, #120	; 0x78
 8012f12:	4691      	mov	r9, r2
 8012f14:	4680      	mov	r8, r0
 8012f16:	460c      	mov	r4, r1
 8012f18:	469a      	mov	sl, r3
 8012f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f1e:	d807      	bhi.n	8012f30 <_printf_i+0x28>
 8012f20:	2f62      	cmp	r7, #98	; 0x62
 8012f22:	d80a      	bhi.n	8012f3a <_printf_i+0x32>
 8012f24:	2f00      	cmp	r7, #0
 8012f26:	f000 80d4 	beq.w	80130d2 <_printf_i+0x1ca>
 8012f2a:	2f58      	cmp	r7, #88	; 0x58
 8012f2c:	f000 80c0 	beq.w	80130b0 <_printf_i+0x1a8>
 8012f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f38:	e03a      	b.n	8012fb0 <_printf_i+0xa8>
 8012f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f3e:	2b15      	cmp	r3, #21
 8012f40:	d8f6      	bhi.n	8012f30 <_printf_i+0x28>
 8012f42:	a101      	add	r1, pc, #4	; (adr r1, 8012f48 <_printf_i+0x40>)
 8012f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f48:	08012fa1 	.word	0x08012fa1
 8012f4c:	08012fb5 	.word	0x08012fb5
 8012f50:	08012f31 	.word	0x08012f31
 8012f54:	08012f31 	.word	0x08012f31
 8012f58:	08012f31 	.word	0x08012f31
 8012f5c:	08012f31 	.word	0x08012f31
 8012f60:	08012fb5 	.word	0x08012fb5
 8012f64:	08012f31 	.word	0x08012f31
 8012f68:	08012f31 	.word	0x08012f31
 8012f6c:	08012f31 	.word	0x08012f31
 8012f70:	08012f31 	.word	0x08012f31
 8012f74:	080130b9 	.word	0x080130b9
 8012f78:	08012fe1 	.word	0x08012fe1
 8012f7c:	08013073 	.word	0x08013073
 8012f80:	08012f31 	.word	0x08012f31
 8012f84:	08012f31 	.word	0x08012f31
 8012f88:	080130db 	.word	0x080130db
 8012f8c:	08012f31 	.word	0x08012f31
 8012f90:	08012fe1 	.word	0x08012fe1
 8012f94:	08012f31 	.word	0x08012f31
 8012f98:	08012f31 	.word	0x08012f31
 8012f9c:	0801307b 	.word	0x0801307b
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	1d1a      	adds	r2, r3, #4
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	602a      	str	r2, [r5, #0]
 8012fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e09f      	b.n	80130f4 <_printf_i+0x1ec>
 8012fb4:	6820      	ldr	r0, [r4, #0]
 8012fb6:	682b      	ldr	r3, [r5, #0]
 8012fb8:	0607      	lsls	r7, r0, #24
 8012fba:	f103 0104 	add.w	r1, r3, #4
 8012fbe:	6029      	str	r1, [r5, #0]
 8012fc0:	d501      	bpl.n	8012fc6 <_printf_i+0xbe>
 8012fc2:	681e      	ldr	r6, [r3, #0]
 8012fc4:	e003      	b.n	8012fce <_printf_i+0xc6>
 8012fc6:	0646      	lsls	r6, r0, #25
 8012fc8:	d5fb      	bpl.n	8012fc2 <_printf_i+0xba>
 8012fca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012fce:	2e00      	cmp	r6, #0
 8012fd0:	da03      	bge.n	8012fda <_printf_i+0xd2>
 8012fd2:	232d      	movs	r3, #45	; 0x2d
 8012fd4:	4276      	negs	r6, r6
 8012fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fda:	485a      	ldr	r0, [pc, #360]	; (8013144 <_printf_i+0x23c>)
 8012fdc:	230a      	movs	r3, #10
 8012fde:	e012      	b.n	8013006 <_printf_i+0xfe>
 8012fe0:	682b      	ldr	r3, [r5, #0]
 8012fe2:	6820      	ldr	r0, [r4, #0]
 8012fe4:	1d19      	adds	r1, r3, #4
 8012fe6:	6029      	str	r1, [r5, #0]
 8012fe8:	0605      	lsls	r5, r0, #24
 8012fea:	d501      	bpl.n	8012ff0 <_printf_i+0xe8>
 8012fec:	681e      	ldr	r6, [r3, #0]
 8012fee:	e002      	b.n	8012ff6 <_printf_i+0xee>
 8012ff0:	0641      	lsls	r1, r0, #25
 8012ff2:	d5fb      	bpl.n	8012fec <_printf_i+0xe4>
 8012ff4:	881e      	ldrh	r6, [r3, #0]
 8012ff6:	4853      	ldr	r0, [pc, #332]	; (8013144 <_printf_i+0x23c>)
 8012ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8012ffa:	bf0c      	ite	eq
 8012ffc:	2308      	moveq	r3, #8
 8012ffe:	230a      	movne	r3, #10
 8013000:	2100      	movs	r1, #0
 8013002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013006:	6865      	ldr	r5, [r4, #4]
 8013008:	60a5      	str	r5, [r4, #8]
 801300a:	2d00      	cmp	r5, #0
 801300c:	bfa2      	ittt	ge
 801300e:	6821      	ldrge	r1, [r4, #0]
 8013010:	f021 0104 	bicge.w	r1, r1, #4
 8013014:	6021      	strge	r1, [r4, #0]
 8013016:	b90e      	cbnz	r6, 801301c <_printf_i+0x114>
 8013018:	2d00      	cmp	r5, #0
 801301a:	d04b      	beq.n	80130b4 <_printf_i+0x1ac>
 801301c:	4615      	mov	r5, r2
 801301e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013022:	fb03 6711 	mls	r7, r3, r1, r6
 8013026:	5dc7      	ldrb	r7, [r0, r7]
 8013028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801302c:	4637      	mov	r7, r6
 801302e:	42bb      	cmp	r3, r7
 8013030:	460e      	mov	r6, r1
 8013032:	d9f4      	bls.n	801301e <_printf_i+0x116>
 8013034:	2b08      	cmp	r3, #8
 8013036:	d10b      	bne.n	8013050 <_printf_i+0x148>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	07de      	lsls	r6, r3, #31
 801303c:	d508      	bpl.n	8013050 <_printf_i+0x148>
 801303e:	6923      	ldr	r3, [r4, #16]
 8013040:	6861      	ldr	r1, [r4, #4]
 8013042:	4299      	cmp	r1, r3
 8013044:	bfde      	ittt	le
 8013046:	2330      	movle	r3, #48	; 0x30
 8013048:	f805 3c01 	strble.w	r3, [r5, #-1]
 801304c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013050:	1b52      	subs	r2, r2, r5
 8013052:	6122      	str	r2, [r4, #16]
 8013054:	f8cd a000 	str.w	sl, [sp]
 8013058:	464b      	mov	r3, r9
 801305a:	aa03      	add	r2, sp, #12
 801305c:	4621      	mov	r1, r4
 801305e:	4640      	mov	r0, r8
 8013060:	f7ff fee4 	bl	8012e2c <_printf_common>
 8013064:	3001      	adds	r0, #1
 8013066:	d14a      	bne.n	80130fe <_printf_i+0x1f6>
 8013068:	f04f 30ff 	mov.w	r0, #4294967295
 801306c:	b004      	add	sp, #16
 801306e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	f043 0320 	orr.w	r3, r3, #32
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	4833      	ldr	r0, [pc, #204]	; (8013148 <_printf_i+0x240>)
 801307c:	2778      	movs	r7, #120	; 0x78
 801307e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	6829      	ldr	r1, [r5, #0]
 8013086:	061f      	lsls	r7, r3, #24
 8013088:	f851 6b04 	ldr.w	r6, [r1], #4
 801308c:	d402      	bmi.n	8013094 <_printf_i+0x18c>
 801308e:	065f      	lsls	r7, r3, #25
 8013090:	bf48      	it	mi
 8013092:	b2b6      	uxthmi	r6, r6
 8013094:	07df      	lsls	r7, r3, #31
 8013096:	bf48      	it	mi
 8013098:	f043 0320 	orrmi.w	r3, r3, #32
 801309c:	6029      	str	r1, [r5, #0]
 801309e:	bf48      	it	mi
 80130a0:	6023      	strmi	r3, [r4, #0]
 80130a2:	b91e      	cbnz	r6, 80130ac <_printf_i+0x1a4>
 80130a4:	6823      	ldr	r3, [r4, #0]
 80130a6:	f023 0320 	bic.w	r3, r3, #32
 80130aa:	6023      	str	r3, [r4, #0]
 80130ac:	2310      	movs	r3, #16
 80130ae:	e7a7      	b.n	8013000 <_printf_i+0xf8>
 80130b0:	4824      	ldr	r0, [pc, #144]	; (8013144 <_printf_i+0x23c>)
 80130b2:	e7e4      	b.n	801307e <_printf_i+0x176>
 80130b4:	4615      	mov	r5, r2
 80130b6:	e7bd      	b.n	8013034 <_printf_i+0x12c>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	6826      	ldr	r6, [r4, #0]
 80130bc:	6961      	ldr	r1, [r4, #20]
 80130be:	1d18      	adds	r0, r3, #4
 80130c0:	6028      	str	r0, [r5, #0]
 80130c2:	0635      	lsls	r5, r6, #24
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	d501      	bpl.n	80130cc <_printf_i+0x1c4>
 80130c8:	6019      	str	r1, [r3, #0]
 80130ca:	e002      	b.n	80130d2 <_printf_i+0x1ca>
 80130cc:	0670      	lsls	r0, r6, #25
 80130ce:	d5fb      	bpl.n	80130c8 <_printf_i+0x1c0>
 80130d0:	8019      	strh	r1, [r3, #0]
 80130d2:	2300      	movs	r3, #0
 80130d4:	6123      	str	r3, [r4, #16]
 80130d6:	4615      	mov	r5, r2
 80130d8:	e7bc      	b.n	8013054 <_printf_i+0x14c>
 80130da:	682b      	ldr	r3, [r5, #0]
 80130dc:	1d1a      	adds	r2, r3, #4
 80130de:	602a      	str	r2, [r5, #0]
 80130e0:	681d      	ldr	r5, [r3, #0]
 80130e2:	6862      	ldr	r2, [r4, #4]
 80130e4:	2100      	movs	r1, #0
 80130e6:	4628      	mov	r0, r5
 80130e8:	f7ed f882 	bl	80001f0 <memchr>
 80130ec:	b108      	cbz	r0, 80130f2 <_printf_i+0x1ea>
 80130ee:	1b40      	subs	r0, r0, r5
 80130f0:	6060      	str	r0, [r4, #4]
 80130f2:	6863      	ldr	r3, [r4, #4]
 80130f4:	6123      	str	r3, [r4, #16]
 80130f6:	2300      	movs	r3, #0
 80130f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130fc:	e7aa      	b.n	8013054 <_printf_i+0x14c>
 80130fe:	6923      	ldr	r3, [r4, #16]
 8013100:	462a      	mov	r2, r5
 8013102:	4649      	mov	r1, r9
 8013104:	4640      	mov	r0, r8
 8013106:	47d0      	blx	sl
 8013108:	3001      	adds	r0, #1
 801310a:	d0ad      	beq.n	8013068 <_printf_i+0x160>
 801310c:	6823      	ldr	r3, [r4, #0]
 801310e:	079b      	lsls	r3, r3, #30
 8013110:	d413      	bmi.n	801313a <_printf_i+0x232>
 8013112:	68e0      	ldr	r0, [r4, #12]
 8013114:	9b03      	ldr	r3, [sp, #12]
 8013116:	4298      	cmp	r0, r3
 8013118:	bfb8      	it	lt
 801311a:	4618      	movlt	r0, r3
 801311c:	e7a6      	b.n	801306c <_printf_i+0x164>
 801311e:	2301      	movs	r3, #1
 8013120:	4632      	mov	r2, r6
 8013122:	4649      	mov	r1, r9
 8013124:	4640      	mov	r0, r8
 8013126:	47d0      	blx	sl
 8013128:	3001      	adds	r0, #1
 801312a:	d09d      	beq.n	8013068 <_printf_i+0x160>
 801312c:	3501      	adds	r5, #1
 801312e:	68e3      	ldr	r3, [r4, #12]
 8013130:	9903      	ldr	r1, [sp, #12]
 8013132:	1a5b      	subs	r3, r3, r1
 8013134:	42ab      	cmp	r3, r5
 8013136:	dcf2      	bgt.n	801311e <_printf_i+0x216>
 8013138:	e7eb      	b.n	8013112 <_printf_i+0x20a>
 801313a:	2500      	movs	r5, #0
 801313c:	f104 0619 	add.w	r6, r4, #25
 8013140:	e7f5      	b.n	801312e <_printf_i+0x226>
 8013142:	bf00      	nop
 8013144:	080219cd 	.word	0x080219cd
 8013148:	080219de 	.word	0x080219de

0801314c <__sflush_r>:
 801314c:	898a      	ldrh	r2, [r1, #12]
 801314e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013152:	4605      	mov	r5, r0
 8013154:	0710      	lsls	r0, r2, #28
 8013156:	460c      	mov	r4, r1
 8013158:	d458      	bmi.n	801320c <__sflush_r+0xc0>
 801315a:	684b      	ldr	r3, [r1, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	dc05      	bgt.n	801316c <__sflush_r+0x20>
 8013160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013162:	2b00      	cmp	r3, #0
 8013164:	dc02      	bgt.n	801316c <__sflush_r+0x20>
 8013166:	2000      	movs	r0, #0
 8013168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801316c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801316e:	2e00      	cmp	r6, #0
 8013170:	d0f9      	beq.n	8013166 <__sflush_r+0x1a>
 8013172:	2300      	movs	r3, #0
 8013174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013178:	682f      	ldr	r7, [r5, #0]
 801317a:	6a21      	ldr	r1, [r4, #32]
 801317c:	602b      	str	r3, [r5, #0]
 801317e:	d032      	beq.n	80131e6 <__sflush_r+0x9a>
 8013180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013182:	89a3      	ldrh	r3, [r4, #12]
 8013184:	075a      	lsls	r2, r3, #29
 8013186:	d505      	bpl.n	8013194 <__sflush_r+0x48>
 8013188:	6863      	ldr	r3, [r4, #4]
 801318a:	1ac0      	subs	r0, r0, r3
 801318c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801318e:	b10b      	cbz	r3, 8013194 <__sflush_r+0x48>
 8013190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013192:	1ac0      	subs	r0, r0, r3
 8013194:	2300      	movs	r3, #0
 8013196:	4602      	mov	r2, r0
 8013198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801319a:	6a21      	ldr	r1, [r4, #32]
 801319c:	4628      	mov	r0, r5
 801319e:	47b0      	blx	r6
 80131a0:	1c43      	adds	r3, r0, #1
 80131a2:	89a3      	ldrh	r3, [r4, #12]
 80131a4:	d106      	bne.n	80131b4 <__sflush_r+0x68>
 80131a6:	6829      	ldr	r1, [r5, #0]
 80131a8:	291d      	cmp	r1, #29
 80131aa:	d82b      	bhi.n	8013204 <__sflush_r+0xb8>
 80131ac:	4a29      	ldr	r2, [pc, #164]	; (8013254 <__sflush_r+0x108>)
 80131ae:	410a      	asrs	r2, r1
 80131b0:	07d6      	lsls	r6, r2, #31
 80131b2:	d427      	bmi.n	8013204 <__sflush_r+0xb8>
 80131b4:	2200      	movs	r2, #0
 80131b6:	6062      	str	r2, [r4, #4]
 80131b8:	04d9      	lsls	r1, r3, #19
 80131ba:	6922      	ldr	r2, [r4, #16]
 80131bc:	6022      	str	r2, [r4, #0]
 80131be:	d504      	bpl.n	80131ca <__sflush_r+0x7e>
 80131c0:	1c42      	adds	r2, r0, #1
 80131c2:	d101      	bne.n	80131c8 <__sflush_r+0x7c>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	b903      	cbnz	r3, 80131ca <__sflush_r+0x7e>
 80131c8:	6560      	str	r0, [r4, #84]	; 0x54
 80131ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131cc:	602f      	str	r7, [r5, #0]
 80131ce:	2900      	cmp	r1, #0
 80131d0:	d0c9      	beq.n	8013166 <__sflush_r+0x1a>
 80131d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131d6:	4299      	cmp	r1, r3
 80131d8:	d002      	beq.n	80131e0 <__sflush_r+0x94>
 80131da:	4628      	mov	r0, r5
 80131dc:	f7fe fbb2 	bl	8011944 <_free_r>
 80131e0:	2000      	movs	r0, #0
 80131e2:	6360      	str	r0, [r4, #52]	; 0x34
 80131e4:	e7c0      	b.n	8013168 <__sflush_r+0x1c>
 80131e6:	2301      	movs	r3, #1
 80131e8:	4628      	mov	r0, r5
 80131ea:	47b0      	blx	r6
 80131ec:	1c41      	adds	r1, r0, #1
 80131ee:	d1c8      	bne.n	8013182 <__sflush_r+0x36>
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d0c5      	beq.n	8013182 <__sflush_r+0x36>
 80131f6:	2b1d      	cmp	r3, #29
 80131f8:	d001      	beq.n	80131fe <__sflush_r+0xb2>
 80131fa:	2b16      	cmp	r3, #22
 80131fc:	d101      	bne.n	8013202 <__sflush_r+0xb6>
 80131fe:	602f      	str	r7, [r5, #0]
 8013200:	e7b1      	b.n	8013166 <__sflush_r+0x1a>
 8013202:	89a3      	ldrh	r3, [r4, #12]
 8013204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013208:	81a3      	strh	r3, [r4, #12]
 801320a:	e7ad      	b.n	8013168 <__sflush_r+0x1c>
 801320c:	690f      	ldr	r7, [r1, #16]
 801320e:	2f00      	cmp	r7, #0
 8013210:	d0a9      	beq.n	8013166 <__sflush_r+0x1a>
 8013212:	0793      	lsls	r3, r2, #30
 8013214:	680e      	ldr	r6, [r1, #0]
 8013216:	bf08      	it	eq
 8013218:	694b      	ldreq	r3, [r1, #20]
 801321a:	600f      	str	r7, [r1, #0]
 801321c:	bf18      	it	ne
 801321e:	2300      	movne	r3, #0
 8013220:	eba6 0807 	sub.w	r8, r6, r7
 8013224:	608b      	str	r3, [r1, #8]
 8013226:	f1b8 0f00 	cmp.w	r8, #0
 801322a:	dd9c      	ble.n	8013166 <__sflush_r+0x1a>
 801322c:	6a21      	ldr	r1, [r4, #32]
 801322e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013230:	4643      	mov	r3, r8
 8013232:	463a      	mov	r2, r7
 8013234:	4628      	mov	r0, r5
 8013236:	47b0      	blx	r6
 8013238:	2800      	cmp	r0, #0
 801323a:	dc06      	bgt.n	801324a <__sflush_r+0xfe>
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013242:	81a3      	strh	r3, [r4, #12]
 8013244:	f04f 30ff 	mov.w	r0, #4294967295
 8013248:	e78e      	b.n	8013168 <__sflush_r+0x1c>
 801324a:	4407      	add	r7, r0
 801324c:	eba8 0800 	sub.w	r8, r8, r0
 8013250:	e7e9      	b.n	8013226 <__sflush_r+0xda>
 8013252:	bf00      	nop
 8013254:	dfbffffe 	.word	0xdfbffffe

08013258 <_fflush_r>:
 8013258:	b538      	push	{r3, r4, r5, lr}
 801325a:	690b      	ldr	r3, [r1, #16]
 801325c:	4605      	mov	r5, r0
 801325e:	460c      	mov	r4, r1
 8013260:	b913      	cbnz	r3, 8013268 <_fflush_r+0x10>
 8013262:	2500      	movs	r5, #0
 8013264:	4628      	mov	r0, r5
 8013266:	bd38      	pop	{r3, r4, r5, pc}
 8013268:	b118      	cbz	r0, 8013272 <_fflush_r+0x1a>
 801326a:	6a03      	ldr	r3, [r0, #32]
 801326c:	b90b      	cbnz	r3, 8013272 <_fflush_r+0x1a>
 801326e:	f7fe f941 	bl	80114f4 <__sinit>
 8013272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d0f3      	beq.n	8013262 <_fflush_r+0xa>
 801327a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801327c:	07d0      	lsls	r0, r2, #31
 801327e:	d404      	bmi.n	801328a <_fflush_r+0x32>
 8013280:	0599      	lsls	r1, r3, #22
 8013282:	d402      	bmi.n	801328a <_fflush_r+0x32>
 8013284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013286:	f7fe fb34 	bl	80118f2 <__retarget_lock_acquire_recursive>
 801328a:	4628      	mov	r0, r5
 801328c:	4621      	mov	r1, r4
 801328e:	f7ff ff5d 	bl	801314c <__sflush_r>
 8013292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013294:	07da      	lsls	r2, r3, #31
 8013296:	4605      	mov	r5, r0
 8013298:	d4e4      	bmi.n	8013264 <_fflush_r+0xc>
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	059b      	lsls	r3, r3, #22
 801329e:	d4e1      	bmi.n	8013264 <_fflush_r+0xc>
 80132a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132a2:	f7fe fb27 	bl	80118f4 <__retarget_lock_release_recursive>
 80132a6:	e7dd      	b.n	8013264 <_fflush_r+0xc>

080132a8 <__swhatbuf_r>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	460c      	mov	r4, r1
 80132ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b0:	2900      	cmp	r1, #0
 80132b2:	b096      	sub	sp, #88	; 0x58
 80132b4:	4615      	mov	r5, r2
 80132b6:	461e      	mov	r6, r3
 80132b8:	da0d      	bge.n	80132d6 <__swhatbuf_r+0x2e>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80132c0:	f04f 0100 	mov.w	r1, #0
 80132c4:	bf0c      	ite	eq
 80132c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80132ca:	2340      	movne	r3, #64	; 0x40
 80132cc:	2000      	movs	r0, #0
 80132ce:	6031      	str	r1, [r6, #0]
 80132d0:	602b      	str	r3, [r5, #0]
 80132d2:	b016      	add	sp, #88	; 0x58
 80132d4:	bd70      	pop	{r4, r5, r6, pc}
 80132d6:	466a      	mov	r2, sp
 80132d8:	f000 f862 	bl	80133a0 <_fstat_r>
 80132dc:	2800      	cmp	r0, #0
 80132de:	dbec      	blt.n	80132ba <__swhatbuf_r+0x12>
 80132e0:	9901      	ldr	r1, [sp, #4]
 80132e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80132e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80132ea:	4259      	negs	r1, r3
 80132ec:	4159      	adcs	r1, r3
 80132ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132f2:	e7eb      	b.n	80132cc <__swhatbuf_r+0x24>

080132f4 <__smakebuf_r>:
 80132f4:	898b      	ldrh	r3, [r1, #12]
 80132f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132f8:	079d      	lsls	r5, r3, #30
 80132fa:	4606      	mov	r6, r0
 80132fc:	460c      	mov	r4, r1
 80132fe:	d507      	bpl.n	8013310 <__smakebuf_r+0x1c>
 8013300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013304:	6023      	str	r3, [r4, #0]
 8013306:	6123      	str	r3, [r4, #16]
 8013308:	2301      	movs	r3, #1
 801330a:	6163      	str	r3, [r4, #20]
 801330c:	b002      	add	sp, #8
 801330e:	bd70      	pop	{r4, r5, r6, pc}
 8013310:	ab01      	add	r3, sp, #4
 8013312:	466a      	mov	r2, sp
 8013314:	f7ff ffc8 	bl	80132a8 <__swhatbuf_r>
 8013318:	9900      	ldr	r1, [sp, #0]
 801331a:	4605      	mov	r5, r0
 801331c:	4630      	mov	r0, r6
 801331e:	f7fe fed5 	bl	80120cc <_malloc_r>
 8013322:	b948      	cbnz	r0, 8013338 <__smakebuf_r+0x44>
 8013324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013328:	059a      	lsls	r2, r3, #22
 801332a:	d4ef      	bmi.n	801330c <__smakebuf_r+0x18>
 801332c:	f023 0303 	bic.w	r3, r3, #3
 8013330:	f043 0302 	orr.w	r3, r3, #2
 8013334:	81a3      	strh	r3, [r4, #12]
 8013336:	e7e3      	b.n	8013300 <__smakebuf_r+0xc>
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	6020      	str	r0, [r4, #0]
 801333c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013340:	81a3      	strh	r3, [r4, #12]
 8013342:	9b00      	ldr	r3, [sp, #0]
 8013344:	6163      	str	r3, [r4, #20]
 8013346:	9b01      	ldr	r3, [sp, #4]
 8013348:	6120      	str	r0, [r4, #16]
 801334a:	b15b      	cbz	r3, 8013364 <__smakebuf_r+0x70>
 801334c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013350:	4630      	mov	r0, r6
 8013352:	f000 f837 	bl	80133c4 <_isatty_r>
 8013356:	b128      	cbz	r0, 8013364 <__smakebuf_r+0x70>
 8013358:	89a3      	ldrh	r3, [r4, #12]
 801335a:	f023 0303 	bic.w	r3, r3, #3
 801335e:	f043 0301 	orr.w	r3, r3, #1
 8013362:	81a3      	strh	r3, [r4, #12]
 8013364:	89a3      	ldrh	r3, [r4, #12]
 8013366:	431d      	orrs	r5, r3
 8013368:	81a5      	strh	r5, [r4, #12]
 801336a:	e7cf      	b.n	801330c <__smakebuf_r+0x18>

0801336c <memmove>:
 801336c:	4288      	cmp	r0, r1
 801336e:	b510      	push	{r4, lr}
 8013370:	eb01 0402 	add.w	r4, r1, r2
 8013374:	d902      	bls.n	801337c <memmove+0x10>
 8013376:	4284      	cmp	r4, r0
 8013378:	4623      	mov	r3, r4
 801337a:	d807      	bhi.n	801338c <memmove+0x20>
 801337c:	1e43      	subs	r3, r0, #1
 801337e:	42a1      	cmp	r1, r4
 8013380:	d008      	beq.n	8013394 <memmove+0x28>
 8013382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801338a:	e7f8      	b.n	801337e <memmove+0x12>
 801338c:	4402      	add	r2, r0
 801338e:	4601      	mov	r1, r0
 8013390:	428a      	cmp	r2, r1
 8013392:	d100      	bne.n	8013396 <memmove+0x2a>
 8013394:	bd10      	pop	{r4, pc}
 8013396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801339a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801339e:	e7f7      	b.n	8013390 <memmove+0x24>

080133a0 <_fstat_r>:
 80133a0:	b538      	push	{r3, r4, r5, lr}
 80133a2:	4d07      	ldr	r5, [pc, #28]	; (80133c0 <_fstat_r+0x20>)
 80133a4:	2300      	movs	r3, #0
 80133a6:	4604      	mov	r4, r0
 80133a8:	4608      	mov	r0, r1
 80133aa:	4611      	mov	r1, r2
 80133ac:	602b      	str	r3, [r5, #0]
 80133ae:	f7f8 f9d0 	bl	800b752 <_fstat>
 80133b2:	1c43      	adds	r3, r0, #1
 80133b4:	d102      	bne.n	80133bc <_fstat_r+0x1c>
 80133b6:	682b      	ldr	r3, [r5, #0]
 80133b8:	b103      	cbz	r3, 80133bc <_fstat_r+0x1c>
 80133ba:	6023      	str	r3, [r4, #0]
 80133bc:	bd38      	pop	{r3, r4, r5, pc}
 80133be:	bf00      	nop
 80133c0:	20002c48 	.word	0x20002c48

080133c4 <_isatty_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d06      	ldr	r5, [pc, #24]	; (80133e0 <_isatty_r+0x1c>)
 80133c8:	2300      	movs	r3, #0
 80133ca:	4604      	mov	r4, r0
 80133cc:	4608      	mov	r0, r1
 80133ce:	602b      	str	r3, [r5, #0]
 80133d0:	f7f8 f9cf 	bl	800b772 <_isatty>
 80133d4:	1c43      	adds	r3, r0, #1
 80133d6:	d102      	bne.n	80133de <_isatty_r+0x1a>
 80133d8:	682b      	ldr	r3, [r5, #0]
 80133da:	b103      	cbz	r3, 80133de <_isatty_r+0x1a>
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	bd38      	pop	{r3, r4, r5, pc}
 80133e0:	20002c48 	.word	0x20002c48

080133e4 <_sbrk_r>:
 80133e4:	b538      	push	{r3, r4, r5, lr}
 80133e6:	4d06      	ldr	r5, [pc, #24]	; (8013400 <_sbrk_r+0x1c>)
 80133e8:	2300      	movs	r3, #0
 80133ea:	4604      	mov	r4, r0
 80133ec:	4608      	mov	r0, r1
 80133ee:	602b      	str	r3, [r5, #0]
 80133f0:	f7f8 f9d8 	bl	800b7a4 <_sbrk>
 80133f4:	1c43      	adds	r3, r0, #1
 80133f6:	d102      	bne.n	80133fe <_sbrk_r+0x1a>
 80133f8:	682b      	ldr	r3, [r5, #0]
 80133fa:	b103      	cbz	r3, 80133fe <_sbrk_r+0x1a>
 80133fc:	6023      	str	r3, [r4, #0]
 80133fe:	bd38      	pop	{r3, r4, r5, pc}
 8013400:	20002c48 	.word	0x20002c48

08013404 <__assert_func>:
 8013404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013406:	4614      	mov	r4, r2
 8013408:	461a      	mov	r2, r3
 801340a:	4b09      	ldr	r3, [pc, #36]	; (8013430 <__assert_func+0x2c>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4605      	mov	r5, r0
 8013410:	68d8      	ldr	r0, [r3, #12]
 8013412:	b14c      	cbz	r4, 8013428 <__assert_func+0x24>
 8013414:	4b07      	ldr	r3, [pc, #28]	; (8013434 <__assert_func+0x30>)
 8013416:	9100      	str	r1, [sp, #0]
 8013418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801341c:	4906      	ldr	r1, [pc, #24]	; (8013438 <__assert_func+0x34>)
 801341e:	462b      	mov	r3, r5
 8013420:	f000 f85c 	bl	80134dc <fiprintf>
 8013424:	f000 f86c 	bl	8013500 <abort>
 8013428:	4b04      	ldr	r3, [pc, #16]	; (801343c <__assert_func+0x38>)
 801342a:	461c      	mov	r4, r3
 801342c:	e7f3      	b.n	8013416 <__assert_func+0x12>
 801342e:	bf00      	nop
 8013430:	20000394 	.word	0x20000394
 8013434:	080219ef 	.word	0x080219ef
 8013438:	080219fc 	.word	0x080219fc
 801343c:	08021a2a 	.word	0x08021a2a

08013440 <_calloc_r>:
 8013440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013442:	fba1 2402 	umull	r2, r4, r1, r2
 8013446:	b94c      	cbnz	r4, 801345c <_calloc_r+0x1c>
 8013448:	4611      	mov	r1, r2
 801344a:	9201      	str	r2, [sp, #4]
 801344c:	f7fe fe3e 	bl	80120cc <_malloc_r>
 8013450:	9a01      	ldr	r2, [sp, #4]
 8013452:	4605      	mov	r5, r0
 8013454:	b930      	cbnz	r0, 8013464 <_calloc_r+0x24>
 8013456:	4628      	mov	r0, r5
 8013458:	b003      	add	sp, #12
 801345a:	bd30      	pop	{r4, r5, pc}
 801345c:	220c      	movs	r2, #12
 801345e:	6002      	str	r2, [r0, #0]
 8013460:	2500      	movs	r5, #0
 8013462:	e7f8      	b.n	8013456 <_calloc_r+0x16>
 8013464:	4621      	mov	r1, r4
 8013466:	f7fe f98d 	bl	8011784 <memset>
 801346a:	e7f4      	b.n	8013456 <_calloc_r+0x16>

0801346c <malloc>:
 801346c:	4b02      	ldr	r3, [pc, #8]	; (8013478 <malloc+0xc>)
 801346e:	4601      	mov	r1, r0
 8013470:	6818      	ldr	r0, [r3, #0]
 8013472:	f7fe be2b 	b.w	80120cc <_malloc_r>
 8013476:	bf00      	nop
 8013478:	20000394 	.word	0x20000394

0801347c <_realloc_r>:
 801347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013480:	4680      	mov	r8, r0
 8013482:	4614      	mov	r4, r2
 8013484:	460e      	mov	r6, r1
 8013486:	b921      	cbnz	r1, 8013492 <_realloc_r+0x16>
 8013488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801348c:	4611      	mov	r1, r2
 801348e:	f7fe be1d 	b.w	80120cc <_malloc_r>
 8013492:	b92a      	cbnz	r2, 80134a0 <_realloc_r+0x24>
 8013494:	f7fe fa56 	bl	8011944 <_free_r>
 8013498:	4625      	mov	r5, r4
 801349a:	4628      	mov	r0, r5
 801349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a0:	f000 f835 	bl	801350e <_malloc_usable_size_r>
 80134a4:	4284      	cmp	r4, r0
 80134a6:	4607      	mov	r7, r0
 80134a8:	d802      	bhi.n	80134b0 <_realloc_r+0x34>
 80134aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80134ae:	d812      	bhi.n	80134d6 <_realloc_r+0x5a>
 80134b0:	4621      	mov	r1, r4
 80134b2:	4640      	mov	r0, r8
 80134b4:	f7fe fe0a 	bl	80120cc <_malloc_r>
 80134b8:	4605      	mov	r5, r0
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d0ed      	beq.n	801349a <_realloc_r+0x1e>
 80134be:	42bc      	cmp	r4, r7
 80134c0:	4622      	mov	r2, r4
 80134c2:	4631      	mov	r1, r6
 80134c4:	bf28      	it	cs
 80134c6:	463a      	movcs	r2, r7
 80134c8:	f7fe fa1d 	bl	8011906 <memcpy>
 80134cc:	4631      	mov	r1, r6
 80134ce:	4640      	mov	r0, r8
 80134d0:	f7fe fa38 	bl	8011944 <_free_r>
 80134d4:	e7e1      	b.n	801349a <_realloc_r+0x1e>
 80134d6:	4635      	mov	r5, r6
 80134d8:	e7df      	b.n	801349a <_realloc_r+0x1e>
	...

080134dc <fiprintf>:
 80134dc:	b40e      	push	{r1, r2, r3}
 80134de:	b503      	push	{r0, r1, lr}
 80134e0:	4601      	mov	r1, r0
 80134e2:	ab03      	add	r3, sp, #12
 80134e4:	4805      	ldr	r0, [pc, #20]	; (80134fc <fiprintf+0x20>)
 80134e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80134ea:	6800      	ldr	r0, [r0, #0]
 80134ec:	9301      	str	r3, [sp, #4]
 80134ee:	f000 f83f 	bl	8013570 <_vfiprintf_r>
 80134f2:	b002      	add	sp, #8
 80134f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80134f8:	b003      	add	sp, #12
 80134fa:	4770      	bx	lr
 80134fc:	20000394 	.word	0x20000394

08013500 <abort>:
 8013500:	b508      	push	{r3, lr}
 8013502:	2006      	movs	r0, #6
 8013504:	f000 f976 	bl	80137f4 <raise>
 8013508:	2001      	movs	r0, #1
 801350a:	f7f8 f8d3 	bl	800b6b4 <_exit>

0801350e <_malloc_usable_size_r>:
 801350e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013512:	1f18      	subs	r0, r3, #4
 8013514:	2b00      	cmp	r3, #0
 8013516:	bfbc      	itt	lt
 8013518:	580b      	ldrlt	r3, [r1, r0]
 801351a:	18c0      	addlt	r0, r0, r3
 801351c:	4770      	bx	lr

0801351e <__sfputc_r>:
 801351e:	6893      	ldr	r3, [r2, #8]
 8013520:	3b01      	subs	r3, #1
 8013522:	2b00      	cmp	r3, #0
 8013524:	b410      	push	{r4}
 8013526:	6093      	str	r3, [r2, #8]
 8013528:	da08      	bge.n	801353c <__sfputc_r+0x1e>
 801352a:	6994      	ldr	r4, [r2, #24]
 801352c:	42a3      	cmp	r3, r4
 801352e:	db01      	blt.n	8013534 <__sfputc_r+0x16>
 8013530:	290a      	cmp	r1, #10
 8013532:	d103      	bne.n	801353c <__sfputc_r+0x1e>
 8013534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013538:	f7fe b88e 	b.w	8011658 <__swbuf_r>
 801353c:	6813      	ldr	r3, [r2, #0]
 801353e:	1c58      	adds	r0, r3, #1
 8013540:	6010      	str	r0, [r2, #0]
 8013542:	7019      	strb	r1, [r3, #0]
 8013544:	4608      	mov	r0, r1
 8013546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801354a:	4770      	bx	lr

0801354c <__sfputs_r>:
 801354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354e:	4606      	mov	r6, r0
 8013550:	460f      	mov	r7, r1
 8013552:	4614      	mov	r4, r2
 8013554:	18d5      	adds	r5, r2, r3
 8013556:	42ac      	cmp	r4, r5
 8013558:	d101      	bne.n	801355e <__sfputs_r+0x12>
 801355a:	2000      	movs	r0, #0
 801355c:	e007      	b.n	801356e <__sfputs_r+0x22>
 801355e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013562:	463a      	mov	r2, r7
 8013564:	4630      	mov	r0, r6
 8013566:	f7ff ffda 	bl	801351e <__sfputc_r>
 801356a:	1c43      	adds	r3, r0, #1
 801356c:	d1f3      	bne.n	8013556 <__sfputs_r+0xa>
 801356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013570 <_vfiprintf_r>:
 8013570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013574:	460d      	mov	r5, r1
 8013576:	b09d      	sub	sp, #116	; 0x74
 8013578:	4614      	mov	r4, r2
 801357a:	4698      	mov	r8, r3
 801357c:	4606      	mov	r6, r0
 801357e:	b118      	cbz	r0, 8013588 <_vfiprintf_r+0x18>
 8013580:	6a03      	ldr	r3, [r0, #32]
 8013582:	b90b      	cbnz	r3, 8013588 <_vfiprintf_r+0x18>
 8013584:	f7fd ffb6 	bl	80114f4 <__sinit>
 8013588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801358a:	07d9      	lsls	r1, r3, #31
 801358c:	d405      	bmi.n	801359a <_vfiprintf_r+0x2a>
 801358e:	89ab      	ldrh	r3, [r5, #12]
 8013590:	059a      	lsls	r2, r3, #22
 8013592:	d402      	bmi.n	801359a <_vfiprintf_r+0x2a>
 8013594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013596:	f7fe f9ac 	bl	80118f2 <__retarget_lock_acquire_recursive>
 801359a:	89ab      	ldrh	r3, [r5, #12]
 801359c:	071b      	lsls	r3, r3, #28
 801359e:	d501      	bpl.n	80135a4 <_vfiprintf_r+0x34>
 80135a0:	692b      	ldr	r3, [r5, #16]
 80135a2:	b99b      	cbnz	r3, 80135cc <_vfiprintf_r+0x5c>
 80135a4:	4629      	mov	r1, r5
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7fe f894 	bl	80116d4 <__swsetup_r>
 80135ac:	b170      	cbz	r0, 80135cc <_vfiprintf_r+0x5c>
 80135ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135b0:	07dc      	lsls	r4, r3, #31
 80135b2:	d504      	bpl.n	80135be <_vfiprintf_r+0x4e>
 80135b4:	f04f 30ff 	mov.w	r0, #4294967295
 80135b8:	b01d      	add	sp, #116	; 0x74
 80135ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135be:	89ab      	ldrh	r3, [r5, #12]
 80135c0:	0598      	lsls	r0, r3, #22
 80135c2:	d4f7      	bmi.n	80135b4 <_vfiprintf_r+0x44>
 80135c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135c6:	f7fe f995 	bl	80118f4 <__retarget_lock_release_recursive>
 80135ca:	e7f3      	b.n	80135b4 <_vfiprintf_r+0x44>
 80135cc:	2300      	movs	r3, #0
 80135ce:	9309      	str	r3, [sp, #36]	; 0x24
 80135d0:	2320      	movs	r3, #32
 80135d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80135d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80135da:	2330      	movs	r3, #48	; 0x30
 80135dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013790 <_vfiprintf_r+0x220>
 80135e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135e4:	f04f 0901 	mov.w	r9, #1
 80135e8:	4623      	mov	r3, r4
 80135ea:	469a      	mov	sl, r3
 80135ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135f0:	b10a      	cbz	r2, 80135f6 <_vfiprintf_r+0x86>
 80135f2:	2a25      	cmp	r2, #37	; 0x25
 80135f4:	d1f9      	bne.n	80135ea <_vfiprintf_r+0x7a>
 80135f6:	ebba 0b04 	subs.w	fp, sl, r4
 80135fa:	d00b      	beq.n	8013614 <_vfiprintf_r+0xa4>
 80135fc:	465b      	mov	r3, fp
 80135fe:	4622      	mov	r2, r4
 8013600:	4629      	mov	r1, r5
 8013602:	4630      	mov	r0, r6
 8013604:	f7ff ffa2 	bl	801354c <__sfputs_r>
 8013608:	3001      	adds	r0, #1
 801360a:	f000 80a9 	beq.w	8013760 <_vfiprintf_r+0x1f0>
 801360e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013610:	445a      	add	r2, fp
 8013612:	9209      	str	r2, [sp, #36]	; 0x24
 8013614:	f89a 3000 	ldrb.w	r3, [sl]
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 80a1 	beq.w	8013760 <_vfiprintf_r+0x1f0>
 801361e:	2300      	movs	r3, #0
 8013620:	f04f 32ff 	mov.w	r2, #4294967295
 8013624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013628:	f10a 0a01 	add.w	sl, sl, #1
 801362c:	9304      	str	r3, [sp, #16]
 801362e:	9307      	str	r3, [sp, #28]
 8013630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013634:	931a      	str	r3, [sp, #104]	; 0x68
 8013636:	4654      	mov	r4, sl
 8013638:	2205      	movs	r2, #5
 801363a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801363e:	4854      	ldr	r0, [pc, #336]	; (8013790 <_vfiprintf_r+0x220>)
 8013640:	f7ec fdd6 	bl	80001f0 <memchr>
 8013644:	9a04      	ldr	r2, [sp, #16]
 8013646:	b9d8      	cbnz	r0, 8013680 <_vfiprintf_r+0x110>
 8013648:	06d1      	lsls	r1, r2, #27
 801364a:	bf44      	itt	mi
 801364c:	2320      	movmi	r3, #32
 801364e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013652:	0713      	lsls	r3, r2, #28
 8013654:	bf44      	itt	mi
 8013656:	232b      	movmi	r3, #43	; 0x2b
 8013658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801365c:	f89a 3000 	ldrb.w	r3, [sl]
 8013660:	2b2a      	cmp	r3, #42	; 0x2a
 8013662:	d015      	beq.n	8013690 <_vfiprintf_r+0x120>
 8013664:	9a07      	ldr	r2, [sp, #28]
 8013666:	4654      	mov	r4, sl
 8013668:	2000      	movs	r0, #0
 801366a:	f04f 0c0a 	mov.w	ip, #10
 801366e:	4621      	mov	r1, r4
 8013670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013674:	3b30      	subs	r3, #48	; 0x30
 8013676:	2b09      	cmp	r3, #9
 8013678:	d94d      	bls.n	8013716 <_vfiprintf_r+0x1a6>
 801367a:	b1b0      	cbz	r0, 80136aa <_vfiprintf_r+0x13a>
 801367c:	9207      	str	r2, [sp, #28]
 801367e:	e014      	b.n	80136aa <_vfiprintf_r+0x13a>
 8013680:	eba0 0308 	sub.w	r3, r0, r8
 8013684:	fa09 f303 	lsl.w	r3, r9, r3
 8013688:	4313      	orrs	r3, r2
 801368a:	9304      	str	r3, [sp, #16]
 801368c:	46a2      	mov	sl, r4
 801368e:	e7d2      	b.n	8013636 <_vfiprintf_r+0xc6>
 8013690:	9b03      	ldr	r3, [sp, #12]
 8013692:	1d19      	adds	r1, r3, #4
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	9103      	str	r1, [sp, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	bfbb      	ittet	lt
 801369c:	425b      	neglt	r3, r3
 801369e:	f042 0202 	orrlt.w	r2, r2, #2
 80136a2:	9307      	strge	r3, [sp, #28]
 80136a4:	9307      	strlt	r3, [sp, #28]
 80136a6:	bfb8      	it	lt
 80136a8:	9204      	strlt	r2, [sp, #16]
 80136aa:	7823      	ldrb	r3, [r4, #0]
 80136ac:	2b2e      	cmp	r3, #46	; 0x2e
 80136ae:	d10c      	bne.n	80136ca <_vfiprintf_r+0x15a>
 80136b0:	7863      	ldrb	r3, [r4, #1]
 80136b2:	2b2a      	cmp	r3, #42	; 0x2a
 80136b4:	d134      	bne.n	8013720 <_vfiprintf_r+0x1b0>
 80136b6:	9b03      	ldr	r3, [sp, #12]
 80136b8:	1d1a      	adds	r2, r3, #4
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	9203      	str	r2, [sp, #12]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	bfb8      	it	lt
 80136c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80136c6:	3402      	adds	r4, #2
 80136c8:	9305      	str	r3, [sp, #20]
 80136ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80137a0 <_vfiprintf_r+0x230>
 80136ce:	7821      	ldrb	r1, [r4, #0]
 80136d0:	2203      	movs	r2, #3
 80136d2:	4650      	mov	r0, sl
 80136d4:	f7ec fd8c 	bl	80001f0 <memchr>
 80136d8:	b138      	cbz	r0, 80136ea <_vfiprintf_r+0x17a>
 80136da:	9b04      	ldr	r3, [sp, #16]
 80136dc:	eba0 000a 	sub.w	r0, r0, sl
 80136e0:	2240      	movs	r2, #64	; 0x40
 80136e2:	4082      	lsls	r2, r0
 80136e4:	4313      	orrs	r3, r2
 80136e6:	3401      	adds	r4, #1
 80136e8:	9304      	str	r3, [sp, #16]
 80136ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ee:	4829      	ldr	r0, [pc, #164]	; (8013794 <_vfiprintf_r+0x224>)
 80136f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136f4:	2206      	movs	r2, #6
 80136f6:	f7ec fd7b 	bl	80001f0 <memchr>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d03f      	beq.n	801377e <_vfiprintf_r+0x20e>
 80136fe:	4b26      	ldr	r3, [pc, #152]	; (8013798 <_vfiprintf_r+0x228>)
 8013700:	bb1b      	cbnz	r3, 801374a <_vfiprintf_r+0x1da>
 8013702:	9b03      	ldr	r3, [sp, #12]
 8013704:	3307      	adds	r3, #7
 8013706:	f023 0307 	bic.w	r3, r3, #7
 801370a:	3308      	adds	r3, #8
 801370c:	9303      	str	r3, [sp, #12]
 801370e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013710:	443b      	add	r3, r7
 8013712:	9309      	str	r3, [sp, #36]	; 0x24
 8013714:	e768      	b.n	80135e8 <_vfiprintf_r+0x78>
 8013716:	fb0c 3202 	mla	r2, ip, r2, r3
 801371a:	460c      	mov	r4, r1
 801371c:	2001      	movs	r0, #1
 801371e:	e7a6      	b.n	801366e <_vfiprintf_r+0xfe>
 8013720:	2300      	movs	r3, #0
 8013722:	3401      	adds	r4, #1
 8013724:	9305      	str	r3, [sp, #20]
 8013726:	4619      	mov	r1, r3
 8013728:	f04f 0c0a 	mov.w	ip, #10
 801372c:	4620      	mov	r0, r4
 801372e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013732:	3a30      	subs	r2, #48	; 0x30
 8013734:	2a09      	cmp	r2, #9
 8013736:	d903      	bls.n	8013740 <_vfiprintf_r+0x1d0>
 8013738:	2b00      	cmp	r3, #0
 801373a:	d0c6      	beq.n	80136ca <_vfiprintf_r+0x15a>
 801373c:	9105      	str	r1, [sp, #20]
 801373e:	e7c4      	b.n	80136ca <_vfiprintf_r+0x15a>
 8013740:	fb0c 2101 	mla	r1, ip, r1, r2
 8013744:	4604      	mov	r4, r0
 8013746:	2301      	movs	r3, #1
 8013748:	e7f0      	b.n	801372c <_vfiprintf_r+0x1bc>
 801374a:	ab03      	add	r3, sp, #12
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	462a      	mov	r2, r5
 8013750:	4b12      	ldr	r3, [pc, #72]	; (801379c <_vfiprintf_r+0x22c>)
 8013752:	a904      	add	r1, sp, #16
 8013754:	4630      	mov	r0, r6
 8013756:	f3af 8000 	nop.w
 801375a:	4607      	mov	r7, r0
 801375c:	1c78      	adds	r0, r7, #1
 801375e:	d1d6      	bne.n	801370e <_vfiprintf_r+0x19e>
 8013760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013762:	07d9      	lsls	r1, r3, #31
 8013764:	d405      	bmi.n	8013772 <_vfiprintf_r+0x202>
 8013766:	89ab      	ldrh	r3, [r5, #12]
 8013768:	059a      	lsls	r2, r3, #22
 801376a:	d402      	bmi.n	8013772 <_vfiprintf_r+0x202>
 801376c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801376e:	f7fe f8c1 	bl	80118f4 <__retarget_lock_release_recursive>
 8013772:	89ab      	ldrh	r3, [r5, #12]
 8013774:	065b      	lsls	r3, r3, #25
 8013776:	f53f af1d 	bmi.w	80135b4 <_vfiprintf_r+0x44>
 801377a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801377c:	e71c      	b.n	80135b8 <_vfiprintf_r+0x48>
 801377e:	ab03      	add	r3, sp, #12
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	462a      	mov	r2, r5
 8013784:	4b05      	ldr	r3, [pc, #20]	; (801379c <_vfiprintf_r+0x22c>)
 8013786:	a904      	add	r1, sp, #16
 8013788:	4630      	mov	r0, r6
 801378a:	f7ff fbbd 	bl	8012f08 <_printf_i>
 801378e:	e7e4      	b.n	801375a <_vfiprintf_r+0x1ea>
 8013790:	080219bc 	.word	0x080219bc
 8013794:	080219c6 	.word	0x080219c6
 8013798:	00000000 	.word	0x00000000
 801379c:	0801354d 	.word	0x0801354d
 80137a0:	080219c2 	.word	0x080219c2

080137a4 <_raise_r>:
 80137a4:	291f      	cmp	r1, #31
 80137a6:	b538      	push	{r3, r4, r5, lr}
 80137a8:	4604      	mov	r4, r0
 80137aa:	460d      	mov	r5, r1
 80137ac:	d904      	bls.n	80137b8 <_raise_r+0x14>
 80137ae:	2316      	movs	r3, #22
 80137b0:	6003      	str	r3, [r0, #0]
 80137b2:	f04f 30ff 	mov.w	r0, #4294967295
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80137ba:	b112      	cbz	r2, 80137c2 <_raise_r+0x1e>
 80137bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137c0:	b94b      	cbnz	r3, 80137d6 <_raise_r+0x32>
 80137c2:	4620      	mov	r0, r4
 80137c4:	f000 f830 	bl	8013828 <_getpid_r>
 80137c8:	462a      	mov	r2, r5
 80137ca:	4601      	mov	r1, r0
 80137cc:	4620      	mov	r0, r4
 80137ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137d2:	f000 b817 	b.w	8013804 <_kill_r>
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d00a      	beq.n	80137f0 <_raise_r+0x4c>
 80137da:	1c59      	adds	r1, r3, #1
 80137dc:	d103      	bne.n	80137e6 <_raise_r+0x42>
 80137de:	2316      	movs	r3, #22
 80137e0:	6003      	str	r3, [r0, #0]
 80137e2:	2001      	movs	r0, #1
 80137e4:	e7e7      	b.n	80137b6 <_raise_r+0x12>
 80137e6:	2400      	movs	r4, #0
 80137e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80137ec:	4628      	mov	r0, r5
 80137ee:	4798      	blx	r3
 80137f0:	2000      	movs	r0, #0
 80137f2:	e7e0      	b.n	80137b6 <_raise_r+0x12>

080137f4 <raise>:
 80137f4:	4b02      	ldr	r3, [pc, #8]	; (8013800 <raise+0xc>)
 80137f6:	4601      	mov	r1, r0
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	f7ff bfd3 	b.w	80137a4 <_raise_r>
 80137fe:	bf00      	nop
 8013800:	20000394 	.word	0x20000394

08013804 <_kill_r>:
 8013804:	b538      	push	{r3, r4, r5, lr}
 8013806:	4d07      	ldr	r5, [pc, #28]	; (8013824 <_kill_r+0x20>)
 8013808:	2300      	movs	r3, #0
 801380a:	4604      	mov	r4, r0
 801380c:	4608      	mov	r0, r1
 801380e:	4611      	mov	r1, r2
 8013810:	602b      	str	r3, [r5, #0]
 8013812:	f7f7 ff3f 	bl	800b694 <_kill>
 8013816:	1c43      	adds	r3, r0, #1
 8013818:	d102      	bne.n	8013820 <_kill_r+0x1c>
 801381a:	682b      	ldr	r3, [r5, #0]
 801381c:	b103      	cbz	r3, 8013820 <_kill_r+0x1c>
 801381e:	6023      	str	r3, [r4, #0]
 8013820:	bd38      	pop	{r3, r4, r5, pc}
 8013822:	bf00      	nop
 8013824:	20002c48 	.word	0x20002c48

08013828 <_getpid_r>:
 8013828:	f7f7 bf2c 	b.w	800b684 <_getpid>

0801382c <_init>:
 801382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382e:	bf00      	nop
 8013830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013832:	bc08      	pop	{r3}
 8013834:	469e      	mov	lr, r3
 8013836:	4770      	bx	lr

08013838 <_fini>:
 8013838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383a:	bf00      	nop
 801383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801383e:	bc08      	pop	{r3}
 8013840:	469e      	mov	lr, r3
 8013842:	4770      	bx	lr
